class Configuration
  is subclass of Component

instance variables
  protected config: inmap nat to nat;

operations

public Configuration: (inmap nat to nat) * [Component] * Alphabet ==>
       Configuration
Configuration(cf,com,al) ==
  atomic(config := cf;
         next := com;
         alph := al);
 
  protected Encode: nat ==> nat
  Encode (penc) ==
    if penc in set dom config
    then return config(penc)
    else return penc;

  protected Decode: nat ==> nat
  Decode (pdec) ==
    let invcfg = inverse config in
      if pdec in set dom invcfg
      then return invcfg(pdec)
      else return pdec;

  public Substitute: nat ==> nat
  Substitute(pidx) ==
    return Decode(next.Substitute(Encode(pidx)))
  pre next <> nil

end Configuration
