class PlugboardTest
  is subclass of TestCase

values
  refcfg : inmap nat to nat =
    {1 |-> 2, 3 |-> 4};

  rotcfg : inmap nat to nat =
    {1 |-> 2, 2 |-> 1, 3 |-> 4, 4 |-> 3};

  pbcfg : inmap nat to nat =
    {1 |-> 3}

instance variables
  alph : Alphabet
  
operations
  public PlugboardTest: seq of char * Alphabet ==> PlugboardTest
  PlugboardTest(nm,al) ==
    atomic ( name := nm;
             alph := al);

  protected SetUp: () ==> ()
  SetUp () == alph := new Alphabet("ABCD");

  protected SimpleTest: () ==> ()
  SimpleTest () ==
    (dcl tc : Plugboard := new Plugboard(alph,new Reflector(1,alph,nil,refcfg),pbcfg);
     AssertTrue(tc.Substitute(1) = 4);
     AssertTrue(tc.Substitute(2) = 3);
     AssertTrue(tc.Substitute(3) = 2);
     AssertTrue(tc.Substitute(4) = 1));

  protected ComplexTest: () ==> ()
  ComplexTest () ==
    let reflec : Reflector = new Reflector(1,alph,nil,refcfg),
        rot : Rotor = new Rotor(1,1,reflec,alph,rotcfg),
        tc : Plugboard = new Plugboard(alph,rot,pbcfg)
    in
     (AssertTrue(tc.Substitute(1) = 4);
      AssertTrue(tc.Substitute(2) = 3);
      AssertTrue(tc.Substitute(3) = 2);
      AssertTrue(tc.Substitute(4) = 1));

  protected RunTest: () ==> ()
  RunTest () == (SimpleTest(); ComplexTest());

  protected TearDown: () ==> ()
  TearDown () == skip;

end PlugboardTest
