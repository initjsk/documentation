class GLOBAL
values
   refcfg : inmap nat to nat =
     {1 |-> 3, 2 |-> 4};
   rotcfg : inmap nat to nat =
     {1 |-> 2, 2 |-> 4, 3 |-> 3, 4 |-> 1};
   pbcfg : inmap nat to nat =
     {2 |-> 3}

operations

public static NewSimpleEnigma: () ==> SimpleEnigma
NewSimpleEnigma() ==
  let alph = new Alphabet("ABCD"),
      reflec = new Reflector(4,alph,nil,refcfg),
      rot3 = new Rotor(3,3,reflec,alph,rotcfg),
      rot2 = new Rotor(2,2,rot3,alph,rotcfg),
      rot1 = new Rotor(1,1,rot2,alph,rotcfg),
      plug = new Plugboard(alph,rot1,pbcfg) 
  in
    return new SimpleEnigma(plug,alph);

  public EnigmaTestExecute: () ==> ()
  EnigmaTestExecute () ==
  let alph = new Alphabet("ABCD")
  in
    (dcl ts : TestSuite := new TestSuite();
     ts.AddTest(new AlphabetTest("Alphabet"));
     ts.AddTest(new ConfigurationTest("Configuration"));
     ts.AddTest(new ReflectorTest("Reflector",alph));
     ts.AddTest(new RotorTest("Rotor",alph));
     ts.AddTest(new PlugboardTest("Plugboard",alph));
     ts.AddTest(new SimpleEnigmaTest("SimpleEnigma"));
     ts.Run())

end GLOBAL