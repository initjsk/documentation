WARNING:atc.vdmpp:5008:125,27:radars at 6'1 hidden by radars.
WARNING:atc.vdmpp:5008:130,27:radars at 6'1 hidden by radars.
RESULT:result:-1:-1,-1:class Environment is subclass of GLOBALstatic private type InputTP'InputTPstatic private type inline'inlinestatic private type FOOut'FOOutstatic private type RadarOut'RadarOutstatic private type outline'outlineprivate instance variable io'IOprivate instance variable inlines'seq of (inline)private instance variable outlines'seq of (outline)private instance variable airspace'[AirSpace]private instance variable busy'boolprivate instance variable updating'boolprivate instance variable simtime'Timepublic explicit operation Environment(String)'(String ==> Environment)public explicit operation setAirSpace(AirSpace)'(AirSpace ==> ())public explicit operation handleFOWarningEvent(FOId, Coordinates, Altitude, FOWarning, MinimumSafetyAltitude, Time)'(FOId * Coordinates * Altitude * FOWarning * MinimumSafetyAltitude * Time ==> ())public explicit operation handleRadarWarningEvent(Coordinates, nat1, RadarWarning, nat, Time)'(Coordinates * nat1 * RadarWarning * nat * Time ==> ())public explicit operation showResult()'(() ==> ())private explicit operation updateFOs()'(() ==> ())public explicit operation isFinished()'(() ==> ())private mutex predicate '?private permission predicate 'boolprivate mutex predicate '?private mutex predicate '?protected thread thread'?end Environmentclass FO is subclass of GLOBALprivate instance variable id'FOIdprivate instance variable coord'Coordinatesprivate instance variable alt'Altitudepublic explicit operation FO(FOId, Coordinates, Altitude)'(FOId * Coordinates * Altitude ==> FO)public explicit operation getId()'(() ==> FOId)public explicit operation getCoordinates()'(() ==> Coordinates)public explicit operation setCoordinates(Coordinates)'(Coordinates ==> ())public explicit operation getAltitude()'(() ==> Altitude)public explicit operation setAltitude(Altitude)'(Altitude ==> ())public explicit operation getPosition()'(() ==> Position)end FOclass AirTrafficController is subclass of GLOBALprivate instance variable busy'boolprivate instance variable radars'set of (Radar)private instance variable obstacles'set of (Obstacle)private instance variable history'map (FOId) to (seq of (Position))private explicit operation OverviewAllRadars()'(() ==> map (FOId) to (FO))private explicit operation getDirectionVectors(FOId)'(FOId ==> seq of (Vector))public explicit operation getAltitudeHistory(FOId)'(FOId ==> seq of (nat))public explicit operation updateHistory()'(() ==> ())private explicit operation registerHistory(FO)'(FO ==> ())private explicit operation cleanUpHistory()'(() ==> ())private explicit function addHistory(History, Coordinates, Altitude)'(History * Coordinates * Altitude -> History)private explicit function last(History)'(History -> Position)public explicit operation addRadar(Radar)'(Radar ==> ())public explicit operation addObstacle(Obstacle)'(Obstacle ==> ())public explicit operation findThreats()'(() ==> ())public explicit operation UpdatesPresent()'(() ==> ())public explicit operation detectedByTwoRadars(set of (Radar))'(set of (Radar) ==> set of (FO))public explicit operation detectedByAllRadars(set of (Radar))'(set of (Radar) ==> set of (FO))private explicit operation isFOSafe(Obstacle, Position)'(Obstacle * Position ==> bool)private explicit operation isFOatSafeAltitude(MinimumSafetyAltitude, Position)'(MinimumSafetyAltitude * Position ==> bool)private explicit operation willFObeSafe(Obstacle, FO)'(Obstacle * FO ==> ())private explicit operation writeObjectWarning(Obstacle, FO)'(Obstacle * FO ==> ())private explicit operation writeRadarWarning(Radar)'(Radar ==> ())private explicit operation isPredictPossible(FO)'(FO ==> [set of (Position)])private explicit operation predictPosition(FO)'(FO ==> set of (Position))private explicit function calculateNeighborhood(Position)'(Position -> set of (Position))private explicit function predictAltitude(seq of (nat))'(seq of (nat) -> nat)public explicit operation isFinished()'(() ==> ())public explicit operation Step()'(() ==> ())protected thread thread'?private permission predicate 'boolprivate permission predicate 'boolend AirTrafficControllerclass Worldstatic public instance variable env'[Environment]static public instance variable timerRef'TimeStamppublic explicit operation World()'(() ==> World)public explicit operation Run()'(() ==> ())end Worldclass Radar is subclass of GLOBALprivate instance variable busy'boolprivate instance variable location'Coordinatesprivate instance variable range'nat1private instance variable detected'map (FOId) to (FO)private instance variable priority'seq of (FO)private invariant inv_Radar'boolpublic explicit operation Radar(int, int, nat1)'(int * int * nat1 ==> Radar)public explicit operation Scan(AirSpace)'(AirSpace ==> ())private explicit operation InRange(FO)'(FO ==> bool)public explicit operation getDetected()'(() ==> set of (FO))public explicit operation getDetectedMap()'(() ==> map (FOId) to (FO))public explicit operation saturatedRadar()'(() ==> bool)public explicit operation getSaturatingFOs()'(() ==> set of (FOId))public explicit operation getLocation()'(() ==> Coordinates)public explicit operation getRange()'(() ==> nat1)private explicit operation UpdatePriorityList()'(() ==> ())private explicit operation removeNotDetected(set of (FO))'(set of (FO) ==> ())private explicit operation addNewlyDetected(map (FOId) to (FO))'(map (FOId) to (FO) ==> ())public explicit operation isFinished()'(() ==> ())private explicit function set2seqFO(set of (FO))'(set of (FO) -> seq of (FO))private explicit function set2seqFOm(set of (FO))'(set of (FO) -> nat)protected thread thread'?private permission predicate 'boolprivate mutex predicate '?private mutex predicate '?private mutex predicate '?end Radarclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IOclass ClockTick is subclass of GLOBALprivate instance variable tid'intpublic explicit operation ClockTick(Time)'(Time ==> ClockTick)protected thread thread'?end ClockTickclass AirSpace is subclass of GLOBALprivate instance variable airspace'map (FOId) to (FO)private invariant inv_AirSpace'boolpublic explicit operation addFO(FO)'(FO ==> ())public explicit operation removeFO(FOId)'(FOId ==> ())public explicit operation getFO(FOId)'(FOId ==> FO)public explicit operation getAirspace()'(() ==> set of (FO))public explicit operation updateFO(FOId, Coordinates, Altitude)'(FOId * Coordinates * Altitude ==> ())end AirSpaceclass GLOBALstatic public type Altitude'Altitudestatic public type FOId'FOIdstatic public type RadarId'RadarIdstatic public type Coordinates'Coordinatesstatic public type Time'Timestatic public type String'Stringstatic public type ObstacleType'ObstacleTypestatic public type FOWarning'FOWarningstatic public type RadarWarning'RadarWarningstatic public type MinimumSafetyAltitude'MinimumSafetyAltitudestatic public type Position'Positionstatic public type History'Historystatic public type Vector'Vectorprotected explicit function isPointInRange(Coordinates, nat1, Coordinates)'(Coordinates * nat1 * Coordinates -> bool)protected explicit function vectorSum(Vector, Vector)'(Vector * Vector -> Vector)protected explicit function vectorDiv(Vector, int)'(Vector * int -> Vector)protected explicit function addVectorToPoint(Vector, Position)'(Vector * Position -> Coordinates)protected explicit function vectorLength(Vector)'(Vector -> real)protected explicit function unitVector(Vector)'(Vector -> Vector)protected explicit function dotProduct(Vector, Vector)'(Vector * Vector -> real)protected explicit function angleBetweenVectors(Vector, Vector)'(Vector * Vector -> real)protected explicit function radians2degree(real)'(real -> real)protected explicit function atan2(real, real)'(real * real -> real)protected explicit function signedVectorAngle(Vector, Vector)'(Vector * Vector -> real)protected explicit function vectorAngle(Vector)'(Vector -> (real * real))protected explicit function vectorRotate(Vector, real)'(Vector * real -> Vector)protected explicit function round(real)'(real -> real)public explicit operation test(real, real, real, real)'(real * real * real * real ==> (Vector * Vector * real * real * Vector * real * real))end GLOBALclass Obstacle is subclass of GLOBALprivate instance variable MSA'MinimumSafetyAltitudeprivate instance variable location'Coordinatesprivate instance variable radius'nat1private instance variable securityRadius'natprivate instance variable type'ObstacleTypepublic explicit operation Obstacle(MinimumSafetyAltitude, Coordinates, nat, nat, ObstacleType)'(MinimumSafetyAltitude * Coordinates * nat * nat * ObstacleType ==> Obstacle)public explicit operation getType()'(() ==> ObstacleType)public explicit operation getCoordinates()'(() ==> Coordinates)public explicit operation getSecureRange()'(() ==> nat1)public explicit operation getMSA()'(() ==> MinimumSafetyAltitude)end Obstacleclass TimeStampstatic public value stepLength'natprivate instance variable currentTime'natprivate instance variable wakeUpMap'map (nat) to (nat)public explicit operation WaitRelative(nat)'(nat ==> ())public explicit operation WaitAbsolute(nat)'(nat ==> ())private explicit operation AddToWakeUpMap(nat, nat)'(nat * nat ==> ())public explicit operation NotifyThread(nat)'(nat ==> ())public explicit operation NotifyAll()'(() ==> ())public explicit operation NotifyAndIncTime()'(() ==> ())public explicit operation GetTime()'(() ==> nat)public explicit operation Awake()'(() ==> ())private permission predicate 'boolprivate mutex predicate '?private mutex predicate '?private mutex predicate '?end TimeStampclass MATHstatic public explicit function sin(real)'(real +> real)static public explicit function cos(real)'(real +> real)static public explicit function tan(real)'(real -> real)static public explicit function cot(real)'(real -> real)static public explicit function asin(real)'(real -> real)static public explicit function acos(real)'(real -> real)static public explicit function atan(real)'(real +> real)static public explicit function acot(real)'(real +> real)static public explicit function sqrt(real)'(real -> real)static public explicit function pi_f()'(() +> real)static public explicit operation srand(int)'(int ==> ())static public explicit operation rand(int)'(int ==> int)static public explicit operation srand2(int)'(int ==> int)static public explicit function exp(real)'(real +> real)static public explicit function ln(real)'(real -> real)static public explicit function log(real)'(real -> real)static public explicit function fac(nat)'(nat -> nat1)static public value pi'realend MATHclass MSAW is subclass of GLOBALstatic public instance variable atc'AirTrafficControllerstatic public instance variable radar1'Radarstatic public instance variable radar2'Radarstatic public instance variable airspace'AirSpacestatic public instance variable militaryZone'Obstacleend MSAW
