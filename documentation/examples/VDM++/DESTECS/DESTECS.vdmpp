class DESTECS
	
types

public TermCondition = 
          Time | -- this is used whenever one wished the simulation 
                 -- to go on for a max amount of time
          <DebugThread> |  -- this is used when one wish to continue untill 
                           -- the debug thread is complete.
          Event | -- This is used if the CT debugging shall be stopped 
                  -- earlier than its anticipated time step. 
          Tool`RTError;          
                
public Files = set of FileId;

public FileId = seq1 of char;

public Time = nat;

public Event = token; 

instance variables

deTool : DETool := new VDMTool();
ctTool : CTTool := new B20SimTool();
tConn : ToolConnector := new ToolConnector();
dist : Disturbance := new Disturbance();

operations

-- A DESTECS project will consist of the following components:
--  1) A collection of Discrete Event files (VDM++ for now)
--  2) A collection of Continuous Time files (20Sim Bond graphs for now)
--  3) A collection of disturbance files for measuring the fault tolerance 
--     of the model (unknown formats right now but with the ability to influence
--     both the models themselves as well as the connection between them)
public DESTECS: Files * Files * Files ==> DESTECS
DESTECS(defiles,ctfiles,distfiles) ==
  let deASTok = deTool.ParseFiles(defiles),
      ctASTok = ctTool.ParseFiles(ctfiles),
      mk_(dedist,ctdist,conndist) = dist.ParseFiles(distfiles)
  in
    if deASTok and ctASTok
    then (deTool.AddDist(dedist);
          ctTool.AddDist(ctdist);
          tConn.AddDist(conndist));
   
-- Before being able to start simulation synax and type checking for all 
-- parts of DESTECS must be checked correctly. So that is an implicit
-- pre-condition here. 
public Simulate: seq of char * Time * TermCondition ==> ()
Simulate(expr,step,terminate) ==
 (dcl evalok : bool := true;
  let deinitok = deTool.InitDEModel(),
      ctinitok = ctTool.InitCTModel()
  in
    if deinitok and ctinitok
    then while evalok and TermNotReached(terminate) do
           let mk_(newt,ev) = ctTool.TakeStep(step)
           in
            (tConn.FromCT2DT();
             if ev <> nil
             then deTool.TakeStep(newt)
             else deTool.TakeStep(step);
             tConn.FromDT2CT()
             )
  );
  
TermNotReached: TermCondition ==> bool
TermNotReached(term) ==
  is not yet specified;

end DESTECS