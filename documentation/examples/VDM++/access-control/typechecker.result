ERROR:FExp.vdmpp:3313:111,9:Operation returns void value. Actual' (() | Val) Expected' Val
ERROR:Evaluater.vdmpp:3313:65,13:Operation returns void value. Actual' (() | <Indeterminate> | <NotApplicable> | Effect) Expected' Effect
ERROR:FExp.vdmpp:3313:130,7:Operation returns void value. Actual' (() | Val) Expected' Val
RESULT:result:-1:-1,-1:class PDPprivate instance variable policies'set of (Policy)private instance variable policyCombAlg'CombAlgpublic explicit operation PDP(set of (Policy), CombAlg)'(set of (Policy) * CombAlg ==> PDP)static public type Permit'Permitstatic public type Deny'Denystatic public type Null'Nullstatic public type CombAlg'CombAlgstatic public type Policy'Policystatic public type Rule'Rulestatic public type Effect'Effectstatic public type Target'Targetstatic public type Action'Actionstatic public type Subject'Subjectstatic public type Resource'Resourcepublic explicit operation GetpolicyCombAlg()'(() ==> CombAlg)public explicit operation Getpolicies()'(() ==> set of (Policy))public explicit operation GetEffect(Rule)'(Rule ==> Effect)end PDPclass Evaluatorprivate instance variable pdp'PDPprivate instance variable env'Envprivate instance variable req'Requestprivate instance variable inst'Inststatic private type Inst'Inststatic private value requester'UnIdstatic private value resource'UnIdpublic explicit operation Evaluator(Request, PDP, Env)'(Request * PDP * Env ==> Evaluator)public explicit operation evaluate()'(() ==> Effect)private explicit operation evaluatePDPDenyOverrides()'(() ==> Effect)private explicit operation evaluatePDPPermitOverrides()'(() ==> Effect)private explicit operation evaluateRule(Rule)'(Rule ==> Effect)private explicit operation evaluatePol(Policy)'(Policy ==> Effect)private explicit operation evaluateRulesDenyOverrides(set of (Rule))'(set of (Rule) ==> Effect)private explicit operation evaluateRulesPermitOverrides(set of (Rule))'(set of (Rule) ==> Effect)private explicit operation targetmatch(Target)'(Target ==> bool)end Evaluatorclass Teststatic private value requester'UnIdstatic private value resource'UnIdstatic private value Anne'Idstatic private value Bob'Idstatic private value Charlie'Idstatic private value Dave'Idstatic private value Eric'Idstatic private value Fred'Idstatic private value write'Idstatic private value read'Idstatic private value create'Idstatic private value signoff'Idstatic private value lab_results_signed'Idstatic private value results_analysis_signed'Idstatic private value Project1'set of (Subject)static private value Project2'set of (Subject)static private value lab_technician'set of (Subject)static private value lab_manager'set of (Subject)static private value Company2'set of (Subject)static private value Assessor'set of (Subject)static private value lab_results'Idstatic private value results_analysis'Idstatic private value sc_assess'Idstatic private value doc1'Idstatic private value doc2'Idstatic private value signed'Idstatic private value con_nt'FExpstatic private value con_nf'FExpstatic private value con_no'FExpstatic private value project1_rule_nf'Rulestatic private value project1_rule_nt'Rulestatic private value project1_rule_no'Rulestatic private value project1_rule2'Rulestatic private value lab_results_project_policy_no'Policystatic private value lab_results_project_policy_nt'Policystatic private value lab_results_project_policy_nf'Policystatic private value lab_results_rule1'Rulestatic private value lab_results_rule2'Rulestatic private value lab_results_creator_policy'Policystatic private value scale_assess_write'Rulestatic private value scale_assess_read'Rulestatic private value scale_assess_policy'Policystatic private value gold_policy_no'PDPstatic private value gold_policy_nt'PDPstatic private value gold_policy_nf'PDPstatic private value gold_policy_project_results'PDPstatic private value gold_policy_results_scale'PDPpublic explicit operation Run()'(() ==> Effect)end Testclass FExpprivate instance variable fexp'Exprpublic explicit operation FExp(Expr)'(Expr ==> FExp)public explicit operation GetExp()'(() ==> Expr)static public type AtomicVal'AtomicValstatic public type BoolArray'BoolArraystatic public type IntArray'IntArraystatic public type UnArray'UnArraystatic public type StructuredVal'StructuredValstatic public type Val'Valstatic public type Expr'Exprstatic public type Id'Idstatic public type UnId'UnIdstatic public type BoolExpr'BoolExprstatic public type RelExpr'RelExprstatic public type Unary'Unarystatic public type Infix'Infixstatic public type Equal'Equalstatic public type boolLiteral'boolLiteralstatic public type ArithExpr'ArithExprstatic public type intLiteral'intLiteralstatic public type ArrayLookup'ArrayLookuppublic explicit operation BindExpr(Expr, Request)'(Expr * Request ==> Expr)public explicit operation EvaluateBind(Request, Env)'(Request * Env ==> Val)private explicit operation Evaluate(Expr, Env)'(Expr * Env ==> Val)private explicit operation MId(Id, Env)'(Id * Env ==> Val)private explicit operation MRelExpr(RelExpr, Env)'(RelExpr * Env ==> Val)private explicit operation EvaluateLT(Expr, Expr, Env)'(Expr * Expr * Env ==> Val)private explicit operation EvaluateGT(Expr, Expr, Env)'(Expr * Expr * Env ==> Val)private explicit operation MUnary(Unary, Env)'(Unary * Env ==> Val)private explicit operation MInfix(Infix, Env)'(Infix * Env ==> Val)private explicit operation EvaluateAND(Expr, Expr, Env)'(Expr * Expr * Env ==> Val)private explicit operation MEqual(Equal, Env)'(Equal * Env ==> Val)private explicit operation EvaluateOR(Expr, Expr, Env)'(Expr * Expr * Env ==> Val)private explicit operation MArrayLookup(ArrayLookup, Env)'(ArrayLookup * Env ==> Val)private explicit function MLiteral((ArithExpr | boolLiteral))'((ArithExpr | boolLiteral) -> Val)static public type SType'STypestatic public type AType'ATypepublic explicit operation wfExpr(Env)'(Env ==> bool)private explicit operation exprTp(Expr, Env)'(Expr * Env ==> SType)private explicit operation wfInfix(Infix, Env)'(Infix * Env ==> SType)private explicit operation wfUnary(Unary, Env)'(Unary * Env ==> SType)private explicit operation wfRelExpr(RelExpr, Env)'(RelExpr * Env ==> SType)private explicit operation wfLiteral((ArithExpr | boolLiteral))'((ArithExpr | boolLiteral) ==> SType)private explicit operation wfEqual(Equal, Env)'(Equal * Env ==> SType)private explicit operation wfId(Id, Env)'(Id * Env ==> SType)private explicit operation wfUnId(UnId)'(UnId ==> SType)private explicit operation wfArrayLookup(ArrayLookup, Env)'(ArrayLookup * Env ==> SType)end FExpclass Envprivate instance variable senv'map (Id) to (SType)private instance variable denv'map (Id) to (Val)public explicit operation Env(map (Id) to (SType), map (Id) to (Val))'(map (Id) to (SType) * map (Id) to (Val) ==> Env)public explicit operation GetSenv()'(() ==> map (Id) to (SType))public explicit operation GetDenv()'(() ==> map (Id) to (Val))public explicit operation GetVal(Id)'(Id ==> Val)public explicit operation GetAVal(Id, Id)'(Id * Id ==> Val)public explicit operation GetSType(Id)'(Id ==> SType)public explicit operation GetSAType(Id)'(Id ==> AType)public explicit operation GetAType(Id, Id)'(Id * Id ==> SType)end Envclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IOclass Requestprivate instance variable subject'Subjectprivate instance variable resource'Resourceprivate instance variable actions'set of (Action)static private type Inst'Instpublic explicit operation Request(Subject, Resource, set of (Action))'(Subject * Resource * set of (Action) ==> Request)public explicit operation GetSubject()'(() ==> Subject)public explicit operation GetResource()'(() ==> Resource)public explicit operation GetActions()'(() ==> set of (Action))end Request
