RESULT:result:-1:-1,-1:Proof Obligation 1' (Unproved)plant' map sequence compatible obligation in 'Test1' (../../documentation/examples/VDM++/Alarm++traces/test1.vdmpp) at line 12'33forall m1, m2 in set {{p1 |-> {ex1, ex4}}, {p2 |-> {ex2, ex3}}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 2' (Trivial by <forall x in set s & x in set s>)PlantInv(set of (Alarm), map (Period) to (set of (Expert)))' map apply obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 15'30(forall as'set of (Alarm), sch'map (Period) to (set of (Expert)) &  (forall p in set (dom sch) &    p in set dom sch))Proof Obligation 3' (Trivial by <forall x in set s & x in set s>)PlantInv(set of (Alarm), map (Period) to (set of (Expert)))' map apply obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 18'29(forall as'set of (Alarm), sch'map (Period) to (set of (Expert)) &  ((forall p in set (dom sch) & (sch(p) <> {})) =>    (forall a in set as &      (forall p in set (dom sch) &        p in set dom sch))))Proof Obligation 4' (Unproved)ExpertToPage(Alarm, Period)' map apply obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 37'22(let expert'Expert = RESULT in  p in set dom schedule)Proof Obligation 5' (Unproved)ExpertToPage(Alarm, Period)' operation post condition obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 27'8let expert'Expert = RESULT in ((expert in set schedule(p)) and ((a.GetReqQuali)() in set (expert.GetQuali)()))Proof Obligation 6' (Unproved)ExpertToPage(Alarm, Period)' let be st existence obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 29'7exists expert in set schedule(p) & ((a.GetReqQuali)() in set (expert.GetQuali)())Proof Obligation 7' (Unproved)ExpertToPage(Alarm, Period)' map apply obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 29'21p in set dom scheduleProof Obligation 8' (Unproved)NumberOfExperts(Period)' map apply obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 42'15p in set dom scheduleProof Obligation 9' (Trivial by <forall x in set s & x in set s>)ExpertIsOnDuty(Expert)' map apply obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 48'25(forall p in set (dom schedule) &  p in set dom schedule)Proof Obligation 10' (Unproved)Plant(set of (Alarm), map (Period) to (set of (Expert)))' state invariant obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 50'8-- After Plant(set of (Alarm), map (Period) to (set of (Expert))) constructor bodyPlantInv(alarms, schedule)Proof Obligation 11' (Unproved)AddExpertToSchedule(Period, Expert)' state invariant obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 60'3-- After schedule(p) '= (if (p in set (dom schedule))then (schedule(p) union {ex})else {ex})PlantInv(alarms, schedule)Proof Obligation 12' (Trivial by <x in set s => x in set s>)AddExpertToSchedule(Period, Expert)' map apply obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 61'23((p in set (dom schedule)) =>  p in set dom schedule)Proof Obligation 13' (Unproved)RemoveExpertFromSchedule(Period, Expert), exs' map apply obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 67'13p in set dom scheduleProof Obligation 14' (Unproved)RemoveExpertFromSchedule(Period, Expert)' state invariant obligation in 'Plant' (../../documentation/examples/VDM++/Alarm++traces/plant.vdmpp) at line 69'5-- After schedule '= (if ((card exs) = 1)then ({p} <-' schedule)else (schedule ++ {p |-> (exs \ {ex})}))PlantInv(alarms, schedule)
