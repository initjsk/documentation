RESULT:result:-1:-1,-1:class WindTurbineprivate instance variable mHubController'HubControllerprivate instance variable mMainShaftController'MainShaftControllerprivate instance variable mOperatingPanel'OperatingPanelpublic explicit operation WindTurbine(seq of (TestData))'(seq of (TestData) ==> WindTurbine)public explicit operation Run()'(() ==> ())end WindTurbineclass MainShaftControllerstatic public value LOCK_LIMIT'RPMTypestatic public value MAX_RPM'RPMTypestatic public type RPMType'RPMTypeprivate instance variable mIsLocked'boolprivate instance variable mBrakeSeq'seq of (Brake)private invariant inv_MainShaftController'boolprivate instance variable mRPM'RPMTypeprivate instance variable mIsBrakeApplied'boolstatic private explicit function BrakeSeqInv(seq of (Brake))'(seq of (Brake) -> bool)public explicit operation MainShaftController()'(() ==> MainShaftController)public explicit operation CloseLock()'(() ==> ())public explicit operation OpenLock()'(() ==> ())public explicit operation IsLocked()'(() ==> bool)private explicit operation AddBrake(Brake)'(Brake ==> ())private explicit operation RemoveBrake(Brake)'(Brake ==> ())public explicit operation ApplyBrake()'(() ==> ())public explicit operation ReleaseBrake()'(() ==> ())public explicit operation IsBrakeApplied()'(() ==> bool)public explicit operation GetRPM()'(() ==> RPMType)public explicit operation Run()'(() ==> ())end MainShaftControllerclass Enviromentstatic public type TestData'TestDatastatic private explicit function CreateTestSeq(WindSpeedType, bool)'(WindSpeedType * bool -> seq of (TestData))static public explicit operation Run()'(() ==> ())end Enviromentclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IOclass Speakerprivate instance variable mAlarm'natpublic explicit operation StartAlarm()'(() ==> ())public explicit operation StopAlarm()'(() ==> ())public explicit operation IsActive()'(() ==> bool)public explicit operation Run()'(() ==> ())end Speakerclass Hubprivate instance variable mSpeaker'Speakerprivate instance variable mIsLocked'boolprivate instance variable mIsEStopPressed'boolpublic explicit operation Hub()'(() ==> Hub)public explicit operation Open()'(() ==> ())public explicit operation Close()'(() ==> ())public explicit operation IsOpen()'(() ==> bool)public explicit operation IsAlarmActive()'(() ==> bool)public explicit operation PressEStop()'(() ==> ())public explicit operation ReleaseEStop()'(() ==> ())public explicit operation IsEStopPressed()'(() ==> bool)public explicit operation Run()'(() ==> ())end Hubclass OperatingPanelstatic public type CmdType'CmdTypeprivate instance variable mCmdSeq'seq of (CmdType)private instance variable mHubController'HubControllerprivate instance variable mTime'natpublic explicit operation OperatingPanel(seq of (CmdType), HubController)'(seq of (CmdType) * HubController ==> OperatingPanel)private explicit operation EnterHubInSafeMode()'(() ==> ())private explicit operation LeaveHubInSafeMode()'(() ==> ())private explicit operation Print(nat1, seq of (char))'(nat1 * seq of (char) ==> ())public explicit operation RunCmdInterface()'(() ==> ())public explicit operation RunDisplayInterface()'(() ==> ())end OperatingPanelclass Modestatic protected instance variable mHubController'[HubController]static protected instance variable mEnterHubInSafeMode'boolstatic public explicit operation SetHubController(HubController)'(HubController ==> ())public explicit operation Run()'(() ==> ())public explicit operation EnterHubInSafeMode()'(() ==> ())public explicit operation LeaveHubInSafeMode()'(() ==> ())protected explicit operation ChangeMode(Mode)'(Mode ==> ())protected explicit operation OnEntry()'(() ==> ())protected explicit operation OnRun()'(() ==> ())protected explicit operation OnExit()'(() ==> ())static public explicit function StateChangeInv(Mode, Mode)'(Mode * Mode -> bool)static public explicit function HubInSafeModeInv(Mode, RPMType, bool, bool)'(Mode * RPMType * bool * bool -> bool)end Modeclass ModeEnterHubInSafeMode is subclass of Modestatic public value MAX_WINDSPEED'WindSpeedTypeprotected explicit operation OnRun()'(() ==> ())end ModeEnterHubInSafeModeclass ModeHubInSafeMode is subclass of Modeprotected explicit operation OnEntry()'(() ==> ())protected explicit operation OnRun()'(() ==> ())protected explicit operation OnExit()'(() ==> ())end ModeHubInSafeModeclass ModeLeaveHubInSafeMode is subclass of Modeprotected explicit operation OnRun()'(() ==> ())end ModeLeaveHubInSafeModeclass ModeOperational is subclass of Modeprotected explicit operation OnEntry()'(() ==> ())protected explicit operation OnRun()'(() ==> ())end ModeOperationalclass WindMeasurementControllerstatic public type WindSpeedType'WindSpeedTypestatic public value MAX_WIND'WindSpeedTypeprivate instance variable mWindSpeedSeq'seq of (WindSpeedType)static private instance variable mInstance'[WindMeasurementController]private explicit operation WindMeasurementController(seq of (WindSpeedType))'(seq of (WindSpeedType) ==> WindMeasurementController)static public explicit operation CreateInstance(seq of (WindSpeedType))'(seq of (WindSpeedType) ==> ())static public explicit operation GetInstance()'(() ==> WindMeasurementController)public explicit operation GetWindSpeed()'(() ==> WindSpeedType)public explicit operation IsFinished()'(() ==> bool)public explicit operation Run()'(() ==> ())end WindMeasurementControllerclass HubControllerprivate instance variable mHub'Hubprivate instance variable mMainShaftController'MainShaftControllerprivate instance variable mMode'Modeprivate invariant inv_HubController'boolprivate instance variable mEStopSeq'seq of (bool)public explicit operation HubController(seq of (bool), MainShaftController)'(seq of (bool) * MainShaftController ==> HubController)public explicit operation GetHub()'(() ==> Hub)public explicit operation GetMainShaftController()'(() ==> MainShaftController)public explicit operation SetMode(Mode)'(Mode ==> ())public explicit operation GetMode()'(() ==> Mode)public explicit operation Run()'(() ==> ())end HubControllerclass Brakeprivate instance variable mLowLimit'RPMTypeprivate instance variable mHighLimit'RPMTypepublic explicit operation Brake(RPMType, RPMType)'(RPMType * RPMType ==> Brake)public explicit operation GetLow()'(() ==> RPMType)public explicit operation GetHigh()'(() ==> RPMType)public explicit operation IsEqual(Brake)'(Brake ==> bool)public explicit operation ApplyBrake(RPMType)'(RPMType ==> RPMType)public explicit operation InterSect(Brake)'(Brake ==> bool)public explicit operation InRange(RPMType)'(RPMType ==> bool)end Brake
