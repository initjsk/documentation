class Brake
 instance variables
 mLowLimit : MainShaftController`RPMType;
 mHighLimit : MainShaftController`RPMType;
 
 operations
 public Brake : MainShaftController`RPMType * MainShaftController`RPMType ==> Brake
 Brake(low, high) ==
 (
  mLowLimit := low;
  mHighLimit := high
 )
 pre low < high;

 public GetLow : () ==> MainShaftController`RPMType
 GetLow() ==
  return mLowLimit;

 public GetHigh : () ==> MainShaftController`RPMType
 GetHigh() ==
  return mHighLimit;

 public IsEqual : Brake ==> bool
 IsEqual(brake) ==
  return GetLow() = brake.GetLow() and GetHigh() = brake.GetHigh();

 public ApplyBrake : MainShaftController`RPMType ==> 
                     MainShaftController`RPMType
 ApplyBrake(rpm) ==
  return if InRange(rpm) 
         then mLowLimit
         else rpm;

 public InterSect : Brake ==> bool
 InterSect(brake) ==
  return brake.InRange(mLowLimit) or brake.InRange(mHighLimit);
 
 public InRange : (MainShaftController`RPMType) ==> bool
 InRange(rpm) ==
  return rpm >= mLowLimit and rpm <= mHighLimit;

end Brake