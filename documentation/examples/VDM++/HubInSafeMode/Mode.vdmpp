class Mode
 instance variables
 protected static mHubController : [HubController] := nil;
 protected static mEnterHubInSafeMode : bool := false;

 operations
 public static SetHubController : HubController ==> ()
 SetHubController(hubController) ==
  mHubController := hubController;

 public Run : () ==> ()
 Run() ==
  OnRun();

 public EnterHubInSafeMode : () ==> ()
 EnterHubInSafeMode() ==
  mEnterHubInSafeMode := true;

 public LeaveHubInSafeMode : () ==> ()
 LeaveHubInSafeMode() ==
  mEnterHubInSafeMode := false;

 protected ChangeMode : Mode ==> ()
 ChangeMode(newMode) ==
 (OnExit();
  newMode.OnEntry();
  mHubController.SetMode(newMode);
 )
 pre Mode`StateChangeInv(mHubController.GetMode(), newMode) and 
     let mainShaftController = mHubController.GetMainShaftController(),
         hub = mHubController.GetHub()
     in
       Mode`HubInSafeModeInv(mHubController.GetMode(), 
                             mainShaftController.GetRPM(), 
                             mainShaftController.IsLocked(), hub.IsOpen());

 protected OnEntry : () ==> ()
 OnEntry() == skip;

 protected OnRun : () ==> ()
 OnRun() == is subclass responsibility;

 protected OnExit : () ==> ()
 OnExit() == skip;

 functions
 public static StateChangeInv : Mode * Mode -> bool
 StateChangeInv(oldMode, newMode) ==
  (isofclass(ModeOperational, oldMode) and isofclass(ModeEnterHubInSafeMode, newMode)) or
  (isofclass(ModeEnterHubInSafeMode, oldMode) and isofclass(ModeHubInSafeMode, newMode)) or
  (isofclass(ModeHubInSafeMode, oldMode) and isofclass(ModeLeaveHubInSafeMode, newMode)) or
  (isofclass(ModeLeaveHubInSafeMode, oldMode) and isofclass(ModeOperational, newMode)) or
  (isofclass(ModeLeaveHubInSafeMode, oldMode) and isofclass(ModeHubInSafeMode, newMode));

 public static HubInSafeModeInv : Mode * MainShaftController`RPMType * bool * bool -> bool
 HubInSafeModeInv(mode, rpm, isLocked, isOpen) ==
  --if hub in safe mode then RPM must be 0, mainshaft must be locked, hub door must be unlocked and open
  (isofclass(ModeHubInSafeMode, mode) and rpm = 0 and isLocked and isOpen) or
   --if not in hub in safe mode hub door must be closed and locked
  (not isofclass(ModeHubInSafeMode, mode) and not isOpen);
 
end Mode
class ModeEnterHubInSafeMode is subclass of Mode
 values
 static public MAX_WINDSPEED : WindMeasurementController`WindSpeedType = 15;

 operations
 protected OnRun : () ==> ()
 OnRun() ==
  let mainShaftController = mHubController.GetMainShaftController()
  in
  (
   if not mainShaftController.IsBrakeApplied() then
   (
    mainShaftController.ApplyBrake();
    mainShaftController.Run()
   );
   
   if not mainShaftController.IsLocked() and 
      mainShaftController.GetRPM() <= MainShaftController`LOCK_LIMIT 
   then (mainShaftController.CloseLock();
         ChangeMode(new ModeHubInSafeMode())
        )
  )

end ModeEnterHubInSafeMode

class ModeHubInSafeMode is subclass of Mode

 operations
 protected OnEntry : () ==> ()
 OnEntry() ==
  mHubController.GetHub().Open();

 protected OnRun : () ==> ()
 OnRun() ==
  if not mEnterHubInSafeMode then
   ChangeMode(new ModeLeaveHubInSafeMode());

 protected OnExit : () ==> ()
 OnExit() ==
  mHubController.GetHub().Close();

end ModeHubInSafeMode

class ModeLeaveHubInSafeMode is subclass of Mode
 operations
 protected OnRun : () ==> ()
 OnRun() ==
 let hub = mHubController.GetHub()
 in
  if hub.IsEStopPressed() then
  (
   IO`print("EStop\n");
   EnterHubInSafeMode();
   ChangeMode(new ModeHubInSafeMode())
  )
  else if not hub.IsAlarmActive() then
   ChangeMode(new ModeOperational());
 
end ModeLeaveHubInSafeMode

class ModeOperational is subclass of Mode

 operations
 protected OnEntry : () ==> ()
 OnEntry() ==
  let mainShaftController = mHubController.GetMainShaftController()
  in
  (
   mainShaftController.OpenLock();
   mainShaftController.ReleaseBrake();
   mainShaftController.Run()
  );

 protected OnRun : () ==> ()
 OnRun() ==
  if mEnterHubInSafeMode and 
     WindMeasurementController`GetInstance().GetWindSpeed() <= 
     ModeEnterHubInSafeMode`MAX_WINDSPEED 
  then ChangeMode(new ModeEnterHubInSafeMode())

end ModeOperational