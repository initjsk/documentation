WARNING:Radar.vdmpp:5000:106,27:Definition 'x' not used.
ERROR:VDMUtil.vdmpp:3426:1,0:Class VDMUtil duplicates VDMUtil.
ERROR:IO.vdmpp:3426:1,0:Class IO duplicates IO.
ERROR:MATH.vdmpp:3426:1,0:Class MATH duplicates MATH.
ERROR:IO.vdmpp:3426:1,0:Class IO duplicates IO.
ERROR:MATH.vdmpp:3426:1,0:Class MATH duplicates MATH.
ERROR:VDMUtil.vdmpp:3426:1,0:Class VDMUtil duplicates VDMUtil.
RESULT:result:-1:-1,-1:class GLOBALstatic public type Altitude'Altitudestatic public type FOId'FOIdstatic public type RadarId'RadarIdstatic public type Coordinates'Coordinatesstatic public type Time'Timestatic public type String'Stringstatic public type ObstacleType'ObstacleTypestatic public type FOWarning'FOWarningstatic public type RadarWarning'RadarWarningstatic public type MinimumSafetyAltitude'MinimumSafetyAltitudestatic public type Position'Positionstatic public type History'Historystatic public type Vector'Vectorprotected explicit function isPointInRange(Coordinates, nat1, Coordinates)'(Coordinates * nat1 * Coordinates -> bool)protected explicit function vectorSum(Vector, Vector)'(Vector * Vector -> Vector)protected explicit function vectorDiv(Vector, int)'(Vector * int -> Vector)protected explicit function addVectorToPoint(Vector, Position)'(Vector * Position -> Coordinates)protected explicit function vectorLength(Vector)'(Vector -> real)protected explicit function unitVector(Vector)'(Vector -> Vector)protected explicit function dotProduct(Vector, Vector)'(Vector * Vector -> real)protected explicit function angleBetweenVectors(Vector, Vector)'(Vector * Vector -> real)protected explicit function radians2degree(real)'(real -> real)protected explicit function atan2(real, real)'(real * real -> real)protected explicit function signedVectorAngle(Vector, Vector)'(Vector * Vector -> real)protected explicit function vectorAngle(Vector)'(Vector -> (real * real))protected explicit function vectorRotate(Vector, real)'(Vector * real -> Vector)protected explicit function round(real)'(real -> real)public explicit operation test(real, real, real, real)'(real * real * real * real ==> (Vector * Vector * real * real * Vector * real * real))end GLOBALclass MATHstatic public explicit function sin(real)'(real +> real)static public explicit function cos(real)'(real +> real)static public explicit function tan(real)'(real -> real)static public explicit function cot(real)'(real -> real)static public explicit function asin(real)'(real -> real)static public explicit function acos(real)'(real -> real)static public explicit function atan(real)'(real +> real)static public explicit function acot(real)'(real +> real)static public explicit function sqrt(real)'(real -> real)static public explicit function pi_f()'(() +> real)static public explicit operation srand(int)'(int ==> ())static public explicit operation rand(int)'(int ==> int)static public explicit operation srand2(int)'(int ==> int)static public explicit function exp(real)'(real +> real)static public explicit function ln(real)'(real -> real)static public explicit function log(real)'(real -> real)static public explicit function fac(nat)'(nat -> nat1)static public value pi'realend MATHclass Timerprivate instance variable currentTime'natstatic private value stepLength'natpublic explicit operation StepTime()'(() ==> ())public explicit operation GetTime()'(() ==> nat)end Timerclass Obstacle is subclass of GLOBALprivate instance variable MSA'MinimumSafetyAltitudeprivate instance variable location'Coordinatesprivate instance variable radius'nat1private instance variable securityRadius'natprivate instance variable type'ObstacleTypepublic explicit operation Obstacle(MinimumSafetyAltitude, Coordinates, nat, nat, ObstacleType)'(MinimumSafetyAltitude * Coordinates * nat * nat * ObstacleType ==> Obstacle)public explicit operation getType()'(() ==> ObstacleType)public explicit operation getCoordinates()'(() ==> Coordinates)public explicit operation getSecureRange()'(() ==> nat1)public explicit operation getMSA()'(() ==> MinimumSafetyAltitude)end Obstacleclass AirSpace is subclass of GLOBALprivate instance variable airspace'map (FOId) to (FO)public explicit operation addFO(FO)'(FO ==> ())public explicit operation removeFO(FOId)'(FOId ==> ())public explicit operation getFO(FOId)'(FOId ==> FO)public explicit operation getAirspace()'(() ==> set of (FO))public explicit operation updateFO(FOId, Coordinates, Altitude)'(FOId * Coordinates * Altitude ==> ())end AirSpaceclass Worldstatic public instance variable env'[Environment]static public instance variable timerRef'Timerpublic explicit operation World()'(() ==> World)public explicit operation Run()'(() ==> ())end Worldclass Environment is subclass of GLOBALstatic private type inline'inlinestatic private type FOOut'FOOutstatic private type RadarOut'RadarOutstatic protected type outline'outlineprivate instance variable io'IOprivate instance variable inlines'seq of (inline)private instance variable outlines'seq of (outline)private instance variable airspace'[AirSpace]private instance variable busy'boolpublic explicit operation Environment(String)'(String ==> Environment)public explicit operation setAirSpace(AirSpace)'(AirSpace ==> ())public explicit operation handleFOWarningEvent(FOId, Coordinates, Altitude, FOWarning, MinimumSafetyAltitude, Time)'(FOId * Coordinates * Altitude * FOWarning * MinimumSafetyAltitude * Time ==> ())public explicit operation handleRadarWarningEvent(Coordinates, nat1, RadarWarning, nat, Time)'(Coordinates * nat1 * RadarWarning * nat * Time ==> ())public explicit operation showResult()'(() ==> ())public explicit operation Run()'(() ==> ())private explicit operation updateFOs()'(() ==> ())public explicit operation isFinished()'(() ==> bool)end Environmentclass MATHstatic public explicit function sin(real)'(real +> real)static public explicit function cos(real)'(real +> real)static public explicit function tan(real)'(real -> real)static public explicit function cot(real)'(real -> real)static public explicit function asin(real)'(real -> real)static public explicit function acos(real)'(real -> real)static public explicit function atan(real)'(real +> real)static public explicit function acot(real)'(real +> real)static public explicit function sqrt(real)'(real -> real)static public explicit function pi_f()'(() +> real)static public explicit operation srand(int)'(int ==> ())static public explicit operation rand(int)'(int ==> int)static public explicit operation srand2(int)'(int ==> int)static public explicit function exp(real)'(real +> real)static public explicit function ln(real)'(real -> real)static public explicit function log(real)'(real -> real)static public explicit function fac(nat)'(nat -> nat1)static public value pi'realend MATHclass VDMUtilstatic public explicit function set2seq(set of (@T))'(set of (@T) +> seq of (@T))static public explicit function get_file_pos()'(() +> [(seq of (char) * nat * nat * seq of (char) * seq of (char))])static public explicit function val2seq_of_char(@T)'(@T +> seq of (char))static public explicit function seq_of_char2val(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))static public explicit function classname(@T)'(@T -> [seq1 of (char)])end VDMUtilclass VDMUtilstatic public explicit function set2seq(set of (@T))'(set of (@T) +> seq of (@T))static public explicit function get_file_pos()'(() +> [(seq of (char) * nat * nat * seq of (char) * seq of (char))])static public explicit function val2seq_of_char(@T)'(@T +> seq of (char))static public explicit function seq_of_char2val(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))static public explicit function classname(@T)'(@T -> [seq1 of (char)])end VDMUtilclass FO is subclass of GLOBALprivate instance variable id'FOIdprivate instance variable coord'Coordinatesprivate instance variable alt'Altitudepublic explicit operation FO(FOId, Coordinates, Altitude)'(FOId * Coordinates * Altitude ==> FO)public explicit operation getId()'(() ==> FOId)public explicit operation getCoordinates()'(() ==> Coordinates)public explicit operation setCoordinates(Coordinates)'(Coordinates ==> ())public explicit operation getAltitude()'(() ==> Altitude)public explicit operation setAltitude(Altitude)'(Altitude ==> ())public explicit operation getPosition()'(() ==> Position)end FOclass MSAW is subclass of GLOBALstatic public instance variable atc'AirTrafficControllerstatic public instance variable radar1'Radarstatic public instance variable radar2'Radarstatic public instance variable airspace'AirSpacestatic public instance variable militaryZone'Obstacleend MSAWclass UseATCstatic private value id'tokenstatic private value fo'FOstatic private value c1'Coordinatesstatic private value c2'Coordinatesprivate instance variable atc'AirTrafficControllerpublic trace '(() ==> ())end UseATCclass dk_au_eng_Radarpublic explicit operation AddFlyingObject(int, int, int, seq of (char))'(int * int * int * seq of (char) ==> ())public explicit operation RemFlyingObject(seq of (char))'(seq of (char) ==> ())public explicit operation StepRadar()'(() ==> ())public explicit operation UpdateFlyingObject(seq of (char), int, int)'(seq of (char) * int * int ==> ())public explicit operation SetStepSize(int)'(int ==> ())public explicit operation SetScanWidth(int)'(int ==> ())public explicit operation SetScanTime(int)'(int ==> ())public explicit operation SetWindowPosition(int, int)'(int * int ==> ())public explicit operation SetTitle(seq of (char))'(seq of (char) ==> ())public explicit operation SetScanAngle(int)'(int ==> ())static public explicit operation TestRadar()'(() ==> int)end dk_au_eng_Radarclass AirTrafficController is subclass of GLOBALprivate instance variable radars'set of (Radar)private instance variable obstacles'set of (Obstacle)private instance variable history'map (FOId) to (seq of (Position))public explicit operation getDirectionVectors(FOId)'(FOId ==> seq of (Vector))public explicit operation getAltitudeHistory(FOId)'(FOId ==> seq of (nat))public explicit operation updateHistory()'(() ==> ())private explicit operation registerHistory(FO)'(FO ==> ())public explicit operation cleanUpHistory()'(() ==> ())private explicit function addHistory(History, Coordinates, Altitude)'(History * Coordinates * Altitude -> History)public explicit operation addRadar(Radar)'(Radar ==> ())public explicit operation addObstacle(Obstacle)'(Obstacle ==> ())public explicit operation findThreats()'(() ==> ())public explicit operation detectedByTwoRadars(set of (Radar))'(set of (Radar) ==> set of (FO))public explicit operation detectedByAllRadars(set of (Radar))'(set of (Radar) ==> set of (FO))public explicit operation Step()'(() ==> ())private explicit function isFOatSafeAltitude(MinimumSafetyAltitude, Position)'(MinimumSafetyAltitude * Position -> bool)private explicit operation isFOSafe(Obstacle, Position)'(Obstacle * Position ==> bool)private explicit operation willFObeSafe(Obstacle, FO)'(Obstacle * FO ==> ())private explicit operation writeObjectWarning(Obstacle, FO)'(Obstacle * FO ==> ())private explicit operation writeRadarWarning(Radar)'(Radar ==> ())private explicit operation isPredictPossible(FO)'(FO ==> [set of (Position)])private explicit operation predictPosition(FO)'(FO ==> set of (Position))private explicit function calculateNeighborhood(Position)'(Position -> set of (Position))private explicit function predictAltitude(seq of (nat))'(seq of (nat) -> nat)end AirTrafficControllerclass Radar is subclass of GLOBALprivate instance variable location'Coordinatesprivate instance variable range'nat1private instance variable detected'map (FOId) to (FO)private instance variable priority'seq of (FO)private instance variable radarDisplay'dk_au_eng_Radarstatic private instance variable rc'intpublic explicit operation Radar(int, int, nat1)'(int * int * nat1 ==> Radar)public explicit operation Scan(AirSpace)'(AirSpace ==> ())private explicit operation InRange(FO)'(FO ==> bool)public explicit operation getDetected()'(() ==> set of (FO))public explicit operation getDetectedMap()'(() ==> map (FOId) to (FO))public explicit operation saturatedRadar()'(() ==> bool)public explicit operation getSaturatingFOs()'(() ==> set of (FOId))public explicit operation getLocation()'(() ==> Coordinates)public explicit operation getRange()'(() ==> nat1)private explicit operation UpdatePriorityList()'(() ==> ())private explicit operation removeNotDetected(set of (FO))'(set of (FO) ==> ())private explicit operation addNewlyDetected(set of (FO))'(set of (FO) ==> ())private explicit operation setupRadar(dk_au_eng_Radar)'(dk_au_eng_Radar ==> ())private explicit operation DisplayScan()'(() ==> ())private explicit function set2seqFO(set of (FO))'(set of (FO) -> seq of (FO))private explicit function set2seqFOm(set of (FO))'(set of (FO) -> nat)end Radarclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IOclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IO
