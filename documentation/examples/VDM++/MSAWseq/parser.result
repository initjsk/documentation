RESULT:result:-1:-1,-1:class IOstatic public type filedirective'filedirectivestatic public explicit function writeval'(@p -> bool)static public explicit function fwriteval'(seq1 of (char) * @p * (unresolved IO`filedirective) -> bool)static public explicit function freadval'(seq1 of (char) -> (bool * [@p]))public explicit operation echo'(seq of (char) ==> bool)public explicit operation fecho'(seq of (char) * seq of (char) * [(unresolved IO`filedirective)] ==> bool)public explicit operation ferror'(() ==> seq of (char))static public explicit operation print'(? ==> ())static public explicit operation println'(? ==> ())static public explicit operation printf'(seq of (char) * seq of (?) ==> ())end IOclass Radar is subclass of GLOBALprivate instance variable location'(unresolved Radar`Coordinates)private instance variable range'nat1private instance variable detected'map ((unresolved Radar`FOId)) to ((unresolved Radar`FO))private instance variable priority'seq of ((unresolved Radar`FO))private instance variable radarDisplay'(unresolved Radar`dk_au_eng_Radar)static private instance variable rc'intpublic explicit operation Radar'(int * int * nat1 ==> (unresolved Radar`Radar))public explicit operation Scan'((unresolved Radar`AirSpace) ==> ())private explicit operation InRange'((unresolved Radar`FO) ==> bool)public explicit operation getDetected'(() ==> set of ((unresolved Radar`FO)))public explicit operation getDetectedMap'(() ==> map ((unresolved Radar`FOId)) to ((unresolved Radar`FO)))public explicit operation saturatedRadar'(() ==> bool)public explicit operation getSaturatingFOs'(() ==> set of ((unresolved Radar`FOId)))public explicit operation getLocation'(() ==> (unresolved Radar`Coordinates))public explicit operation getRange'(() ==> nat1)private explicit operation UpdatePriorityList'(() ==> ())private explicit operation removeNotDetected'(set of ((unresolved Radar`FO)) ==> ())private explicit operation addNewlyDetected'(set of ((unresolved Radar`FO)) ==> ())private explicit operation setupRadar'((unresolved Radar`dk_au_eng_Radar) ==> ())private explicit operation DisplayScan'(() ==> ())private explicit function set2seqFO'(set of ((unresolved Radar`FO)) -> seq of ((unresolved Radar`FO)))private explicit function set2seqFOm'(set of ((unresolved Radar`FO)) -> nat)end Radarclass UseATCstatic private value id'tokenstatic private value fo'(unresolved UseATC`FO)static private value c1'(unresolved GLOBAL`Coordinates)static private value c2'(unresolved GLOBAL`Coordinates)private instance variable atc'(unresolved UseATC`AirTrafficController)public trace '(() ==> ())end UseATCclass GLOBALstatic public type Altitude'Altitudestatic public type FOId'FOIdstatic public type RadarId'RadarIdstatic public type Coordinates'Coordinatesstatic public type Time'Timestatic public type String'Stringstatic public type ObstacleType'ObstacleTypestatic public type FOWarning'FOWarningstatic public type RadarWarning'RadarWarningstatic public type MinimumSafetyAltitude'MinimumSafetyAltitudestatic public type Position'Positionstatic public type History'Historystatic public type Vector'Vectorprotected explicit function isPointInRange'((unresolved GLOBAL`Coordinates) * nat1 * (unresolved GLOBAL`Coordinates) -> bool)protected explicit function vectorSum'((unresolved GLOBAL`Vector) * (unresolved GLOBAL`Vector) -> (unresolved GLOBAL`Vector))protected explicit function vectorDiv'((unresolved GLOBAL`Vector) * int -> (unresolved GLOBAL`Vector))protected explicit function addVectorToPoint'((unresolved GLOBAL`Vector) * (unresolved GLOBAL`Position) -> (unresolved GLOBAL`Coordinates))protected explicit function vectorLength'((unresolved GLOBAL`Vector) -> real)protected explicit function unitVector'((unresolved GLOBAL`Vector) -> (unresolved GLOBAL`Vector))protected explicit function dotProduct'((unresolved GLOBAL`Vector) * (unresolved GLOBAL`Vector) -> real)protected explicit function angleBetweenVectors'((unresolved GLOBAL`Vector) * (unresolved GLOBAL`Vector) -> real)protected explicit function radians2degree'(real -> real)protected explicit function atan2'(real * real -> real)protected explicit function signedVectorAngle'((unresolved GLOBAL`Vector) * (unresolved GLOBAL`Vector) -> real)protected explicit function vectorAngle'((unresolved GLOBAL`Vector) -> (real * real))protected explicit function vectorRotate'((unresolved GLOBAL`Vector) * real -> (unresolved GLOBAL`Vector))protected explicit function round'(real -> real)public explicit operation test'(real * real * real * real ==> ((unresolved GLOBAL`Vector) * (unresolved GLOBAL`Vector) * real * real * (unresolved GLOBAL`Vector) * real * real))end GLOBALclass dk_au_eng_Radarpublic explicit operation AddFlyingObject'(int * int * int * seq of (char) ==> ())public explicit operation RemFlyingObject'(seq of (char) ==> ())public explicit operation StepRadar'(() ==> ())public explicit operation UpdateFlyingObject'(seq of (char) * int * int ==> ())public explicit operation SetStepSize'(int ==> ())public explicit operation SetScanWidth'(int ==> ())public explicit operation SetScanTime'(int ==> ())public explicit operation SetWindowPosition'(int * int ==> ())public explicit operation SetTitle'(seq of (char) ==> ())public explicit operation SetScanAngle'(int ==> ())static public explicit operation TestRadar'(() ==> int)end dk_au_eng_Radarclass AirTrafficController is subclass of GLOBALprivate instance variable radars'set of ((unresolved AirTrafficController`Radar))private instance variable obstacles'set of ((unresolved AirTrafficController`Obstacle))private instance variable history'map ((unresolved AirTrafficController`FOId)) to ((seq of ((unresolved AirTrafficController`Position))))public explicit operation getDirectionVectors'((unresolved AirTrafficController`FOId) ==> seq of ((unresolved AirTrafficController`Vector)))public explicit operation getAltitudeHistory'((unresolved AirTrafficController`FOId) ==> seq of (nat))public explicit operation updateHistory'(() ==> ())private explicit operation registerHistory'((unresolved AirTrafficController`FO) ==> ())public explicit operation cleanUpHistory'(() ==> ())private explicit function addHistory'((unresolved AirTrafficController`History) * (unresolved AirTrafficController`Coordinates) * (unresolved AirTrafficController`Altitude) -> (unresolved AirTrafficController`History))public explicit operation addRadar'((unresolved AirTrafficController`Radar) ==> ())public explicit operation addObstacle'((unresolved AirTrafficController`Obstacle) ==> ())public explicit operation findThreats'(() ==> ())public explicit operation detectedByTwoRadars'(set of ((unresolved AirTrafficController`Radar)) ==> set of ((unresolved AirTrafficController`FO)))public explicit operation detectedByAllRadars'(set of ((unresolved AirTrafficController`Radar)) ==> set of ((unresolved AirTrafficController`FO)))public explicit operation Step'(() ==> ())private explicit function isFOatSafeAltitude'((unresolved AirTrafficController`MinimumSafetyAltitude) * (unresolved AirTrafficController`Position) -> bool)private explicit operation isFOSafe'((unresolved AirTrafficController`Obstacle) * (unresolved AirTrafficController`Position) ==> bool)private explicit operation willFObeSafe'((unresolved AirTrafficController`Obstacle) * (unresolved AirTrafficController`FO) ==> ())private explicit operation writeObjectWarning'((unresolved AirTrafficController`Obstacle) * (unresolved AirTrafficController`FO) ==> ())private explicit operation writeRadarWarning'((unresolved AirTrafficController`Radar) ==> ())private explicit operation isPredictPossible'((unresolved AirTrafficController`FO) ==> [set of ((unresolved AirTrafficController`Position))])private explicit operation predictPosition'((unresolved AirTrafficController`FO) ==> set of ((unresolved AirTrafficController`Position)))private explicit function calculateNeighborhood'((unresolved AirTrafficController`Position) -> set of ((unresolved AirTrafficController`Position)))private explicit function predictAltitude'(seq of (nat) -> nat)end AirTrafficControllerclass Obstacle is subclass of GLOBALprivate instance variable MSA'(unresolved Obstacle`MinimumSafetyAltitude)private instance variable location'(unresolved Obstacle`Coordinates)private instance variable radius'nat1private instance variable securityRadius'natprivate instance variable type'(unresolved Obstacle`ObstacleType)public explicit operation Obstacle'((unresolved Obstacle`MinimumSafetyAltitude) * (unresolved Obstacle`Coordinates) * nat * nat * (unresolved Obstacle`ObstacleType) ==> (unresolved Obstacle`Obstacle))public explicit operation getType'(() ==> (unresolved Obstacle`ObstacleType))public explicit operation getCoordinates'(() ==> (unresolved Obstacle`Coordinates))public explicit operation getSecureRange'(() ==> nat1)public explicit operation getMSA'(() ==> (unresolved Obstacle`MinimumSafetyAltitude))end Obstacleclass Worldstatic public instance variable env'[(unresolved World`Environment)]static public instance variable timerRef'(unresolved World`Timer)public explicit operation World'(() ==> (unresolved World`World))public explicit operation Run'(() ==> ())end Worldclass AirSpace is subclass of GLOBALprivate instance variable airspace'map ((unresolved AirSpace`FOId)) to ((unresolved AirSpace`FO))public explicit operation addFO'((unresolved AirSpace`FO) ==> ())public explicit operation removeFO'((unresolved AirSpace`FOId) ==> ())public explicit operation getFO'((unresolved AirSpace`FOId) ==> (unresolved AirSpace`FO))public explicit operation getAirspace'(() ==> set of ((unresolved AirSpace`FO)))public explicit operation updateFO'((unresolved AirSpace`FOId) * (unresolved AirSpace`Coordinates) * (unresolved AirSpace`Altitude) ==> ())end AirSpaceclass FO is subclass of GLOBALprivate instance variable id'(unresolved FO`FOId)private instance variable coord'(unresolved FO`Coordinates)private instance variable alt'(unresolved FO`Altitude)public explicit operation FO'((unresolved FO`FOId) * (unresolved FO`Coordinates) * (unresolved FO`Altitude) ==> (unresolved FO`FO))public explicit operation getId'(() ==> (unresolved FO`FOId))public explicit operation getCoordinates'(() ==> (unresolved FO`Coordinates))public explicit operation setCoordinates'((unresolved FO`Coordinates) ==> ())public explicit operation getAltitude'(() ==> (unresolved FO`Altitude))public explicit operation setAltitude'((unresolved FO`Altitude) ==> ())public explicit operation getPosition'(() ==> (unresolved FO`Position))end FOclass MSAW is subclass of GLOBALstatic public instance variable atc'(unresolved MSAW`AirTrafficController)static public instance variable radar1'(unresolved MSAW`Radar)static public instance variable radar2'(unresolved MSAW`Radar)static public instance variable airspace'(unresolved MSAW`AirSpace)static public instance variable militaryZone'(unresolved MSAW`Obstacle)end MSAWclass Environment is subclass of GLOBALstatic private type inline'inlinestatic private type FOOut'FOOutstatic private type RadarOut'RadarOutstatic protected type outline'outlineprivate instance variable io'(unresolved Environment`IO)private instance variable inlines'seq of ((unresolved Environment`inline))private instance variable outlines'seq of ((unresolved Environment`outline))private instance variable airspace'[(unresolved Environment`AirSpace)]private instance variable busy'boolpublic explicit operation Environment'((unresolved Environment`String) ==> (unresolved Environment`Environment))public explicit operation setAirSpace'((unresolved Environment`AirSpace) ==> ())public explicit operation handleFOWarningEvent'((unresolved Environment`FOId) * (unresolved Environment`Coordinates) * (unresolved Environment`Altitude) * (unresolved Environment`FOWarning) * (unresolved Environment`MinimumSafetyAltitude) * (unresolved Environment`Time) ==> ())public explicit operation handleRadarWarningEvent'((unresolved Environment`Coordinates) * nat1 * (unresolved Environment`RadarWarning) * nat * (unresolved Environment`Time) ==> ())public explicit operation showResult'(() ==> ())public explicit operation Run'(() ==> ())private explicit operation updateFOs'(() ==> ())public explicit operation isFinished'(() ==> bool)end Environmentclass MATHstatic public explicit function sin'(real +> real)static public explicit function cos'(real +> real)static public explicit function tan'(real -> real)static public explicit function cot'(real -> real)static public explicit function asin'(real -> real)static public explicit function acos'(real -> real)static public explicit function atan'(real +> real)static public explicit function acot'(real +> real)static public explicit function sqrt'(real -> real)static public explicit function pi_f'(() +> real)static public explicit operation srand'(int ==> ())static public explicit operation rand'(int ==> int)static public explicit operation srand2'(int ==> int)static public explicit function exp'(real +> real)static public explicit function ln'(real -> real)static public explicit function log'(real -> real)static public explicit function fac'(nat -> nat1)static public value pi'?end MATHclass Timerprivate instance variable currentTime'natstatic private value stepLength'natpublic explicit operation StepTime'(() ==> ())public explicit operation GetTime'(() ==> nat)end Timer
