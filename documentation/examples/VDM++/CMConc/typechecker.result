WARNING:flaredispenser.vdmpp:5001:36,8:Instance variable 'eventid' is not initialized.
RESULT:result:-1:-1,-1:class Sensor is subclass of GLOBALprivate instance variable detector'MissileDetectorprivate instance variable aperture'Anglepublic explicit operation Sensor(MissileDetector, Angle)'(MissileDetector * Angle ==> Sensor)public explicit operation getAperture()'(() ==> (Angle * Angle))public explicit operation trip(EventId, MissileType, Angle)'(EventId * MissileType * Angle ==> ())end Sensorclass MissileDetector is subclass of GLOBALprivate instance variable ranges'map (nat) to ((Angle * Angle))private instance variable controllers'map (nat) to (FlareController)private invariant inv_MissileDetector'boolprivate instance variable threats'seq of ((EventId * MissileType * Angle * Time))private instance variable busy'boolpublic explicit operation addController(FlareController)'(FlareController ==> ())public explicit operation addThreat(EventId, MissileType, Angle, Time)'(EventId * MissileType * Angle * Time ==> ())private explicit operation getThreat()'(() ==> (EventId * MissileType * Angle * Time))public explicit operation isFinished()'(() ==> ())private explicit operation processSensor()'(() ==> ())private mutex predicate '?private permission predicate 'boolprivate permission predicate 'boolprotected thread thread'?end MissileDetectorclass GLOBALstatic public value SENSOR_APERTURE'nat1static public value FLARE_APERTURE'nat1static public value DISPENSER_APERTURE'nat1static public type MissileType'MissileTypestatic public type FlareType'FlareTypestatic public type Angle'Anglestatic public type EventId'EventIdstatic public type Time'Timepublic explicit operation canObserve(Angle, Angle, Angle)'(Angle * Angle * Angle ==> bool)public explicit operation getAperture()'(() ==> (Angle * Angle))end GLOBALclass Worldstatic public instance variable env'[Environment]static public instance variable timerRef'TimeStamppublic explicit operation World()'(() ==> World)public explicit operation Run()'(() ==> ())end Worldclass FlareController is subclass of GLOBALprivate instance variable aperture'Angleprivate instance variable ranges'map (nat) to ((Angle * Angle))private instance variable dispensers'map (nat) to (FlareDispenser)private invariant inv_FlareController'boolprivate instance variable threats'seq of ((EventId * MissileType * Angle * Time))private instance variable busy'boolpublic explicit operation FlareController(Angle)'(Angle ==> FlareController)public explicit operation addDispenser(FlareDispenser)'(FlareDispenser ==> ())public explicit operation getAperture()'(() ==> (Angle * Angle))public explicit operation addThreat(EventId, MissileType, Angle, Time)'(EventId * MissileType * Angle * Time ==> ())private explicit operation getThreat()'(() ==> (EventId * MissileType * Angle * Time))public explicit operation isFinished()'(() ==> ())private explicit operation processThreat()'(() ==> ())private mutex predicate '?private permission predicate 'boolprivate permission predicate 'boolprotected thread thread'?end FlareControllerclass TimeStampstatic public value stepLength'natprivate instance variable currentTime'natprivate instance variable wakeUpMap'map (nat) to ([nat])private instance variable barrierCount'nat1public explicit operation TimeStamp(nat1)'(nat1 ==> TimeStamp)public explicit operation WaitRelative(nat)'(nat ==> ())public explicit operation WaitAbsolute(nat)'(nat ==> ())private explicit operation BarrierReached()'(() ==> ())private explicit operation AddToWakeUpMap(nat, [nat])'(nat * [nat] ==> ())public explicit operation NotifyThread(nat)'(nat ==> ())public explicit operation GetTime()'(() ==> nat)private explicit operation Awake()'(() ==> ())public explicit operation ThreadDone()'(() ==> ())private permission predicate 'boolprivate mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?end TimeStampclass FlareDispenser is subclass of GLOBALstatic private value responseDB'map (MissileType) to (Plan)static private value missilePriority'map (MissileType) to (nat)static public type Plan'Planstatic public type PlanStep'PlanSteppublic instance variable curplan'Planprivate instance variable curprio'natprivate instance variable busy'boolprivate instance variable aperture'Angleprivate instance variable eventid'[EventId]public explicit operation FlareDispenser(Angle)'(Angle ==> FlareDispenser)public explicit operation GetAngle()'(() ==> nat)public explicit operation addThreat(EventId, MissileType, Time)'(EventId * MissileType * Time ==> ())private explicit operation evalQueue()'(() ==> ())private explicit operation releaseFlare(EventId, FlareType, Time, Time)'(EventId * FlareType * Time * Time ==> ())public explicit operation isFinished()'(() ==> ())private mutex predicate '?private permission predicate 'boolprotected thread thread'?end FlareDispenserclass CMstatic public instance variable detector'MissileDetectorstatic public instance variable sensor0'Sensorstatic public instance variable sensor1'Sensorstatic public instance variable sensor2'Sensorstatic public instance variable sensor3'Sensorstatic public instance variable controller0'FlareControllerstatic public instance variable controller1'FlareControllerstatic public instance variable controller2'FlareControllerstatic public instance variable dispenser0'FlareDispenserstatic public instance variable dispenser1'FlareDispenserstatic public instance variable dispenser2'FlareDispenserstatic public instance variable dispenser3'FlareDispenserstatic public instance variable dispenser4'FlareDispenserstatic public instance variable dispenser5'FlareDispenserstatic public instance variable dispenser6'FlareDispenserstatic public instance variable dispenser7'FlareDispenserstatic public instance variable dispenser8'FlareDispenserstatic public instance variable dispenser9'FlareDispenserstatic public instance variable dispenser10'FlareDispenserstatic public instance variable dispenser11'FlareDispenserend CMclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IOclass Environment is subclass of GLOBALstatic public type InputTP'InputTPstatic public type inline'inlinestatic public type outline'outlineprivate instance variable io'IOprivate instance variable inlines'seq of (inline)private instance variable outlines'seq of (outline)private instance variable ranges'map (nat) to ((Angle * Angle))private instance variable sensors'map (nat) to (Sensor)private invariant inv_Environment'boolprivate instance variable busy'boolprivate instance variable simtime'Timepublic explicit operation Environment(seq of (char))'(seq of (char) ==> Environment)public explicit operation addSensor(Sensor)'(Sensor ==> ())private explicit operation createSignal()'(() ==> ())public explicit operation handleEvent(EventId, FlareType, Angle, Time, Time)'(EventId * FlareType * Angle * Time * Time ==> ())public explicit operation showResult()'(() ==> ())public explicit operation isFinished()'(() ==> ())private mutex predicate '?private mutex predicate '?private permission predicate 'boolprotected thread thread'?end Environment
