\begin{vdm_al}
class Timer

instance variables

currentTime  : nat   := 0;
finished     : bool  := false;
subscribers  : set of nat := {};
users        : set of nat := {}

operations

public Finished : () ==> ()
Finished() == finished := true;

sync

  mutex(StepTime, GetTime);
  per StepTime => subscribers = users

operations

public Subscribe: nat ==> ()
Subscribe(tid) ==
  subscribers := subscribers union {tid};

public UnSubscribe: nat ==> ()
UnSubscribe(tid) ==
  subscribers := subscribers \ {tid};

public StepTime : () ==> ()
StepTime() ==
  (users := {};
   currentTime := currentTime + stepLength);

public GetTime : [nat] ==> nat
GetTime(tid) ==
  (if tid <> nil
   then users := users union {tid};
   return currentTime);

values

  stepLength : nat = 100;

end Timer
\end{vdm_al}

\begin{rtinfo}[Timer`StepTime]
{vdm.tc}[Timer]
\end{rtinfo}