RESULT:result:-1:-1,-1:class Treestatic public type tree'treestatic public type node'nodeprotected instance variable root'(unresolved Tree`tree)protected explicit operation nodes'(() ==> set of ((unresolved Tree`node)))protected explicit operation addRoot'(int ==> ())protected explicit operation rootval'(() ==> int)protected explicit operation gettree'(() ==> (unresolved Tree`tree))protected explicit operation leftBranch'(() ==> (unresolved Tree`Tree))protected explicit operation rightBranch'(() ==> (unresolved Tree`Tree))public explicit operation isEmpty'(() ==> bool)public explicit operation breadth_first_search'(() ==> seq of (int))public explicit operation depth_first_search'(() ==> seq of (int))public explicit operation inorder'(() ==> seq of (int))end Treeclass AVLTree is subclass of Treeprivate explicit function tree_isAVLTree'((unresolved AVLTree`tree) -> bool)end AVLTreeclass UseTreeprivate instance variable t1'(unresolved UseTree`BinarySearchTree)private instance variable t2'(unresolved UseTree`Tree)public trace '(() ==> ())end UseTreeclass Queueprivate instance variable vals'seq of ((unresolved Tree`node))public explicit operation Enqueue'((unresolved Tree`node) ==> ())public explicit operation Dequeue'(() ==> (unresolved Tree`node))public explicit operation isEmpty'(() ==> bool)end Queueclass BinarySearchTree is subclass of Treepublic explicit function isBst'((unresolved Tree`tree) -> bool)private explicit operation BinarySearchTree_inv'(() ==> bool)public explicit operation Insert'(int ==> ())end BinarySearchTreeclass BalancedBST is subclass of BinarySearchTreestatic private value v'?end BalancedBST
