class Real

values
	Rcsid = "$Id: Real.vpp,v 1.1 2005/10/31 02:15:42 vdmtools Exp $";
	Tolerance = 1e-8;
	Variation = 1e-5;	

functions

static public EQ : real -> real -> bool
EQ(r1)( r2) == abs(r1 - r2) < Tolerance;

static public numberOfDigit : real -> nat
numberOfDigit(x) ==
	let	i = floor(x)	in
	if x = i then
		aNumberOfIntegerPartDigit(i)
	else
		aNumberOfIntegerPartDigit(i) + 1 + getNumberOfDigitsAfterTheDecimalPoint(x);

static public aNumberOfIntegerPartDigit : int -> nat
aNumberOfIntegerPartDigit(i) == aNumberOfIntegerPartDigitAux(i, 1);

static public aNumberOfIntegerPartDigitAux : int * nat -> nat
aNumberOfIntegerPartDigitAux(i, a桁数) ==
	let	q = i div 10 in
	cases q:
		0		-> a桁数,
		others	-> Real`aNumberOfIntegerPartDigitAux(q, a桁数 + 1)
	end
measure idiv10;

static idiv10 : int * nat +> nat
idiv10(i, -) == i div 10;

static public isNDigitsAfterTheDecimalPoint : real * nat -> bool
isNDigitsAfterTheDecimalPoint(x,a桁数) == 
	getNumberOfDigitsAfterTheDecimalPoint(x) = a桁数;

static public getNumberOfDigitsAfterTheDecimalPoint : real -> nat
getNumberOfDigitsAfterTheDecimalPoint(x) == getNumberOfDigitsAfterTheDecimalPointAux(x,0);

static getNumberOfDigitsAfterTheDecimalPointAux : real * nat -> nat
getNumberOfDigitsAfterTheDecimalPointAux(x,a桁数) ==
	if x = floor(x) then
		a桁数
	else
		getNumberOfDigitsAfterTheDecimalPointAux(x * 10, a桁数 + 1)
	measure getNumberOfDigitsAfterTheDecimalPointAuxMeasure;

static getNumberOfDigitsAfterTheDecimalPointAuxMeasure : real * nat +> nat
getNumberOfDigitsAfterTheDecimalPointAuxMeasure(x, -) == floor(x) - x;

static public roundAterDecimalPointByNdigit : real * nat -> real
roundAterDecimalPointByNdigit(r, a桁数) ==
	let	倍数 = 10 ** a桁数
	in
	floor(r * 倍数  + 0.5) / 倍数
pre
	r >= 0;

static public 導関数 : (real -> real) ->real -> real
導関数(f)(x) == (f(x+Variation) - f(x)) / Variation ;

--方程式の解法のニュートン法
static public ニュートン法で方程式を解く: (real ->real) -> real -> real
ニュートン法で方程式を解く(f)(x) ==
	let	終了条件 = lambda y : real &  abs(f(y)) < Tolerance,
		次の近似 = lambda y : real & y - (f(y) / 導関数(f)(y))	in
	new Function().Funtil[real](終了条件)(次の近似)(x);
	
-- 台形公式でintegrate値を求める。Toleranceは大きいし、まだ十分テストしていない。
-- 区間[a,...,b]をn等分した刻み幅hで、関数f(x)をintegrateする。
static public integrate : (real -> real)  -> nat1 -> real -> real -> real
integrate(f)(n)(a)(b) == 
	let	
		h = (b - a) / n,
		s = seqGenerate(n, a, h)
	in
	h * (f(a) / 2 + Sequence`Sum[real](Sequence`fmap[real, real](f)(s)) + f(b) / 2);

operations
static private seqGenerate : nat1 * real * real  ==> seq of real
seqGenerate(n, a, h) == 
	(	
		dcl s : seq of real := [];
		for i = 1 to n do
		s := s ^ [a + i * h];
	return s
	);

functions
--平方根を求める。（ニュートン法のテストのため）
static public root: real -> real
root(x) ==
	let	f = lambda y : real & y ** 2 - x	in
	ニュートン法で方程式を解く(f)(x);

static public 元利合計倍数を得る : real * int -> real
元利合計倍数を得る(利子,year) == (1 + 利子) ** year
pre
	利子 >= 0 and year > 0;

static getInterest陰仕様_数学版 : real * int -> real
getInterest陰仕様_数学版(倍数,year) == is not yet specified
pre
	倍数 > 1.0 and year > 0 
post
	倍数 > 1.0 and year > 0 and
	exists1 利子 : real &
		let 元利合計 = 元利合計倍数を得る(利子,year)
		in 倍数 = 元利合計  and RESULT = 利子;
		
static getInterest陰仕様_計算機版 : real * int -> real
getInterest陰仕様_計算機版 (倍数,year数) ==
	is not yet specified
pre
	倍数 > 1.0 and year数 > 0 
post
	倍数 > 1.0 and year数 > 0 and
	exists1 利子 : real & 
		let	元利合計 = 元利合計倍数を得る(利子,year数)
		in	EQ(倍数)(元利合計) and RESULT = 利子;

--getInterest陽仕様（ニュートン法を利用、関数プログラミング使用）
static public getInterest: real * int -> real
getInterest(倍数,year数) ==
	let	f = lambda 利子 : real & 倍数 - 元利合計倍数を得る(利子,year数)	in
	ニュートン法で方程式を解く(f)(0);
	
end Real