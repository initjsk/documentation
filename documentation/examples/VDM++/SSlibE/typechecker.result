WARNING:Sequence.vdmpp:5012:244,26:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:171,24:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:197,27:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:221,20:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:217,23:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:229,20:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:309,19:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:308,20:Recursive function has no measure.
WARNING:Function.vdmpp:5012:18,18:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:237,23:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:445,19:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:92,24:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:318,20:Recursive function has no measure.
WARNING:Hashtable.vdmpp:5012:170,24:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:185,24:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:62,18:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:329,23:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:107,20:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:76,19:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:146,27:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:254,24:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:234,24:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:163,23:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:256,16:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:185,24:Recursive function has no measure.
WARNING:Function.vdmpp:5012:13,21:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:339,26:Recursive function has no measure.
WARNING:Function.vdmpp:5012:8,21:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:41,18:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:160,23:Recursive function has no measure.
WARNING:Set.vdmpp:5012:35,14:Recursive function has no measure.
WARNING:FHashtable.vdmpp:5012:34,24:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:127,23:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:119,23:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:51,21:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:174,23:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:207,28:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:268,19:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:196,19:Recursive function has no measure.
WARNING:StringT.vdmpp:5000:279,19:Definition 'err' not used.
WARNING:FSequence.vdmpp:5012:367,23:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:100,19:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:130,24:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:407,27:Recursive function has no measure.
WARNING:Sequence.vdmpp:5012:153,28:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:426,20:Recursive function has no measure.
WARNING:FSequence.vdmpp:5012:148,20:Recursive function has no measure.
ERROR:Term.vdmpp:3302:13,23:State variable 'startTime' cannot be accessed from this context.
ERROR:Term.vdmpp:3302:14,21:State variable 'endTime' cannot be accessed from this context.
ERROR:Term.vdmpp:3302:14,46:State variable 'endTime' cannot be accessed from this context.
ERROR:Term.vdmpp:3302:18,77:State variable 'endTime' cannot be accessed from this context.
ERROR:Term.vdmpp:3302:18,58:State variable 'endTime' cannot be accessed from this context.
ERROR:Term.vdmpp:3302:13,50:State variable 'startTime' cannot be accessed from this context.
ERROR:Term.vdmpp:3302:18,40:State variable 'startTime' cannot be accessed from this context.
ERROR:Term.vdmpp:3302:18,19:State variable 'startTime' cannot be accessed from this context.
RESULT:result:-1:-1,-1:class String is subclass of Sequencestatic public explicit function asInteger(seq of (char))'(seq of (char) -> int)static private explicit function AsIntegerAux(seq of (char))'(seq of (char) -> (int -> int))static private explicit function length([seq of (char)])'([seq of (char)] +> nat)static public explicit function isDigits(seq of (char))'(seq of (char) -> bool)static public explicit function isSpace([seq of (char)])'([seq of (char)] -> bool)static public explicit function LT(seq of (char), seq of (char))'(seq of (char) * seq of (char) -> bool)static public explicit function LT2(seq of (char))'(seq of (char) -> (seq of (char) -> bool))static public explicit function LE(seq of (char), seq of (char))'(seq of (char) * seq of (char) -> bool)static public explicit function LE2(seq of (char))'(seq of (char) -> (seq of (char) -> bool))static public explicit function GT(seq of (char), seq of (char))'(seq of (char) * seq of (char) -> bool)static public explicit function GT2(seq of (char))'(seq of (char) -> (seq of (char) -> bool))static public explicit function GE(seq of (char), seq of (char))'(seq of (char) * seq of (char) -> bool)static public explicit function GE2(seq of (char))'(seq of (char) -> (seq of (char) -> bool))static public explicit function Index(char)'(char -> (seq of (char) -> int))static public explicit function indexAll(seq of (char), char)'(seq of (char) * char -> set of (int))static public explicit function IndexAll2(char)'(char -> (seq of (char) -> set of (int)))static public explicit function isInclude(seq of (char))'(seq of (char) -> (seq of (char) -> bool))static public explicit function subStr(seq1 of (char), nat, nat)'(seq1 of (char) * nat * nat -> seq of (char))static public explicit function SubStr(nat)'(nat -> (nat -> (seq1 of (char) -> seq of (char))))static public explicit operation index(seq of (char), char)'(seq of (char) * char ==> int)static public explicit operation subStrFill(seq of (char), nat, nat, char)'(seq of (char) * nat * nat * char ==> seq of (char))end Stringclass TestCasepublic instance variable TestName'seq of (char)public explicit operation TestACase()'(() ==> bool)public explicit operation getTestName()'(() ==> seq of (char))protected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end TestCaseclass Mapstatic public explicit function Get(map (@T1) to (@T2))'(map (@T1) to (@T2) -> (@T1 -> [@T2]))static public explicit function Contains(map (@T1) to (@T2))'(map (@T1) to (@T2) -> (@T2 -> bool))static public explicit function ContainsKey(map (@T1) to (@T2))'(map (@T1) to (@T2) -> (@T1 -> bool))end Mapclass ProductT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end ProductTclass ProductT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end ProductT01class FSequencestatic public explicit function Sum(seq of (@T))'(seq of (@T) -> @T)static public explicit function Prod(seq of (@T))'(seq of (@T) -> @T)static public explicit function Plus(@T)'(@T -> (@T -> @T))static public explicit function Product(@T)'(@T -> (@T -> @T))static public explicit function Append(seq of (@T))'(seq of (@T) -> (@T -> seq of (@T)))static public explicit function Average(seq of (@T))'(seq of (@T) -> [real])static private explicit function AverageAux(@T)'(@T -> (@T -> (seq of (@T) -> real)))static public explicit function IsAscendingInTotalOrder((@T * @T -> bool))'((@T * @T -> bool) -> (seq of (@T) -> bool))static public explicit function IsDescendingInTotalOrder((@T * @T -> bool))'((@T * @T -> bool) -> (seq of (@T) -> bool))static public explicit function IsAscending(seq of (@T))'(seq of (@T) -> bool)static public explicit function IsDescending(seq of (@T))'(seq of (@T) -> bool)static public explicit function Sort((@T * @T -> bool))'((@T * @T -> bool) -> (seq of (@T) -> seq of (@T)))static public explicit function AscendingSort(seq of (@T))'(seq of (@T) -> seq of (@T))static public explicit function DescendingSort(seq of (@T))'(seq of (@T) -> seq of (@T))static public explicit function IsOrdered(seq of ((@T * @T -> bool)))'(seq of ((@T * @T -> bool)) -> (seq of (@T) -> (seq of (@T) -> bool)))static public explicit function Merge((@T * @T -> bool))'((@T * @T -> bool) -> (seq of (@T) -> (seq of (@T) -> seq of (@T))))static public explicit function InsertAt(nat1)'(nat1 -> (@T -> (seq of (@T) -> seq of (@T))))static public explicit function RemoveAt(nat1)'(nat1 -> (seq of (@T) -> seq of (@T)))static public explicit function RemoveDup(seq of (@T))'(seq of (@T) -> seq of (@T))static public explicit function RemoveMember(@T)'(@T -> (seq of (@T) -> seq of (@T)))static public explicit function RemoveMembers(seq of (@T))'(seq of (@T) -> (seq of (@T) -> seq of (@T)))static public explicit function UpdateAt(nat1)'(nat1 -> (@T -> (seq of (@T) -> seq of (@T))))static public explicit function Take(int)'(int -> (seq of (@T) -> seq of (@T)))static public explicit function TakeWhile((@T -> bool))'((@T -> bool) -> (seq of (@T) -> seq of (@T)))static public explicit function Drop(int)'(int -> (seq of (@T) -> seq of (@T)))static public explicit function DropWhile((@T -> bool))'((@T -> bool) -> (seq of (@T) -> seq of (@T)))static public explicit function Span((@T -> bool))'((@T -> bool) -> (seq of (@T) -> (seq of (@T) * seq of (@T))))static public explicit function SubSeq(nat)'(nat -> (nat -> (seq1 of (@T) -> seq of (@T))))static public explicit function Last(seq of (@T))'(seq of (@T) -> @T)static public explicit function Fmap((@T1 -> @T2))'((@T1 -> @T2) -> (seq of (@T1) -> seq of (@T2)))static public explicit function Filter((@T -> bool))'((@T -> bool) -> (seq of (@T) -> seq of (@T)))static public explicit function Foldl((@T1 -> (@T2 -> @T1)))'((@T1 -> (@T2 -> @T1)) -> (@T1 -> (seq of (@T2) -> @T1)))static public explicit function Foldr((@T1 -> (@T2 -> @T2)))'((@T1 -> (@T2 -> @T2)) -> (@T2 -> (seq of (@T1) -> @T2)))static public explicit function IsMember(@T)'(@T -> (seq of (@T) -> bool))static public explicit function IsAnyMember(seq of (@T))'(seq of (@T) -> (seq of (@T) -> bool))static public explicit function IsDup(seq of (@T))'(seq of (@T) -> bool)static public explicit function Index(@T)'(@T -> (seq of (@T) -> int))static public explicit function IndexAux(@T)'(@T -> (seq of (@T) -> (int -> int)))static public explicit function IndexAll(@T)'(@T -> (seq of (@T) -> set of (nat1)))static public explicit function Flatten(seq of (seq of (@T)))'(seq of (seq of (@T)) -> seq of (@T))static public explicit function Compact(seq of ([@T]))'(seq of ([@T]) -> seq of (@T))static public explicit function Freverse(seq of (@T))'(seq of (@T) -> seq of (@T))static public explicit function Permutations(seq of (@T))'(seq of (@T) -> set of (seq of (@T)))static public explicit function IsPermutations(seq of (@T))'(seq of (@T) -> (seq of (@T) -> bool))static public explicit function Unzip(seq of ((@T1 * @T2)))'(seq of ((@T1 * @T2)) -> (seq of (@T1) * seq of (@T2)))static public explicit function Zip(seq of (@T1), seq of (@T2))'(seq of (@T1) * seq of (@T2) -> seq of ((@T1 * @T2)))static public explicit function Zip2(seq of (@T1))'(seq of (@T1) -> (seq of (@T2) -> seq of ((@T1 * @T2))))end FSequenceclass MapT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end MapTclass MapT01 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end MapT01class MapT02 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end MapT02class Sequencestatic public explicit function Sum(seq of (@T))'(seq of (@T) -> @T)static private explicit function SumAux(seq of (@T))'(seq of (@T) -> (@T -> @T))static private explicit function sumLength(seq of (@T))'(seq of (@T) +> nat)static public explicit function Product(seq of (@T))'(seq of (@T) -> @T)static private explicit function ProductAux(@T)'(@T -> (seq of (@T) -> @T))static public explicit function GetAverage(seq of (@T))'(seq of (@T) -> [real])static private explicit function GetAverageAux(@T)'(@T -> (@T -> (seq of (@T) -> real)))static public explicit function isAscendingTotalOrder((@T * @T -> bool))'((@T * @T -> bool) -> (seq of (@T) -> bool))static public explicit function isDescendingTotalOrder((@T * @T -> bool))'((@T * @T -> bool) -> (seq of (@T) -> bool))static public explicit function isAscendingOrder(seq of (@T))'(seq of (@T) -> bool)static public explicit function isDescendingOrder(seq of (@T))'(seq of (@T) -> bool)static public explicit function sort((@T * @T -> bool))'((@T * @T -> bool) -> (seq of (@T) -> seq of (@T)))static public explicit function ascendingOrderSort(seq of (@T))'(seq of (@T) -> seq of (@T))static public explicit function descendingOrderSort(seq of (@T))'(seq of (@T) -> seq of (@T))static public explicit function isOrdered(seq of ((@T * @T -> bool)))'(seq of ((@T * @T -> bool)) -> (seq of (@T) -> (seq of (@T) -> bool)))static public explicit function Merge((@T * @T -> bool))'((@T * @T -> bool) -> (seq of (@T) -> (seq of (@T) -> seq of (@T))))static public explicit function InsertAt(nat1)'(nat1 -> (@T -> (seq of (@T) -> seq of (@T))))static public explicit function RemoveAt(nat1)'(nat1 -> (seq of (@T) -> seq of (@T)))static public explicit function RemoveDup(seq of (@T))'(seq of (@T) -> seq of (@T))static private explicit function length(seq of (@T))'(seq of (@T) +> nat)static public explicit function RemoveMember(@T)'(@T -> (seq of (@T) -> seq of (@T)))static public explicit function RemoveMembers(seq of (@T))'(seq of (@T) -> (seq of (@T) -> seq of (@T)))static public explicit function UpdateAt(nat1)'(nat1 -> (@T -> (seq of (@T) -> seq of (@T))))static public explicit function take(int)'(int -> (seq of (@T) -> seq of (@T)))static public explicit function TakeWhile((@T -> bool))'((@T -> bool) -> (seq of (@T) -> seq of (@T)))static public explicit function drop(int)'(int -> (seq of (@T) -> seq of (@T)))static public explicit function DropWhile((@T -> bool))'((@T -> bool) -> (seq of (@T) -> seq of (@T)))static public explicit function Span((@T -> bool))'((@T -> bool) -> (seq of (@T) -> (seq of (@T) * seq of (@T))))static public explicit function SubSeq(nat)'(nat -> (nat -> (seq1 of (@T) -> seq of (@T))))static public explicit function last(seq of (@T))'(seq of (@T) -> @T)static public explicit function fmap((@T1 -> @T2))'((@T1 -> @T2) -> (seq of (@T1) -> seq of (@T2)))static public explicit function filter((@T -> bool))'((@T -> bool) -> (seq of (@T) -> seq of (@T)))static public explicit function Foldl((@T1 -> (@T2 -> @T1)))'((@T1 -> (@T2 -> @T1)) -> (@T1 -> (seq of (@T2) -> @T1)))static public explicit function Foldr((@T1 -> (@T2 -> @T2)))'((@T1 -> (@T2 -> @T2)) -> (@T2 -> (seq of (@T1) -> @T2)))static public explicit function isMember(@T)'(@T -> (seq of (@T) -> bool))static public explicit function isAnyMember(seq of (@T))'(seq of (@T) -> (seq of (@T) -> bool))static public explicit function Index(@T)'(@T -> (seq of (@T) -> int))static private explicit function IndexAux(@T)'(@T -> (seq of (@T) -> (int -> int)))static public explicit function IndexAll2(@T)'(@T -> (seq of (@T) -> set of (int)))static public explicit function flatten(seq of (seq of (@T)))'(seq of (seq of (@T)) -> seq of (@T))static public explicit function compact(seq of ([@T]))'(seq of ([@T]) -> seq of (@T))static public explicit function freverse(seq of (@T))'(seq of (@T) -> seq of (@T))static public explicit function Permutations(seq of (@T))'(seq of (@T) -> set of (seq of (@T)))static public explicit function RestSeq(seq of (@T), nat)'(seq of (@T) * nat -> seq of (@T))static public explicit function Unzip(seq of ((@T1 * @T2)))'(seq of ((@T1 * @T2)) -> (seq of (@T1) * seq of (@T2)))static private explicit function lengthUnzip(seq of ((@T1 * @T2)))'(seq of ((@T1 * @T2)) +> nat)static public explicit function Zip(seq of (@T1), seq of (@T2))'(seq of (@T1) * seq of (@T2) -> seq of ((@T1 * @T2)))static public explicit function Zip2(seq of (@T1))'(seq of (@T1) -> (seq of (@T2) -> seq of ((@T1 * @T2))))end Sequenceclass JapaneseCalendar is subclass of Calendarstatic public value differenceBetweenGMTandJST'realstatic public value differenceBetweenADandJapaneseCal'nat1static private explicit function toStringAux(int)'(int -> seq of (char))static public explicit function getJapaneseDateStr(Date)'(Date -> seq of (char))public explicit operation setTheSetOfDayOffs(int)'(int ==> ())public explicit operation JapaneseCalendar()'(() ==> JapaneseCalendar)public explicit operation getWeekdayBetweenDayOff(set of (Date))'(set of (Date) ==> set of (Date))public explicit function getNotNationalHolidaysInFuture(set of (Date), Date)'(set of (Date) * Date -> Date)private explicit function getNotNationalHolidaysInFutureMeasure(set of (Date), Date)'(set of (Date) * Date +> nat)end JapaneseCalendarclass TimeT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end TimeTclass TimeT01 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end TimeT01class TimeT02 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end TimeT02class TimeT03 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end TimeT03class TimeT04 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end TimeT04class TimeT05 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end TimeT05class TimeT06 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end TimeT06class StringObj is subclass of CommonDefinitionpublic instance variable content'seq of (char)public explicit function hashCode()'(() -> int)public explicit function equals(Object)'(Object -> bool)public explicit operation StringObj(seq of (char))'(seq of (char) ==> StringObj)public explicit operation getContent()'(() ==> [seq of (char)])end StringObjclass IntObj is subclass of CommonDefinitionpublic instance variable content'intpublic explicit function hashCode()'(() -> int)public explicit function equals(Object)'(Object -> bool)public explicit operation IntObj(int)'(int ==> IntObj)public explicit operation getContent()'(() ==> [int])end IntObjclass HashtableT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end HashtableTclass HashtableT01 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT01class HashtableT02 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT02class HashtableT03 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT03class HashtableT04 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT04class HashtableT05 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT05class HashtableT06 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT06class HashtableT07 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT07class HashtableT52 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT52class HashtableT53 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT53class HashtableT54 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT54class HashtableT55 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT55class HashtableT56 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT56class HashtableT57 is subclass of TestCase, CommonDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end HashtableT57class DoubleListQueuestatic public explicit function empty()'(() -> (seq of (@T) * seq of (@T)))static public explicit function isEmpty((seq of (@T) * seq of (@T)))'((seq of (@T) * seq of (@T)) -> bool)static public explicit function enQueue(@T, (seq of (@T) * seq of (@T)))'(@T * (seq of (@T) * seq of (@T)) -> (seq of (@T) * seq of (@T)))static public explicit function deQueue((seq of (@T) * seq of (@T)))'((seq of (@T) * seq of (@T)) -> [(seq of (@T) * seq of (@T))])static public explicit function top((seq of (@T) * seq of (@T)))'((seq of (@T) * seq of (@T)) -> [@T])static public explicit function fromList(seq of (@T), (seq of (@T) * seq of (@T)))'(seq of (@T) * (seq of (@T) * seq of (@T)) -> (seq of (@T) * seq of (@T)))static private explicit function fromListMeasure(seq of (@T), (seq of (@T) * seq of (@T)))'(seq of (@T) * (seq of (@T) * seq of (@T)) +> nat)static public explicit function toList((seq of (@T) * seq of (@T)))'((seq of (@T) * seq of (@T)) -> seq of (@T))static private explicit function toListMeasure((seq of (@T) * seq of (@T)))'((seq of (@T) * seq of (@T)) +> nat)end DoubleListQueueclass FHashtablestatic public explicit function Put(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (@T1 -> (@T2 -> map (@T1) to (map (@T1) to (@T2))))))static public explicit function PutAll(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (map (@T1) to (@T2) -> map (@T1) to (map (@T1) to (@T2)))))static public explicit function PutAllAux(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (map (@T1) to (@T2) -> (set of (@T1) -> map (@T1) to (map (@T1) to (@T2))))))static public explicit function Get(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (@T1 -> [@T2])))static public explicit function Remove(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (@T1 -> map (@T1) to (map (@T1) to (@T2)))))static public explicit function Clear()'(() -> map (@T1) to (map (@T1) to (@T2)))static public explicit function KeySet(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> set of (@T1))static public explicit function ValueSet(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> set of (@T2))static public explicit function Size(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> nat)static public explicit function IsEmpty(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> bool)static public explicit function Contains(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> (@T2 -> bool))static public explicit function ContainsKey(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> (@T1 -> bool))end FHashtableclass FMapstatic public explicit function Get(map (@T1) to (@T2))'(map (@T1) to (@T2) -> (@T1 -> [@T2]))static public explicit function Contains(map (@T1) to (@T2))'(map (@T1) to (@T2) -> (@T2 -> bool))static public explicit function ContainsKey(map (@T1) to (@T2))'(map (@T1) to (@T2) -> (@T1 -> bool))end FMapclass SetT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end SetTclass SetT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SetT01class SetT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SetT02class SetT03 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SetT03class SetT04 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SetT04class UniqueNumber is subclass of CommonDefinitionstatic private value defaultValue'nat1protected instance variable UniqNum'intpublic explicit function getUniqNum(int, nat1)'(int * nat1 -> int)public explicit operation getUniqNumStr(int)'(int ==> seq of (char))public explicit operation initialize()'(() ==> int)end UniqueNumberclass NumberT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end NumberTclass NumberT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end NumberT01class NumberT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end NumberT02class NumberT03 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end NumberT03class DateT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end DateTclass DateT01 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end DateT01class DateT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end DateT02class DateT03 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end DateT03class DateT04 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end DateT04class DateT05 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end DateT05class DateT06 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end DateT06class DateT07 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end DateT07class Characterstatic private value EnglishChars'seq1 of (char)static public explicit function asDigit(char)'(char -> (bool | int))static public explicit function asDictOrder(char)'(char -> int)static public explicit function isDigit(char)'(char -> bool)static public explicit function LT(char, char)'(char * char -> bool)static public explicit function LT2(char)'(char -> (char -> bool))static public explicit function LE(char, char)'(char * char -> bool)static public explicit function LE2(char)'(char -> (char -> bool))static public explicit function GT(char, char)'(char * char -> bool)static public explicit function GT2(char)'(char -> (char -> bool))static public explicit function GE(char, char)'(char * char -> bool)static public explicit function GE2(char)'(char -> (char -> bool))end Characterclass FHashtableTstatic public explicit function run()'(() +> bool)static private explicit function t1()'(() -> TestCase)static private explicit function t2()'(() -> TestCase)static private explicit function t3()'(() -> TestCase)static private explicit function t4()'(() -> TestCase)static private explicit function t5()'(() -> TestCase)static private explicit function t6()'(() -> TestCase)end FHashtableTclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IOclass FTestDriverstatic public type TestCase'TestCasestatic public explicit function run(seq of (TestCase))'(seq of (TestCase) +> bool)static public explicit function isOK(TestCase)'(TestCase +> bool)static public explicit function GetTestResult(TestCase)'(TestCase +> bool)static public explicit function GetTestName(TestCase)'(TestCase +> seq of (char))end FTestDriverclass TestDriverprivate explicit function tests()'(() -> seq of (TestCase))public explicit function isOK(TestCase)'(TestCase -> bool)public explicit operation run()'(() ==> bool)end TestDriverclass Realstatic private value Rcsid'seq1 of (char)static private value Tolerance'realstatic private value Variation'realstatic public explicit function EQ(real)'(real -> (real -> bool))static public explicit function numberOfDigit(real)'(real -> nat)static public explicit function aNumberOfIntegerPartDigit(int)'(int -> nat)static public explicit function aNumberOfIntegerPartDigitAux(int, nat)'(int * nat -> nat)static private explicit function idiv10(int, nat)'(int * nat +> nat)static public explicit function isNDigitsAfterTheDecimalPoint(real, nat)'(real * nat -> bool)static public explicit function getNumberOfDigitsAfterTheDecimalPoint(real)'(real -> nat)static private explicit function getNumberOfDigitsAfterTheDecimalPointAux(real, nat)'(real * nat -> nat)static private explicit function getNumberOfDigitsAfterTheDecimalPointAuxMeasure(real, nat)'(real * nat +> nat)static public explicit function roundAterDecimalPointByNdigit(real, nat)'(real * nat -> real)static public explicit function 導関数((real -> real))'((real -> real) -> (real -> real))static public explicit function ニュートン法で方程式を解く((real -> real))'((real -> real) -> (real -> real))static public explicit function integrate((real -> real))'((real -> real) -> (nat1 -> (real -> (real -> real))))static private explicit operation seqGenerate(nat1, real, real)'(nat1 * real * real ==> seq of (real))static public explicit function root(real)'(real -> real)static public explicit function 元利合計倍数を得る(real, int)'(real * int -> real)static private explicit function getInterest陰仕様_数学版(real, int)'(real * int -> real)static private explicit function getInterest陰仕様_計算機版(real, int)'(real * int -> real)static public explicit function getInterest(real, int)'(real * int -> real)end Realclass Functionstatic public explicit function Funtil((@T -> bool))'((@T -> bool) -> ((@T -> @T) -> (@T -> @T)))static public explicit function Fwhile((@T -> bool))'((@T -> bool) -> ((@T -> @T) -> (@T -> @T)))static public explicit function Seq(seq of ((@T -> @T)))'(seq of ((@T -> @T)) -> (@T -> @T))static public explicit function readFn(seq of (char))'(seq of (char) -> [@T])end Functionclass Termstatic private value Rcsid'seq1 of (char)private instance variable startTime'[Time]private instance variable endTime'[Time]static public explicit function isInThePeriod(Time, Term)'(Time * Term -> bool)public explicit function EQ(Term)'(Term -> bool)public explicit operation Term([Time], [Time])'([Time] * [Time] ==> Term)end Termclass Objectpublic explicit function hashCode()'(() -> int)public explicit function equals(Object)'(Object -> bool)public explicit operation getContent()'(() ==> [(int | seq of (char))])end Objectclass MATHstatic public explicit function sin(real)'(real +> real)static public explicit function cos(real)'(real +> real)static public explicit function tan(real)'(real -> real)static public explicit function cot(real)'(real -> real)static public explicit function asin(real)'(real -> real)static public explicit function acos(real)'(real -> real)static public explicit function atan(real)'(real +> real)static public explicit function acot(real)'(real +> real)static public explicit function sqrt(real)'(real -> real)static public explicit function pi_f()'(() +> real)static public explicit operation srand(int)'(int ==> ())static public explicit operation rand(int)'(int ==> int)static public explicit operation srand2(int)'(int ==> int)static public explicit function exp(real)'(real +> real)static public explicit function ln(real)'(real -> real)static public explicit function log(real)'(real -> real)static public value pi'realend MATHclass Time is subclass of CalendarDefinitionstatic public value hoursPerDay'nat1static public value minutesPerHour'nat1static public value secondsPerMinute'nat1static public value ミリ'nat1static public value milliSecondsPerDay'nat1static public value milliSecondsPerHour'nat1static private value io'IOstatic public type TimeInMilliSeconds'TimeInMilliSecondsprivate instance variable sDate'Dateprivate instance variable sTime'TimeInMilliSecondspublic explicit operation Time(Calendar, int, int, int, nat, nat, nat, nat)'(Calendar * int * int * int * nat * nat * nat * nat ==> Time)public explicit operation Time(Calendar, int, int, int)'(Calendar * int * int * int ==> Time)public explicit operation Time(Date)'(Date ==> Time)public explicit operation Time(Calendar)'(Calendar ==> Time)public explicit operation Time(seq of (char), seq of (char), Calendar)'(seq of (char) * seq of (char) * Calendar ==> Time)public explicit operation readCurrentDateTime(seq of (char), seq of (char), Calendar)'(seq of (char) * seq of (char) * Calendar ==> [Time])public explicit operation getDate()'(() ==> Date)public explicit operation setDate(Date)'(Date ==> ())public explicit operation getTime()'(() ==> TimeInMilliSeconds)public explicit operation setTime(TimeInMilliSeconds)'(TimeInMilliSeconds ==> ())public explicit operation hour()'(() ==> nat)public explicit operation setTimeFromNat(nat)'(nat ==> ())public explicit operation minute()'(() ==> nat)public explicit operation setMinuteFromNat(nat)'(nat ==> ())public explicit operation second()'(() ==> nat)public explicit operation setSecond(nat)'(nat ==> ())public explicit operation milliSecond()'(() ==> nat)public explicit operation setMilliSecond(nat)'(nat ==> ())public explicit function calendar()'(() -> Calendar)public explicit function Year()'(() -> int)public explicit function Month()'(() -> int)public explicit function day()'(() -> int)public explicit function getTimeAsNat()'(() -> nat)public explicit function LT(Time)'(Time -> bool)public explicit function GT(Time)'(Time -> bool)public explicit function LE(Time)'(Time -> bool)public explicit function GE(Time)'(Time -> bool)public explicit function EQ(Time)'(Time -> bool)public explicit function NE(Time)'(Time -> bool)public explicit function IntProduct2TimeMillieSeconds(int, int, int, int)'(int * int * int * int -> int)public explicit function Time2IntProduct(TimeInMilliSeconds)'(TimeInMilliSeconds -> (nat * nat * nat * nat))public explicit operation asString()'(() ==> seq of (char))public explicit operation print()'(() ==> seq of (char))public explicit operation plusmilliSecond(int)'(int ==> Time)public explicit operation plussecond(int)'(int ==> Time)public explicit operation plusminute(int)'(int ==> Time)public explicit operation plushour(int)'(int ==> Time)public explicit operation plus(int, int, int, int)'(int * int * int * int ==> Time)public explicit operation minusmilliSecond(int)'(int ==> Time)public explicit operation minus(int, int, int, int)'(int * int * int * int ==> Time)end Timeclass CommonDefinition is subclass of Objectstatic public value StringOrder'(seq of (char) * seq of (char) -> bool)static public value NumericOrder'(NumericalValue * NumericalValue -> bool)static public value DateOrder'(Date * Date -> bool)static public value AmountOfMoneyOrder'(AmountOfMoney * AmountOfMoney -> bool)static public type Identifier'Identifierstatic public type Quantity'Quantitystatic public type NumericalValue'NumericalValuestatic public type Percent'Percentstatic public type AmountOfMoney'AmountOfMoneystatic public type NonNegativeAmountOfMoney'NonNegativeAmountOfMoneystatic public type PositiveAmountOfMoney'PositiveAmountOfMoneystatic public type AmountOfMoney2'AmountOfMoney2end CommonDefinitionclass SequenceT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end SequenceTclass SequenceT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT01class SequenceT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT02class SequenceT03 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT03class SequenceT04 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT04class SequenceT05 is subclass of TestCasestatic public type TestType'TestTypestatic public type RecordType'RecordTypepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT05class SequenceT06 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT06class SequenceT07 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT07class SequenceT08 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT08class SequenceT09 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT09class SequenceT10 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT10class SequenceT11 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT11class SequenceT12 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT12class SequenceT13 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT13class SequenceT14 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT14class SequenceT15 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT15class SequenceT16 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT16class SequenceT17 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT17class SequenceT18 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT18class SequenceT19 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT19class SequenceT20 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT20class SequenceT21 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT21class SequenceT22 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT22class SequenceT23 is subclass of TestCasepublic explicit function plus(int)'(int -> (int -> int))public explicit function product(int)'(int -> (int -> int))public explicit function append(seq of (char))'(seq of (char) -> (char -> seq of (char)))public explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT23class SequenceT24 is subclass of TestCasepublic explicit function plus(int)'(int -> (int -> int))public explicit function product(int)'(int -> (int -> int))public explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SequenceT24class TestLoggerstatic private value hisotoryFileName'seq1 of (char)public explicit function Succeeded(TestCase)'(TestCase -> bool)public explicit function Failed(TestCase)'(TestCase -> bool)public explicit function succeededInAllTestcases(seq of (char))'(seq of (char) -> bool)public explicit function notSucceededInAllTestcases(seq of (char))'(seq of (char) -> bool)end TestLoggerclass IntegerT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end IntegerTclass IntegerT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end IntegerT01class IntegerT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end IntegerT02class Numberstatic public explicit function isComputable(@e)'(@e -> bool)static public explicit function min((@e * @e -> bool))'((@e * @e -> bool) -> (@e -> (@e -> @e)))static public explicit function max((@e * @e -> bool))'((@e * @e -> bool) -> (@e -> (@e -> @e)))end Numberclass QueueT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end QueueTclass QueueT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end QueueT01class VDMUtilstatic public explicit function set2seq(set of (@T))'(set of (@T) +> seq of (@T))static public explicit function get_file_pos()'(() +> [(seq of (char) * nat * nat * seq of (char) * seq of (char))])static public explicit function val2seq_of_char(@T)'(@T +> seq of (char))static public explicit function seq_of_char2val(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))end VDMUtilclass RealT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end RealTclass RealT01 is subclass of TestCasestatic private value Tolelance'realprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end RealT01class RealT02 is subclass of TestCasestatic private value Tolelance'realprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end RealT02class RealT03 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end RealT03class RealT04 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end RealT04class RealT05 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end RealT05class RealT06 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end RealT06class RealT07 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end RealT07class RealT08 is subclass of TestCasestatic private value pi'realstatic private value sin'(real +> real)protected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end RealT08class Date is subclass of CalendarDefinitionprivate instance variable ModifiedJulianDate'realprivate instance variable usingCalendar'Calendarpublic explicit function getNumberOfDayOfTheWeek()'(() -> NumberOfDayOfTheWeek)public explicit function getNameOfDayOfTheWeek()'(() -> NameOfDayOfTheWeek)public explicit function getNumberOfTheDayOfWeek(Date, NameOfDayOfTheWeek)'(Date * NameOfDayOfTheWeek -> int)public explicit function getTheNumberOfDayOff(Date)'(Date -> int)public explicit function getTheNumberOfDayOffExceptStartDate(Date)'(Date -> int)public explicit function Year()'(() -> int)public explicit function Month()'(() -> int)public explicit function day()'(() -> int)public explicit function getFutureWeekday()'(() -> Date)public explicit function getPastWeekday()'(() -> Date)public explicit function addWeekday(int)'(int -> Date)public explicit function subtractWeekday(int)'(int -> Date)public explicit function isSunday()'(() -> bool)public explicit function isSaturday()'(() -> bool)public explicit function isWeekday()'(() -> bool)public explicit function isNotDayOff()'(() -> bool)public explicit function isDayOff()'(() -> bool)public explicit function isSundayOrDayoff()'(() -> bool)public explicit function daysFromNewYear()'(() -> int)public explicit function get_yyyy_mm_dd()'(() -> (int * int * int))private explicit function toStringAux(int)'(int -> seq of (char))public explicit function date2Str()'(() -> seq of (char))public explicit operation asString()'(() ==> seq of (char))public explicit operation print()'(() ==> seq of (char))public explicit operation LT(Date)'(Date ==> bool)public explicit operation GT(Date)'(Date ==> bool)public explicit operation LE(Date)'(Date ==> bool)public explicit operation GE(Date)'(Date ==> bool)public explicit operation EQ(Date)'(Date ==> bool)public explicit operation NE(Date)'(Date ==> bool)public explicit operation plus(int)'(int ==> Date)public explicit operation minus(int)'(int ==> Date)public explicit operation setModifiedJulianDate(real)'(real ==> ())public explicit operation getModifiedJulianDate()'(() ==> real)public explicit operation calendar()'(() ==> Calendar)public explicit operation Date(Calendar, real)'(Calendar * real ==> Date)end Dateclass FunctionT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end FunctionTclass FunctionT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end FunctionT01class FunctionT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end FunctionT02class FunctionT03 is subclass of TestCasestatic public type INT'INTstatic public type ReadingFunctionType'ReadingFunctionTypepublic explicit function ReadingFunction()'(() -> ReadingFunctionType)protected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end FunctionT03class AllTpublic explicit operation run()'(() ==> bool)end AllTclass Setstatic public explicit function asSequence(set of (@T))'(set of (@T) -> seq of (@T))static private explicit function cardinality(set of (@T))'(set of (@T) +> nat)static public explicit function hasSameElems(seq of (@T), set of (@T))'(seq of (@T) * set of (@T) -> bool)static public explicit function Combinations(nat1)'(nat1 -> (set of (@T) -> set of (set of (@T))))static public explicit function fmap((@T1 -> @T2))'((@T1 -> @T2) -> (set of (@T1) -> set of (@T2)))static public explicit function Sum(set of (@T))'(set of (@T) -> @T)static private explicit function SumAux(set of (@T))'(set of (@T) -> (@T -> @T))end Setclass CalendarT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end CalendarTclass CalendarT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT01class CalendarT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT02class CalendarT03 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT03class CalendarT04 is subclass of TestCasepublic explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT04class CalendarT05 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT05class CalendarT06 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT06class CalendarT07 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT07class CalendarT09 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT09class CalendarT10 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT10class CalendarT11 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT11class CalendarT12 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end CalendarT12class Productstatic public explicit function Curry((@T1 * @T2 -> @T3))'((@T1 * @T2 -> @T3) -> (@T1 -> (@T2 -> @T3)))static public explicit function Uncurry((@T1 -> (@T2 -> @T3)))'((@T1 -> (@T2 -> @T3)) -> (@T1 * @T2 -> @T3))end Productclass CalendarDefinitionstatic public value homedir'seq1 of (char)static public type NameOfDayOfTheWeek'NameOfDayOfTheWeekstatic public type NumberOfDayOfTheWeek'NumberOfDayOfTheWeekend CalendarDefinitionclass Calendar is subclass of CalendarDefinitionstatic private value daysDifferenceOfModifiedJulianDate'realstatic private value namesOfDayOfTheWeek'seq1 of ((<Fri> | <Mon> | <Sat> | <Sun> | <Thu> | <Tue> | <Wed>))static private value daysInYear'realstatic protected value monthsInYear'nat1static private value correctedMonths'nat1static private value daysInWeek'nat1static private value averageDaysInMonth'realstatic private value yearInCentury'nat1static private value calculationCoefficientOfDate'realstatic private value calculationCoefficientOfYear'nat1static private value centuryCalculationCoefficient'realstatic private value theDayBeforeGregorioCalendarStarted'nat1static private value theFirstDayOfGregorioCalendar'realstatic private value io'IOprotected instance variable differenceWithGMT'realprotected instance variable iToday'[Date]protected instance variable Year2Holidays'map (int) to (set of (Date))public explicit function LT(Date, Date)'(Date * Date -> bool)public explicit function GT(Date, Date)'(Date * Date -> bool)public explicit function LE(Date, Date)'(Date * Date -> bool)public explicit function GE(Date, Date)'(Date * Date -> bool)public explicit function EQ(Date, Date)'(Date * Date -> bool)public explicit function min(Date)'(Date -> (Date -> Date))public explicit function max(Date)'(Date -> (Date -> Date))public explicit function isDateString(seq of (char))'(seq of (char) -> bool)public explicit function isLeapYear(int)'(int -> bool)public explicit function getNumberOfDayOfTheWeek(Date)'(Date -> NumberOfDayOfTheWeek)public explicit function getYyyymmdd(Date)'(Date -> (int * int * int))public explicit function getNameOfDayOfTheWeek(Date)'(Date -> NameOfDayOfTheWeek)public explicit function getNumberOfDayOfTheWeekFromName(NameOfDayOfTheWeek)'(NameOfDayOfTheWeek -> NumberOfDayOfTheWeek)public explicit function firstDayOfTheWeekInMonth(int, int, NameOfDayOfTheWeek)'(int * int * NameOfDayOfTheWeek -> Date)public explicit function lastDayOfTheWeekInMonth(int, int, NameOfDayOfTheWeek)'(int * int * NameOfDayOfTheWeek -> Date)public explicit function getNthDayOfTheWeek(int, int, int, NameOfDayOfTheWeek)'(int * int * int * NameOfDayOfTheWeek -> (Date | bool))public explicit function getFirstDayOfMonth(int, int)'(int * int -> Date)public explicit function getLastDayOfMonth(int, int)'(int * int -> Date)public explicit function isSunday(Date)'(Date -> bool)public explicit function isSaturday(Date)'(Date -> bool)public explicit function isWeekday(Date)'(Date -> bool)public explicit function isNotDayOff(Date)'(Date -> bool)public explicit function isWeekday(NameOfDayOfTheWeek)'(NameOfDayOfTheWeek -> bool)public explicit function getNumberOfTheDayOfWeek(Date, Date, NameOfDayOfTheWeek)'(Date * Date * NameOfDayOfTheWeek -> int)private explicit function subtractDayOfTheWeek(int, int)'(int * int -> int)public explicit function Year(Date)'(Date -> int)public explicit function Month(Date)'(Date -> int)public explicit function day(Date)'(Date -> int)public explicit function daysFromNewYear(Date)'(Date -> int)private explicit function daysFromTheBeginningOfTheMonth(Date)'(Date -> int)private explicit function daysFromTheBeginningOfTheMonthAsReal(Date)'(Date -> real)private explicit function monthAux(Date)'(Date -> int)private explicit function yyyymmddModifyAux(Date)'(Date -> real)private explicit function yearAux(Date)'(Date -> int)public explicit function getVernalEquinoxOnGMT(int)'(int -> Date)public explicit function getSummerSolsticeOnGMT(int)'(int -> Date)public explicit function getAutumnalEquinoxOnGMT(int)'(int -> Date)public explicit function getWinterSolsticeOnGMT(int)'(int -> Date)public explicit function getVernalEquinox(int)'(int -> Date)public explicit function getSummerSolstice(int)'(int -> Date)public explicit function getAutumnalEquinox(int)'(int -> Date)public explicit function getWinterSolstice(int)'(int -> Date)public explicit function dateAdding(Date, int)'(Date * int -> Date)public explicit function diffOfDates(Date, Date)'(Date * Date -> int)public explicit function dateSubtracting(Date, int)'(Date * int -> Date)public explicit function mjd2Jd(real)'(real -> real)public explicit function julianDate2ModifiedJulianDate(real)'(real -> real)public explicit function getRegularDate(int, int, int)'(int * int * int -> Date)public explicit function getRegularMonth(int, int)'(int * int -> (int * int))public explicit function date2Year(int, int, int)'(int * int * int -> real)public explicit function date2Str(Date)'(Date +> seq of (char))public explicit function convertDateFromString(seq of (char))'(seq of (char) +> [Date])public explicit function getSetOfDayOffBetweenDates(Date, Date)'(Date * Date -> set of (Date))public explicit function getDayOffsExceptSunday(Date, Date)'(Date * Date -> int)public explicit function getTheNumberOfDayOff(Date, Date)'(Date * Date -> int)public explicit function getTheNumberOfDayOffExceptStartDate(Date, Date)'(Date * Date -> int)private explicit function getSetOfNotSundayDayOff(Date, Date)'(Date * Date -> set of (Date))public explicit function getDayOffsAndSunday(Date, Date)'(Date * Date -> set of (Date))public explicit function getFutureWeekday(Date)'(Date -> Date)private explicit function getFutureWeekdayMeasure(Date)'(Date +> nat)public explicit function getPastWeekday(Date)'(Date -> Date)private explicit function getPastWeekdaymeasure(Date)'(Date +> nat)public explicit function addWeekday(Date, int)'(Date * int -> Date)public explicit function addWeekdayAux(Date, int)'(Date * int -> Date)private explicit function restOfNumberOfDay(Date, int)'(Date * int +> nat)public explicit function subtractWeekday(Date, int)'(Date * int -> Date)public explicit function subtractWeekdayAux(Date, int)'(Date * int -> Date)public explicit function isDayOff(Date)'(Date -> bool)public explicit function isSundayOrDayoff(Date)'(Date -> bool)public explicit function isInDateSet(Date, set of (Date))'(Date * set of (Date) -> bool)public explicit operation modifiedJulianDate2Date(real)'(real ==> Date)public explicit operation getDateFrom_yyyy_mm_dd(int, int, int)'(int * int * int ==> Date)public explicit operation getDateFromString(seq of (char))'(seq of (char) ==> (Date | bool))public explicit operation getDateInStandardTime(Date)'(Date ==> Date)public explicit operation getDayOfTheWeekInYear(int, NameOfDayOfTheWeek)'(int * NameOfDayOfTheWeek ==> set of (Date))public explicit operation getDifferenceWithGMT()'(() ==> real)public explicit operation setDifferenceWithGMT(real)'(real ==> ())public explicit operation setTheSetOfDayOffs(int)'(int ==> ())public explicit operation getSetOfDayOff(int)'(int ==> set of (Date))public explicit operation readToday(seq of (char))'(seq of (char) ==> [Date])public explicit operation today()'(() ==> Date)public explicit operation readFromFiletoday(seq of (char))'(seq of (char) ==> Date)public explicit operation setToday(Date)'(Date ==> ())public explicit operation todayOnBusiness()'(() ==> Date)public explicit operation setTodayOnBusiness(Date)'(Date ==> ())public explicit operation todayOnCompany(seq of (char))'(seq of (char) ==> Date)public explicit operation setTodayOnCompany(seq of (char), Date)'(seq of (char) * Date ==> ())end Calendarclass Queuestatic public explicit function empty()'(() -> seq of (@T))static public explicit function isEmpty(seq of (@T))'(seq of (@T) -> bool)static public explicit function enQueue(@T, seq of (@T))'(@T * seq of (@T) -> seq of (@T))static public explicit function deQueue(seq of (@T))'(seq of (@T) -> seq of (@T))static public explicit function top(seq of (@T))'(seq of (@T) -> [@T])end Queueclass DoubleListQueueT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end DoubleListQueueTclass DoubleListQueueT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end DoubleListQueueT01class StringT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end StringTclass StringT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT01class StringT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT02class StringT03 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT03class StringT04 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT04class StringT05 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT05class StringT06 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT06class StringT07 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT07class StringT08 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT08class StringT09 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT09class StringT10 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end StringT10class SBCalendarT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end SBCalendarTclass SBCalendarT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SBCalendarT01class SBCalendarT02 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SBCalendarT02class SBCalendarT03 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SBCalendarT03class SBCalendarT04 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SBCalendarT04class SBCalendarT05 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SBCalendarT05class SBCalendarT06 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end SBCalendarT06class FTestLoggerstatic private value historyFileName'seq1 of (char)static public explicit function Success(TestCase)'(TestCase +> bool)static public explicit function Failure(TestCase)'(TestCase +> bool)static public explicit function SuccessAll(seq of (char))'(seq of (char) +> bool)static public explicit function FailureAll(seq of (char))'(seq of (char) +> bool)static public explicit function Print(seq of (char))'(seq of (char) -> bool)static public explicit function Fprint(seq of (char))'(seq of (char) -> bool)static public explicit operation Pr(seq of (char))'(seq of (char) ==> ())static public explicit operation Fpr(seq of (char))'(seq of (char) ==> ())end FTestLoggerclass TermT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end TermTclass TermT01 is subclass of TestCase, CalendarDefinitionprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end TermT01class Integerstatic public explicit function asString(int)'(int -> seq1 of (char))static public explicit function asStringAux(nat)'(nat -> seq1 of (char))static private explicit function ndiv10(nat)'(nat +> nat)static public explicit function asStringZ(seq of (char))'(seq of (char) -> (int -> seq1 of (char)))static public explicit function asStringZAux(seq of (char))'(seq of (char) -> (nat * bool -> seq1 of (char)))static private explicit function length(seq of (char))'(seq of (char) -> nat)static public explicit function asCharZ(char)'(char -> (nat * bool -> (bool | seq1 of (char))))static public explicit function asChar(int)'(int -> (bool | seq1 of (char)))static public explicit function GCD(nat)'(nat -> (nat -> nat))static private explicit function GCDMeasure(nat)'(nat -> nat)static public explicit function LCM(nat)'(nat -> (nat -> nat))end Integerclass UniqueNumberT is subclass of TestDriverprivate explicit function tests()'(() -> seq of (TestCase))end UniqueNumberTclass UniqueNumberT01 is subclass of TestCaseprotected explicit operation test()'(() ==> bool)protected explicit operation setUp()'(() ==> ())protected explicit operation tearDown()'(() ==> ())end UniqueNumberT01class Hashtable is subclass of CommonDefinitionstatic public type Contents'Contentsstatic public type Bucket'Bucketprivate instance variable sBucket'Bucketpublic explicit operation Hashtable()'(() ==> Hashtable)public explicit operation Hashtable(Contents)'(Contents ==> Hashtable)public explicit operation clear()'(() ==> ())public explicit operation getBuckets()'(() ==> Bucket)public explicit operation setBuckets(Bucket)'(Bucket ==> ())public explicit operation keySet()'(() ==> set of (Object))public explicit operation put(Object, Object)'(Object * Object ==> ())public explicit operation putAll(Contents)'(Contents ==> ())public explicit operation get(Object)'(Object ==> [Object])public explicit operation remove(Object)'(Object ==> [Object])public explicit operation valueSet()'(() ==> set of (Object))public explicit function size()'(() -> nat)public explicit function isEmpty()'(() -> bool)public explicit function contains(Object)'(Object -> bool)public explicit function containsKey(Object)'(Object -> bool)static public explicit function Put(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (@T1 -> (@T2 -> map (@T1) to (map (@T1) to (@T2))))))static public explicit function PutAll(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (map (@T1) to (@T2) -> map (@T1) to (map (@T1) to (@T2)))))static public explicit function PutAllAux(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (map (@T1) to (@T2) -> (set of (@T1) -> map (@T1) to (map (@T1) to (@T2))))))static public explicit function Get(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (@T1 -> [@T2])))static public explicit function Remove(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> ((@T1 -> @T1) -> (@T1 -> map (@T1) to (map (@T1) to (@T2)))))static public explicit function Clear()'(() -> map (@T1) to (map (@T1) to (@T2)))static public explicit function KeySet(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> set of (@T1))static public explicit function ValueSet(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> set of (@T2))static public explicit function Size(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> nat)static public explicit function IsEmpty(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> bool)static public explicit function Contains(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> (@T2 -> bool))static public explicit function ContainsKey(map (@T1) to (map (@T1) to (@T2)))'(map (@T1) to (map (@T1) to (@T2)) -> (@T1 -> bool))end Hashtableclass SBCalendar is subclass of JapaneseCalendarstatic private value io'IOstatic private value calendar'SBCalendarpublic instance variable iTodayOnBusiness'[Date]public instance variable iTodayOnCompanyMap'[map (seq of (char)) to (Date)]public instance variable timeOfSystem'[Time]static public explicit function isCorrectContractMonth(seq of (char))'(seq of (char) -> bool)static public explicit function getExerciseDate(seq of (char))'(seq of (char) -> Date)static public explicit function getContractDate(Date)'(Date -> Date)static public explicit function getMonthOf6monthsLater(int, int)'(int * int -> (int * int))static public explicit function getCandidateDate(int, int, int)'(int * int * int -> Date)static public explicit function isDayoffFromTheBeginingOfMonthToCandidateDate(Date)'(Date -> bool)static public explicit function getPreviousMonth(int, int)'(int * int -> int)static public explicit function isDateNil([Date])'([Date] -> bool)static public explicit function systemDate()'(() -> Date)public explicit operation setTheSetOfDayOffs(int)'(int ==> ())public explicit operation readTodayOnBusiness(seq of (char))'(seq of (char) ==> [Date])public explicit operation todayOnBusiness()'(() ==> Date)public explicit operation readFromFiletodayOnBusiness(seq of (char))'(seq of (char) ==> Date)public explicit operation setTodayOnBusiness(Date)'(Date ==> ())public explicit operation todayOnCompany(seq of (char))'(seq of (char) ==> Date)public explicit operation setTodayOnCompany(seq of (char), Date)'(seq of (char) * Date ==> ())public explicit operation readSystemTime()'(() ==> [Time])public explicit operation systemTime()'(() ==> Time)public explicit operation setSystemTime(Time)'(Time ==> ())public explicit operation SBCalendar()'(() ==> SBCalendar)end SBCalendar
