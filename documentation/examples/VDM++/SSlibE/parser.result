RESULT:result:-1:-1,-1:class Date is subclass of CalendarDefinitionprivate instance variable ModifiedJulianDate'realprivate instance variable usingCalendar'(unresolved Date`Calendar)public explicit function getNumberOfDayOfTheWeek'(() -> (unresolved Calendar`NumberOfDayOfTheWeek))public explicit function getNameOfDayOfTheWeek'(() -> (unresolved Calendar`NameOfDayOfTheWeek))public explicit function getNumberOfTheDayOfWeek'((unresolved Date`Date) * (unresolved Calendar`NameOfDayOfTheWeek) -> int)public explicit function getTheNumberOfDayOff'((unresolved Date`Date) -> int)public explicit function getTheNumberOfDayOffExceptStartDate'((unresolved Date`Date) -> int)public explicit function Year'(() -> int)public explicit function Month'(() -> int)public explicit function day'(() -> int)public explicit function getFutureWeekday'(() -> (unresolved Date`Date))public explicit function getPastWeekday'(() -> (unresolved Date`Date))public explicit function addWeekday'(int -> (unresolved Date`Date))public explicit function subtractWeekday'(int -> (unresolved Date`Date))public explicit function isSunday'(() -> bool)public explicit function isSaturday'(() -> bool)public explicit function isWeekday'(() -> bool)public explicit function isNotDayOff'(() -> bool)public explicit function isDayOff'(() -> bool)public explicit function isSundayOrDayoff'(() -> bool)public explicit function daysFromNewYear'(() -> int)public explicit function get_yyyy_mm_dd'(() -> (int * int * int))private explicit function toStringAux'(int -> seq of (char))public explicit function date2Str'(() -> seq of (char))public explicit operation asString'(() ==> seq of (char))public explicit operation print'(() ==> seq of (char))public explicit operation LT'((unresolved Date`Date) ==> bool)public explicit operation GT'((unresolved Date`Date) ==> bool)public explicit operation LE'((unresolved Date`Date) ==> bool)public explicit operation GE'((unresolved Date`Date) ==> bool)public explicit operation EQ'((unresolved Date`Date) ==> bool)public explicit operation NE'((unresolved Date`Date) ==> bool)public explicit operation plus'(int ==> (unresolved Date`Date))public explicit operation minus'(int ==> (unresolved Date`Date))public explicit operation setModifiedJulianDate'(real ==> ())public explicit operation getModifiedJulianDate'(() ==> real)public explicit operation calendar'(() ==> (unresolved Date`Calendar))public explicit operation Date'((unresolved Date`Calendar) * real ==> (unresolved Date`Date))end Dateclass JapaneseCalendar is subclass of Calendarstatic public value differenceBetweenGMTandJST'?static public value differenceBetweenADandJapaneseCal'?static private explicit function toStringAux'(int -> seq of (char))static public explicit function getJapaneseDateStr'((unresolved JapaneseCalendar`Date) -> seq of (char))public explicit operation setTheSetOfDayOffs'(int ==> ())public explicit operation JapaneseCalendar'(() ==> (unresolved JapaneseCalendar`JapaneseCalendar))public explicit operation getWeekdayBetweenDayOff'(set of ((unresolved JapaneseCalendar`Date)) ==> set of ((unresolved JapaneseCalendar`Date)))public explicit function getNotNationalHolidaysInFuture'(set of ((unresolved JapaneseCalendar`Date)) * (unresolved JapaneseCalendar`Date) -> (unresolved JapaneseCalendar`Date))private explicit function getNotNationalHolidaysInFutureMeasure'(set of ((unresolved JapaneseCalendar`Date)) * (unresolved JapaneseCalendar`Date) +> nat)end JapaneseCalendarclass FTestDriverstatic public type TestCase'TestCasestatic public explicit function run'(seq of ((unresolved FTestDriver`TestCase)) +> bool)static public explicit function isOK'((unresolved FTestDriver`TestCase) +> bool)static public explicit function GetTestResult'((unresolved FTestDriver`TestCase) +> bool)static public explicit function GetTestName'((unresolved FTestDriver`TestCase) +> seq of (char))end FTestDriverclass Characterstatic private value EnglishChars'?static public explicit function asDigit'(char -> (bool | int))static public explicit function asDictOrder'(char -> int)static public explicit function isDigit'(char -> bool)static public explicit function LT'(char * char -> bool)static public explicit function LT2'(char -> (char -> bool))static public explicit function LE'(char * char -> bool)static public explicit function LE2'(char -> (char -> bool))static public explicit function GT'(char * char -> bool)static public explicit function GT2'(char -> (char -> bool))static public explicit function GE'(char * char -> bool)static public explicit function GE2'(char -> (char -> bool))end Characterclass Objectpublic explicit function hashCode'(() -> int)public explicit function equals'((unresolved Object`Object) -> bool)public explicit operation getContent'(() ==> [(int | seq of (char))])end Objectclass Productstatic public explicit function Curry'(((@T1 * @T2 -> @T3)) -> (@T1 -> (@T2 -> @T3)))static public explicit function Uncurry'(((@T1 -> (@T2 -> @T3))) -> (@T1 * @T2 -> @T3))end Productclass SequenceT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved SequenceT`TestCase)))end SequenceTclass SequenceT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT01class SequenceT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT02class SequenceT03 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT03class SequenceT04 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT04class SequenceT05 is subclass of TestCasestatic public type TestType'TestTypestatic public type RecordType'RecordTypepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT05class SequenceT06 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT06class SequenceT07 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT07class SequenceT08 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT08class SequenceT09 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT09class SequenceT10 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT10class SequenceT11 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT11class SequenceT12 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT12class SequenceT13 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT13class SequenceT14 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT14class SequenceT15 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT15class SequenceT16 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT16class SequenceT17 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT17class SequenceT18 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT18class SequenceT19 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT19class SequenceT20 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT20class SequenceT21 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT21class SequenceT22 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT22class SequenceT23 is subclass of TestCasepublic explicit function plus'(int -> (int -> int))public explicit function product'(int -> (int -> int))public explicit function append'(seq of (char) -> (char -> seq of (char)))public explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT23class SequenceT24 is subclass of TestCasepublic explicit function plus'(int -> (int -> int))public explicit function product'(int -> (int -> int))public explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SequenceT24class DoubleListQueueT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved DoubleListQueueT`TestCase)))end DoubleListQueueTclass DoubleListQueueT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end DoubleListQueueT01class StringT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved StringT`TestCase)))end StringTclass StringT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT01class StringT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT02class StringT03 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT03class StringT04 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT04class StringT05 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT05class StringT06 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT06class StringT07 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT07class StringT08 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT08class StringT09 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT09class StringT10 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end StringT10class Time is subclass of CalendarDefinitionstatic public value hoursPerDay'?static public value minutesPerHour'?static public value secondsPerMinute'?static public value ??'?static public value milliSecondsPerDay'?static public value milliSecondsPerHour'?static private value io'?static public type TimeInMilliSeconds'TimeInMilliSecondsprivate instance variable sDate'(unresolved Time`Date)private instance variable sTime'(unresolved Time`TimeInMilliSeconds)public explicit operation Time'((unresolved Time`Calendar) * int * int * int * nat * nat * nat * nat ==> (unresolved Time`Time))public explicit operation Time'((unresolved Time`Calendar) * int * int * int ==> (unresolved Time`Time))public explicit operation Time'((unresolved Time`Date) ==> (unresolved Time`Time))public explicit operation Time'((unresolved Time`Calendar) ==> (unresolved Time`Time))public explicit operation Time'(seq of (char) * seq of (char) * (unresolved Time`Calendar) ==> (unresolved Time`Time))public explicit operation readCurrentDateTime'(seq of (char) * seq of (char) * (unresolved Time`Calendar) ==> [(unresolved Time`Time)])public explicit operation getDate'(() ==> (unresolved Time`Date))public explicit operation setDate'((unresolved Time`Date) ==> ())public explicit operation getTime'(() ==> (unresolved Time`TimeInMilliSeconds))public explicit operation setTime'((unresolved Time`TimeInMilliSeconds) ==> ())public explicit operation hour'(() ==> nat)public explicit operation setTimeFromNat'(nat ==> ())public explicit operation minute'(() ==> nat)public explicit operation setMinuteFromNat'(nat ==> ())public explicit operation second'(() ==> nat)public explicit operation setSecond'(nat ==> ())public explicit operation milliSecond'(() ==> nat)public explicit operation setMilliSecond'(nat ==> ())public explicit function calendar'(() -> (unresolved Time`Calendar))public explicit function Year'(() -> int)public explicit function Month'(() -> int)public explicit function day'(() -> int)public explicit function getTimeAsNat'(() -> nat)public explicit function LT'((unresolved Time`Time) -> bool)public explicit function GT'((unresolved Time`Time) -> bool)public explicit function LE'((unresolved Time`Time) -> bool)public explicit function GE'((unresolved Time`Time) -> bool)public explicit function EQ'((unresolved Time`Time) -> bool)public explicit function NE'((unresolved Time`Time) -> bool)public explicit function IntProduct2TimeMillieSeconds'(int * int * int * int -> int)public explicit function Time2IntProduct'((unresolved Time`TimeInMilliSeconds) -> (nat * nat * nat * nat))public explicit operation asString'(() ==> seq of (char))public explicit operation print'(() ==> seq of (char))public explicit operation plusmilliSecond'(int ==> (unresolved Time`Time))public explicit operation plussecond'(int ==> (unresolved Time`Time))public explicit operation plusminute'(int ==> (unresolved Time`Time))public explicit operation plushour'(int ==> (unresolved Time`Time))public explicit operation plus'(int * int * int * int ==> (unresolved Time`Time))public explicit operation minusmilliSecond'(int ==> (unresolved Time`Time))public explicit operation minus'(int * int * int * int ==> (unresolved Time`Time))end Timeclass Mapstatic public explicit function Get'(map (@T1) to (@T2) -> (@T1 -> [@T2]))static public explicit function Contains'(map (@T1) to (@T2) -> (@T2 -> bool))static public explicit function ContainsKey'(map (@T1) to (@T2) -> (@T1 -> bool))end Mapclass CalendarT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved CalendarT`TestCase)))end CalendarTclass CalendarT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT01class CalendarT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT02class CalendarT03 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT03class CalendarT04 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT04class CalendarT05 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT05class CalendarT06 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT06class CalendarT07 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT07class CalendarT09 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT09class CalendarT10 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT10class CalendarT11 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT11class CalendarT12 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end CalendarT12class NumberT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved NumberT`TestCase)))end NumberTclass NumberT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end NumberT01class NumberT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end NumberT02class NumberT03 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end NumberT03class UniqueNumberT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved UniqueNumberT`TestCase)))end UniqueNumberTclass UniqueNumberT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end UniqueNumberT01class TermT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved TermT`TestCase)))end TermTclass TermT01 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end TermT01class Queuestatic public explicit function empty'(() -> seq of (@T))static public explicit function isEmpty'(seq of (@T) -> bool)static public explicit function enQueue'(@T * seq of (@T) -> seq of (@T))static public explicit function deQueue'(seq of (@T) -> seq of (@T))static public explicit function top'(seq of (@T) -> [@T])end Queueclass DateT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved DateT`TestCase)))end DateTclass DateT01 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end DateT01class DateT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end DateT02class DateT03 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end DateT03class DateT04 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end DateT04class DateT05 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end DateT05class DateT06 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end DateT06class DateT07 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end DateT07class Realstatic private value Rcsid'?static private value Tolerance'?static private value Variation'?static public explicit function EQ'(real -> (real -> bool))static public explicit function numberOfDigit'(real -> nat)static public explicit function aNumberOfIntegerPartDigit'(int -> nat)static public explicit function aNumberOfIntegerPartDigitAux'(int * nat -> nat)static private explicit function idiv10'(int * nat +> nat)static public explicit function isNDigitsAfterTheDecimalPoint'(real * nat -> bool)static public explicit function getNumberOfDigitsAfterTheDecimalPoint'(real -> nat)static private explicit function getNumberOfDigitsAfterTheDecimalPointAux'(real * nat -> nat)static private explicit function getNumberOfDigitsAfterTheDecimalPointAuxMeasure'(real * nat +> nat)static public explicit function roundAterDecimalPointByNdigit'(real * nat -> real)static public explicit function ???'(((real -> real)) -> (real -> real))static public explicit function ?????????????'(((real -> real)) -> (real -> real))static public explicit function integrate'(((real -> real)) -> (nat1 -> (real -> (real -> real))))static private explicit operation seqGenerate'(nat1 * real * real ==> seq of (real))static public explicit function root'(real -> real)static public explicit function ?????????'(real * int -> real)static private explicit function getInterest???_???'(real * int -> real)static private explicit function getInterest???_????'(real * int -> real)static public explicit function getInterest'(real * int -> real)end Realclass VDMUtilstatic public explicit function set2seq'(set of (@T) +> seq of (@T))static public explicit function get_file_pos'(() +> [(seq of (char) * nat * nat * seq of (char) * seq of (char))])static public explicit function val2seq_of_char'(@T +> seq of (char))static public explicit function seq_of_char2val'(seq1 of (char) -> (bool * [@p]))end VDMUtilclass QueueT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved QueueT`TestCase)))end QueueTclass QueueT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end QueueT01class TestDriverprivate explicit function tests'(() -> seq of ((unresolved TestDriver`TestCase)))public explicit function isOK'((unresolved TestDriver`TestCase) -> bool)public explicit operation run'(() ==> bool)end TestDriverclass FHashtablestatic public explicit function Put'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> (@T1 -> (@T2 -> (map (@T1) to ((map (@T1) to (@T2))))))))static public explicit function PutAll'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> ((map (@T1) to (@T2)) -> (map (@T1) to ((map (@T1) to (@T2)))))))static public explicit function PutAllAux'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> ((map (@T1) to (@T2)) -> (set of (@T1) -> (map (@T1) to ((map (@T1) to (@T2))))))))static public explicit function Get'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> (@T1 -> [@T2])))static public explicit function Remove'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> (@T1 -> (map (@T1) to ((map (@T1) to (@T2)))))))static public explicit function Clear'(() -> (map (@T1) to ((map (@T1) to (@T2)))))static public explicit function KeySet'((map (@T1) to ((map (@T1) to (@T2)))) -> set of (@T1))static public explicit function ValueSet'((map (@T1) to ((map (@T1) to (@T2)))) -> set of (@T2))static public explicit function Size'((map (@T1) to ((map (@T1) to (@T2)))) -> nat)static public explicit function IsEmpty'((map (@T1) to ((map (@T1) to (@T2)))) -> bool)static public explicit function Contains'((map (@T1) to ((map (@T1) to (@T2)))) -> (@T2 -> bool))static public explicit function ContainsKey'((map (@T1) to ((map (@T1) to (@T2)))) -> (@T1 -> bool))end FHashtableclass FSequencestatic public explicit function Sum'(seq of (@T) -> @T)static public explicit function Prod'(seq of (@T) -> @T)static public explicit function Plus'(@T -> (@T -> @T))static public explicit function Product'(@T -> (@T -> @T))static public explicit function Append'(seq of (@T) -> (@T -> seq of (@T)))static public explicit function Average'(seq of (@T) -> [real])static private explicit function AverageAux'(@T -> (@T -> (seq of (@T) -> real)))static public explicit function IsAscendingInTotalOrder'(((@T * @T -> bool)) -> (seq of (@T) -> bool))static public explicit function IsDescendingInTotalOrder'(((@T * @T -> bool)) -> (seq of (@T) -> bool))static public explicit function IsAscending'(seq of (@T) -> bool)static public explicit function IsDescending'(seq of (@T) -> bool)static public explicit function Sort'(((@T * @T -> bool)) -> (seq of (@T) -> seq of (@T)))static public explicit function AscendingSort'(seq of (@T) -> seq of (@T))static public explicit function DescendingSort'(seq of (@T) -> seq of (@T))static public explicit function IsOrdered'(seq of (((@T * @T -> bool))) -> (seq of (@T) -> (seq of (@T) -> bool)))static public explicit function Merge'(((@T * @T -> bool)) -> (seq of (@T) -> (seq of (@T) -> seq of (@T))))static public explicit function InsertAt'(nat1 -> (@T -> (seq of (@T) -> seq of (@T))))static public explicit function RemoveAt'(nat1 -> (seq of (@T) -> seq of (@T)))static public explicit function RemoveDup'(seq of (@T) -> seq of (@T))static public explicit function RemoveMember'(@T -> (seq of (@T) -> seq of (@T)))static public explicit function RemoveMembers'(seq of (@T) -> (seq of (@T) -> seq of (@T)))static public explicit function UpdateAt'(nat1 -> (@T -> (seq of (@T) -> seq of (@T))))static public explicit function Take'(int -> (seq of (@T) -> seq of (@T)))static public explicit function TakeWhile'(((@T -> bool)) -> (seq of (@T) -> seq of (@T)))static public explicit function Drop'(int -> (seq of (@T) -> seq of (@T)))static public explicit function DropWhile'(((@T -> bool)) -> (seq of (@T) -> seq of (@T)))static public explicit function Span'(((@T -> bool)) -> (seq of (@T) -> (seq of (@T) * seq of (@T))))static public explicit function SubSeq'(nat -> (nat -> (seq1 of (@T) -> seq of (@T))))static public explicit function Last'(seq of (@T) -> @T)static public explicit function Fmap'(((@T1 -> @T2)) -> (seq of (@T1) -> seq of (@T2)))static public explicit function Filter'(((@T -> bool)) -> (seq of (@T) -> seq of (@T)))static public explicit function Foldl'(((@T1 -> (@T2 -> @T1))) -> (@T1 -> (seq of (@T2) -> @T1)))static public explicit function Foldr'(((@T1 -> (@T2 -> @T2))) -> (@T2 -> (seq of (@T1) -> @T2)))static public explicit function IsMember'(@T -> (seq of (@T) -> bool))static public explicit function IsAnyMember'(seq of (@T) -> (seq of (@T) -> bool))static public explicit function IsDup'(seq of (@T) -> bool)static public explicit function Index'(@T -> (seq of (@T) -> int))static public explicit function IndexAux'(@T -> (seq of (@T) -> (int -> int)))static public explicit function IndexAll'(@T -> (seq of (@T) -> set of (nat1)))static public explicit function Flatten'(seq of (seq of (@T)) -> seq of (@T))static public explicit function Compact'(seq of ([@T]) -> seq of (@T))static public explicit function Freverse'(seq of (@T) -> seq of (@T))static public explicit function Permutations'(seq of (@T) -> set of (seq of (@T)))static public explicit function IsPermutations'(seq of (@T) -> (seq of (@T) -> bool))static public explicit function Unzip'(seq of (((@T1 * @T2))) -> (seq of (@T1) * seq of (@T2)))static public explicit function Zip'(seq of (@T1) * seq of (@T2) -> seq of (((@T1 * @T2))))static public explicit function Zip2'(seq of (@T1) -> (seq of (@T2) -> seq of (((@T1 * @T2)))))end FSequenceclass MapT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved MapT`TestCase)))end MapTclass MapT01 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end MapT01class MapT02 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end MapT02class TimeT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved TimeT`TestCase)))end TimeTclass TimeT01 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end TimeT01class TimeT02 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end TimeT02class TimeT03 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end TimeT03class TimeT04 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end TimeT04class TimeT05 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end TimeT05class TimeT06 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end TimeT06class ProductT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved ProductT`TestCase)))end ProductTclass ProductT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end ProductT01class SetT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved SetT`TestCase)))end SetTclass SetT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SetT01class SetT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SetT02class SetT03 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SetT03class SetT04 is subclass of TestCasepublic explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SetT04class RealT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved RealT`TestCase)))end RealTclass RealT01 is subclass of TestCasestatic private value Tolelance'?protected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end RealT01class RealT02 is subclass of TestCasestatic private value Tolelance'?protected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end RealT02class RealT03 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end RealT03class RealT04 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end RealT04class RealT05 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end RealT05class RealT06 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end RealT06class RealT07 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end RealT07class RealT08 is subclass of TestCasestatic private value pi'?static private value sin'?protected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end RealT08class DoubleListQueuestatic public explicit function empty'(() -> (seq of (@T) * seq of (@T)))static public explicit function isEmpty'(((seq of (@T) * seq of (@T))) -> bool)static public explicit function enQueue'(@T * ((seq of (@T) * seq of (@T))) -> (seq of (@T) * seq of (@T)))static public explicit function deQueue'(((seq of (@T) * seq of (@T))) -> [(seq of (@T) * seq of (@T))])static public explicit function top'(((seq of (@T) * seq of (@T))) -> [@T])static public explicit function fromList'(seq of (@T) * ((seq of (@T) * seq of (@T))) -> (seq of (@T) * seq of (@T)))static private explicit function fromListMeasure'(seq of (@T) * ((seq of (@T) * seq of (@T))) +> nat)static public explicit function toList'(((seq of (@T) * seq of (@T))) -> seq of (@T))static private explicit function toListMeasure'(((seq of (@T) * seq of (@T))) +> nat)end DoubleListQueueclass UniqueNumber is subclass of CommonDefinitionstatic private value defaultValue'?protected instance variable UniqNum'intpublic explicit function getUniqNum'(int * nat1 -> int)public explicit operation getUniqNumStr'(int ==> seq of (char))public explicit operation initialize'(() ==> int)end UniqueNumberclass TestLoggerstatic private value hisotoryFileName'?public explicit function Succeeded'((unresolved TestLogger`TestCase) -> bool)public explicit function Failed'((unresolved TestLogger`TestCase) -> bool)public explicit function succeededInAllTestcases'(seq of (char) -> bool)public explicit function notSucceededInAllTestcases'(seq of (char) -> bool)end TestLoggerclass Functionstatic public explicit function Funtil'(((@T -> bool)) -> (((@T -> @T)) -> (@T -> @T)))static public explicit function Fwhile'(((@T -> bool)) -> (((@T -> @T)) -> (@T -> @T)))static public explicit function Seq'(seq of (((@T -> @T))) -> (@T -> @T))static public explicit function readFn'(seq of (char) -> [@T])end Functionclass SBCalendar is subclass of JapaneseCalendarstatic private value io'?static private value calendar'?public instance variable iTodayOnBusiness'[(unresolved SBCalendar`Date)]public instance variable iTodayOnCompanyMap'[map (seq of (char)) to ((unresolved SBCalendar`Date))]public instance variable timeOfSystem'[(unresolved SBCalendar`Time)]static public explicit function isCorrectContractMonth'(seq of (char) -> bool)static public explicit function getExerciseDate'(seq of (char) -> (unresolved SBCalendar`Date))static public explicit function getContractDate'((unresolved SBCalendar`Date) -> (unresolved SBCalendar`Date))static public explicit function getMonthOf6monthsLater'(int * int -> (int * int))static public explicit function getCandidateDate'(int * int * int -> (unresolved SBCalendar`Date))static public explicit function isDayoffFromTheBeginingOfMonthToCandidateDate'((unresolved SBCalendar`Date) -> bool)static public explicit function getPreviousMonth'(int * int -> int)static public explicit function isDateNil'([(unresolved SBCalendar`Date)] -> bool)static public explicit function systemDate'(() -> (unresolved SBCalendar`Date))public explicit operation setTheSetOfDayOffs'(int ==> ())public explicit operation readTodayOnBusiness'(seq of (char) ==> [(unresolved SBCalendar`Date)])public explicit operation todayOnBusiness'(() ==> (unresolved SBCalendar`Date))public explicit operation readFromFiletodayOnBusiness'(seq of (char) ==> (unresolved SBCalendar`Date))public explicit operation setTodayOnBusiness'((unresolved SBCalendar`Date) ==> ())public explicit operation todayOnCompany'(seq of (char) ==> (unresolved SBCalendar`Date))public explicit operation setTodayOnCompany'(seq of (char) * (unresolved SBCalendar`Date) ==> ())public explicit operation readSystemTime'(() ==> [(unresolved SBCalendar`Time)])public explicit operation systemTime'(() ==> (unresolved SBCalendar`Time))public explicit operation setSystemTime'((unresolved SBCalendar`Time) ==> ())public explicit operation SBCalendar'(() ==> (unresolved SBCalendar`SBCalendar))end SBCalendarclass FHashtableTstatic public explicit function run'(() +> bool)static private explicit function t1'(() -> (unresolved FTestDriver`TestCase))static private explicit function t2'(() -> (unresolved FTestDriver`TestCase))static private explicit function t3'(() -> (unresolved FTestDriver`TestCase))static private explicit function t4'(() -> (unresolved FTestDriver`TestCase))static private explicit function t5'(() -> (unresolved FTestDriver`TestCase))static private explicit function t6'(() -> (unresolved FTestDriver`TestCase))end FHashtableTclass FTestLoggerstatic private value historyFileName'?static public explicit function Success'((unresolved FTestDriver`TestCase) +> bool)static public explicit function Failure'((unresolved FTestDriver`TestCase) +> bool)static public explicit function SuccessAll'(seq of (char) +> bool)static public explicit function FailureAll'(seq of (char) +> bool)static public explicit function Print'(seq of (char) -> bool)static public explicit function Fprint'(seq of (char) -> bool)static public explicit operation Pr'(seq of (char) ==> ())static public explicit operation Fpr'(seq of (char) ==> ())end FTestLoggerclass MATHstatic public explicit function sin'(real +> real)static public explicit function cos'(real +> real)static public explicit function tan'(real -> real)static public explicit function cot'(real -> real)static public explicit function asin'(real -> real)static public explicit function acos'(real -> real)static public explicit function atan'(real +> real)static public explicit function acot'(real +> real)static public explicit function sqrt'(real -> real)static public explicit function pi_f'(() +> real)static public explicit operation srand'(int ==> ())static public explicit operation rand'(int ==> int)static public explicit operation srand2'(int ==> int)static public explicit function exp'(real +> real)static public explicit function ln'(real -> real)static public explicit function log'(real -> real)static public value pi'?end MATHclass Integerstatic public explicit function asString'(int -> seq1 of (char))static public explicit function asStringAux'(nat -> seq1 of (char))static private explicit function ndiv10'(nat +> nat)static public explicit function asStringZ'(seq of (char) -> (int -> seq1 of (char)))static public explicit function asStringZAux'(seq of (char) -> (nat * bool -> seq1 of (char)))static private explicit function length'(seq of (char) -> nat)static public explicit function asCharZ'(char -> (nat * bool -> (bool | seq1 of (char))))static public explicit function asChar'(int -> (bool | seq1 of (char)))static public explicit function GCD'(nat -> (nat -> nat))static private explicit function GCDMeasure'(nat -> nat)static public explicit function LCM'(nat -> (nat -> nat))end Integerclass Numberstatic public explicit function isComputable'(@e -> bool)static public explicit function min'(((@e * @e -> bool)) -> (@e -> (@e -> @e)))static public explicit function max'(((@e * @e -> bool)) -> (@e -> (@e -> @e)))end Numberclass TestCasepublic instance variable TestName'seq of (char)public explicit operation TestACase'(() ==> bool)public explicit operation getTestName'(() ==> seq of (char))protected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end TestCaseclass StringObj is subclass of CommonDefinitionpublic instance variable content'seq of (char)public explicit function hashCode'(() -> int)public explicit function equals'((unresolved StringObj`Object) -> bool)public explicit operation StringObj'(seq of (char) ==> (unresolved StringObj`StringObj))public explicit operation getContent'(() ==> [seq of (char)])end StringObjclass IntObj is subclass of CommonDefinitionpublic instance variable content'intpublic explicit function hashCode'(() -> int)public explicit function equals'((unresolved IntObj`Object) -> bool)public explicit operation IntObj'(int ==> (unresolved IntObj`IntObj))public explicit operation getContent'(() ==> [int])end IntObjclass HashtableT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved HashtableT`TestCase)))end HashtableTclass HashtableT01 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT01class HashtableT02 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT02class HashtableT03 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT03class HashtableT04 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT04class HashtableT05 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT05class HashtableT06 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT06class HashtableT07 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT07class HashtableT52 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT52class HashtableT53 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT53class HashtableT54 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT54class HashtableT55 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT55class HashtableT56 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT56class HashtableT57 is subclass of TestCase, CommonDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end HashtableT57class Sequencestatic public explicit function Sum'(seq of (@T) -> @T)static private explicit function SumAux'(seq of (@T) -> (@T -> @T))static private explicit function sumLength'(seq of (@T) +> nat)static public explicit function Product'(seq of (@T) -> @T)static private explicit function ProductAux'(@T -> (seq of (@T) -> @T))static public explicit function GetAverage'(seq of (@T) -> [real])static private explicit function GetAverageAux'(@T -> (@T -> (seq of (@T) -> real)))static public explicit function isAscendingTotalOrder'(((@T * @T -> bool)) -> (seq of (@T) -> bool))static public explicit function isDescendingTotalOrder'(((@T * @T -> bool)) -> (seq of (@T) -> bool))static public explicit function isAscendingOrder'(seq of (@T) -> bool)static public explicit function isDescendingOrder'(seq of (@T) -> bool)static public explicit function sort'(((@T * @T -> bool)) -> (seq of (@T) -> seq of (@T)))static public explicit function ascendingOrderSort'(seq of (@T) -> seq of (@T))static public explicit function descendingOrderSort'(seq of (@T) -> seq of (@T))static public explicit function isOrdered'(seq of (((@T * @T -> bool))) -> (seq of (@T) -> (seq of (@T) -> bool)))static public explicit function Merge'(((@T * @T -> bool)) -> (seq of (@T) -> (seq of (@T) -> seq of (@T))))static public explicit function InsertAt'(nat1 -> (@T -> (seq of (@T) -> seq of (@T))))static public explicit function RemoveAt'(nat1 -> (seq of (@T) -> seq of (@T)))static public explicit function RemoveDup'(seq of (@T) -> seq of (@T))static private explicit function length'(seq of (@T) +> nat)static public explicit function RemoveMember'(@T -> (seq of (@T) -> seq of (@T)))static public explicit function RemoveMembers'(seq of (@T) -> (seq of (@T) -> seq of (@T)))static public explicit function UpdateAt'(nat1 -> (@T -> (seq of (@T) -> seq of (@T))))static public explicit function take'(int -> (seq of (@T) -> seq of (@T)))static public explicit function TakeWhile'(((@T -> bool)) -> (seq of (@T) -> seq of (@T)))static public explicit function drop'(int -> (seq of (@T) -> seq of (@T)))static public explicit function DropWhile'(((@T -> bool)) -> (seq of (@T) -> seq of (@T)))static public explicit function Span'(((@T -> bool)) -> (seq of (@T) -> (seq of (@T) * seq of (@T))))static public explicit function SubSeq'(nat -> (nat -> (seq1 of (@T) -> seq of (@T))))static public explicit function last'(seq of (@T) -> @T)static public explicit function fmap'(((@T1 -> @T2)) -> (seq of (@T1) -> seq of (@T2)))static public explicit function filter'(((@T -> bool)) -> (seq of (@T) -> seq of (@T)))static public explicit function Foldl'(((@T1 -> (@T2 -> @T1))) -> (@T1 -> (seq of (@T2) -> @T1)))static public explicit function Foldr'(((@T1 -> (@T2 -> @T2))) -> (@T2 -> (seq of (@T1) -> @T2)))static public explicit function isMember'(@T -> (seq of (@T) -> bool))static public explicit function isAnyMember'(seq of (@T) -> (seq of (@T) -> bool))static public explicit function Index'(@T -> (seq of (@T) -> int))static private explicit function IndexAux'(@T -> (seq of (@T) -> (int -> int)))static public explicit function IndexAll2'(@T -> (seq of (@T) -> set of (int)))static public explicit function flatten'(seq of (seq of (@T)) -> seq of (@T))static public explicit function compact'(seq of ([@T]) -> seq of (@T))static public explicit function freverse'(seq of (@T) -> seq of (@T))static public explicit function Permutations'(seq of (@T) -> set of (seq of (@T)))static public explicit function RestSeq'(seq of (@T) * nat -> seq of (@T))static public explicit function Unzip'(seq of (((@T1 * @T2))) -> (seq of (@T1) * seq of (@T2)))static private explicit function lengthUnzip'(seq of (((@T1 * @T2))) +> nat)static public explicit function Zip'(seq of (@T1) * seq of (@T2) -> seq of (((@T1 * @T2))))static public explicit function Zip2'(seq of (@T1) -> (seq of (@T2) -> seq of (((@T1 * @T2)))))end Sequenceclass FunctionT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved FunctionT`TestCase)))end FunctionTclass FunctionT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end FunctionT01class FunctionT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end FunctionT02class FunctionT03 is subclass of TestCasestatic public type INT'INTstatic public type ReadingFunctionType'ReadingFunctionTypepublic explicit function ReadingFunction'(() -> (unresolved FunctionT03`ReadingFunctionType))protected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end FunctionT03class IntegerT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved IntegerT`TestCase)))end IntegerTclass IntegerT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end IntegerT01class IntegerT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end IntegerT02class CommonDefinition is subclass of Objectstatic public value StringOrder'?static public value NumericOrder'?static public value DateOrder'?static public value AmountOfMoneyOrder'?static public type Identifier'Identifierstatic public type Quantity'Quantitystatic public type NumericalValue'NumericalValuestatic public type Percent'Percentstatic public type AmountOfMoney'AmountOfMoneystatic public type NonNegativeAmountOfMoney'NonNegativeAmountOfMoneystatic public type PositiveAmountOfMoney'PositiveAmountOfMoneystatic public type AmountOfMoney2'AmountOfMoney2end CommonDefinitionclass CalendarDefinitionstatic public value homedir'?static public type NameOfDayOfTheWeek'NameOfDayOfTheWeekstatic public type NumberOfDayOfTheWeek'NumberOfDayOfTheWeekend CalendarDefinitionclass Calendar is subclass of CalendarDefinitionstatic private value daysDifferenceOfModifiedJulianDate'?static private value namesOfDayOfTheWeek'?static private value daysInYear'?static protected value monthsInYear'?static private value correctedMonths'?static private value daysInWeek'?static private value averageDaysInMonth'?static private value yearInCentury'?static private value calculationCoefficientOfDate'?static private value calculationCoefficientOfYear'?static private value centuryCalculationCoefficient'?static private value theDayBeforeGregorioCalendarStarted'?static private value theFirstDayOfGregorioCalendar'?static private value io'?protected instance variable differenceWithGMT'realprotected instance variable iToday'[(unresolved Calendar`Date)]protected instance variable Year2Holidays'map (int) to (set of ((unresolved Calendar`Date)))public explicit function LT'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> bool)public explicit function GT'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> bool)public explicit function LE'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> bool)public explicit function GE'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> bool)public explicit function EQ'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> bool)public explicit function min'((unresolved Calendar`Date) -> ((unresolved Calendar`Date) -> (unresolved Calendar`Date)))public explicit function max'((unresolved Calendar`Date) -> ((unresolved Calendar`Date) -> (unresolved Calendar`Date)))public explicit function isDateString'(seq of (char) -> bool)public explicit function isLeapYear'(int -> bool)public explicit function getNumberOfDayOfTheWeek'((unresolved Calendar`Date) -> (unresolved Calendar`NumberOfDayOfTheWeek))public explicit function getYyyymmdd'((unresolved Calendar`Date) -> (int * int * int))public explicit function getNameOfDayOfTheWeek'((unresolved Calendar`Date) -> (unresolved Calendar`NameOfDayOfTheWeek))public explicit function getNumberOfDayOfTheWeekFromName'((unresolved Calendar`NameOfDayOfTheWeek) -> (unresolved Calendar`NumberOfDayOfTheWeek))public explicit function firstDayOfTheWeekInMonth'(int * int * (unresolved Calendar`NameOfDayOfTheWeek) -> (unresolved Calendar`Date))public explicit function lastDayOfTheWeekInMonth'(int * int * (unresolved Calendar`NameOfDayOfTheWeek) -> (unresolved Calendar`Date))public explicit function getNthDayOfTheWeek'(int * int * int * (unresolved Calendar`NameOfDayOfTheWeek) -> ((unresolved Calendar`Date) | bool))public explicit function getFirstDayOfMonth'(int * int -> (unresolved Calendar`Date))public explicit function getLastDayOfMonth'(int * int -> (unresolved Calendar`Date))public explicit function isSunday'((unresolved Calendar`Date) -> bool)public explicit function isSaturday'((unresolved Calendar`Date) -> bool)public explicit function isWeekday'((unresolved Calendar`Date) -> bool)public explicit function isNotDayOff'((unresolved Calendar`Date) -> bool)public explicit function isWeekday'((unresolved Calendar`NameOfDayOfTheWeek) -> bool)public explicit function getNumberOfTheDayOfWeek'((unresolved Calendar`Date) * (unresolved Calendar`Date) * (unresolved Calendar`NameOfDayOfTheWeek) -> int)private explicit function subtractDayOfTheWeek'(int * int -> int)public explicit function Year'((unresolved Calendar`Date) -> int)public explicit function Month'((unresolved Calendar`Date) -> int)public explicit function day'((unresolved Calendar`Date) -> int)public explicit function daysFromNewYear'((unresolved Calendar`Date) -> int)private explicit function daysFromTheBeginningOfTheMonth'((unresolved Calendar`Date) -> int)private explicit function daysFromTheBeginningOfTheMonthAsReal'((unresolved Calendar`Date) -> real)private explicit function monthAux'((unresolved Calendar`Date) -> int)private explicit function yyyymmddModifyAux'((unresolved Calendar`Date) -> real)private explicit function yearAux'((unresolved Calendar`Date) -> int)public explicit function getVernalEquinoxOnGMT'(int -> (unresolved Calendar`Date))public explicit function getSummerSolsticeOnGMT'(int -> (unresolved Calendar`Date))public explicit function getAutumnalEquinoxOnGMT'(int -> (unresolved Calendar`Date))public explicit function getWinterSolsticeOnGMT'(int -> (unresolved Calendar`Date))public explicit function getVernalEquinox'(int -> (unresolved Calendar`Date))public explicit function getSummerSolstice'(int -> (unresolved Calendar`Date))public explicit function getAutumnalEquinox'(int -> (unresolved Calendar`Date))public explicit function getWinterSolstice'(int -> (unresolved Calendar`Date))public explicit function dateAdding'((unresolved Calendar`Date) * int -> (unresolved Calendar`Date))public explicit function diffOfDates'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> int)public explicit function dateSubtracting'((unresolved Calendar`Date) * int -> (unresolved Calendar`Date))public explicit function mjd2Jd'(real -> real)public explicit function julianDate2ModifiedJulianDate'(real -> real)public explicit function getRegularDate'(int * int * int -> (unresolved Calendar`Date))public explicit function getRegularMonth'(int * int -> (int * int))public explicit function date2Year'(int * int * int -> real)public explicit function date2Str'((unresolved Calendar`Date) +> seq of (char))public explicit function convertDateFromString'(seq of (char) +> [(unresolved Calendar`Date)])public explicit function getSetOfDayOffBetweenDates'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> set of ((unresolved Calendar`Date)))public explicit function getDayOffsExceptSunday'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> int)public explicit function getTheNumberOfDayOff'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> int)public explicit function getTheNumberOfDayOffExceptStartDate'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> int)private explicit function getSetOfNotSundayDayOff'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> set of ((unresolved Calendar`Date)))public explicit function getDayOffsAndSunday'((unresolved Calendar`Date) * (unresolved Calendar`Date) -> set of ((unresolved Calendar`Date)))public explicit function getFutureWeekday'((unresolved Calendar`Date) -> (unresolved Calendar`Date))private explicit function getFutureWeekdayMeasure'((unresolved Calendar`Date) +> nat)public explicit function getPastWeekday'((unresolved Calendar`Date) -> (unresolved Calendar`Date))private explicit function getPastWeekdaymeasure'((unresolved Calendar`Date) +> nat)public explicit function addWeekday'((unresolved Calendar`Date) * int -> (unresolved Calendar`Date))public explicit function addWeekdayAux'((unresolved Calendar`Date) * int -> (unresolved Calendar`Date))private explicit function restOfNumberOfDay'((unresolved Calendar`Date) * int +> nat)public explicit function subtractWeekday'((unresolved Calendar`Date) * int -> (unresolved Calendar`Date))public explicit function subtractWeekdayAux'((unresolved Calendar`Date) * int -> (unresolved Calendar`Date))public explicit function isDayOff'((unresolved Calendar`Date) -> bool)public explicit function isSundayOrDayoff'((unresolved Calendar`Date) -> bool)public explicit function isInDateSet'((unresolved Calendar`Date) * set of ((unresolved Calendar`Date)) -> bool)public explicit operation modifiedJulianDate2Date'(real ==> (unresolved Calendar`Date))public explicit operation getDateFrom_yyyy_mm_dd'(int * int * int ==> (unresolved Calendar`Date))public explicit operation getDateFromString'(seq of (char) ==> ((unresolved Calendar`Date) | bool))public explicit operation getDateInStandardTime'((unresolved Calendar`Date) ==> (unresolved Calendar`Date))public explicit operation getDayOfTheWeekInYear'(int * (unresolved Calendar`NameOfDayOfTheWeek) ==> set of ((unresolved Calendar`Date)))public explicit operation getDifferenceWithGMT'(() ==> real)public explicit operation setDifferenceWithGMT'((real) ==> ())public explicit operation setTheSetOfDayOffs'(int ==> ())public explicit operation getSetOfDayOff'(int ==> set of ((unresolved Calendar`Date)))public explicit operation readToday'(seq of (char) ==> [(unresolved Calendar`Date)])public explicit operation today'(() ==> (unresolved Calendar`Date))public explicit operation readFromFiletoday'(seq of (char) ==> (unresolved Calendar`Date))public explicit operation setToday'((unresolved Calendar`Date) ==> ())public explicit operation todayOnBusiness'(() ==> (unresolved Calendar`Date))public explicit operation setTodayOnBusiness'((unresolved Calendar`Date) ==> ())public explicit operation todayOnCompany'(seq of (char) ==> (unresolved Calendar`Date))public explicit operation setTodayOnCompany'(seq of (char) * (unresolved Calendar`Date) ==> ())end Calendarclass SBCalendarT is subclass of TestDriverprivate explicit function tests'(() -> seq of ((unresolved SBCalendarT`TestCase)))end SBCalendarTclass SBCalendarT01 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SBCalendarT01class SBCalendarT02 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SBCalendarT02class SBCalendarT03 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SBCalendarT03class SBCalendarT04 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SBCalendarT04class SBCalendarT05 is subclass of TestCase, CalendarDefinitionprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SBCalendarT05class SBCalendarT06 is subclass of TestCaseprotected explicit operation test'(() ==> bool)protected explicit operation setUp'(() ==> ())protected explicit operation tearDown'(() ==> ())end SBCalendarT06class FMapstatic public explicit function Get'(map (@T1) to (@T2) -> (@T1 -> [@T2]))static public explicit function Contains'(map (@T1) to (@T2) -> (@T2 -> bool))static public explicit function ContainsKey'(map (@T1) to (@T2) -> (@T1 -> bool))end FMapclass Termstatic private value Rcsid'?private instance variable startTime'[(unresolved Term`Time)]private instance variable endTime'[(unresolved Term`Time)]static public explicit function isInThePeriod'((unresolved Term`Time) * (unresolved Term`Term) -> bool)public explicit function EQ'((unresolved Term`Term) -> bool)public explicit operation Term'([(unresolved Term`Time)] * [(unresolved Term`Time)] ==> (unresolved Term`Term))end Termclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval'(@p -> bool)static public explicit function fwriteval'(seq1 of (char) * @p * (unresolved IO`filedirective) -> bool)static public explicit function freadval'(seq1 of (char) -> (bool * [@p]))public explicit operation echo'(seq of (char) ==> bool)public explicit operation fecho'(seq of (char) * seq of (char) * [(unresolved IO`filedirective)] ==> bool)public explicit operation ferror'(() ==> seq of (char))static public explicit operation print'(? ==> ())static public explicit operation println'(? ==> ())static public explicit operation printf'(seq of (char) * seq of (?) ==> ())end IOclass Hashtable is subclass of CommonDefinitionstatic public type Contents'Contentsstatic public type Bucket'Bucketprivate instance variable sBucket'(unresolved Hashtable`Bucket)public explicit operation Hashtable'(() ==> (unresolved Hashtable`Hashtable))public explicit operation Hashtable'((unresolved Hashtable`Contents) ==> (unresolved Hashtable`Hashtable))public explicit operation clear'(() ==> ())public explicit operation getBuckets'(() ==> (unresolved Hashtable`Bucket))public explicit operation setBuckets'((unresolved Hashtable`Bucket) ==> ())public explicit operation keySet'(() ==> set of ((unresolved Hashtable`Object)))public explicit operation put'((unresolved Hashtable`Object) * (unresolved Hashtable`Object) ==> ())public explicit operation putAll'((unresolved Hashtable`Contents) ==> ())public explicit operation get'((unresolved Hashtable`Object) ==> [(unresolved Hashtable`Object)])public explicit operation remove'((unresolved Hashtable`Object) ==> [(unresolved Hashtable`Object)])public explicit operation valueSet'(() ==> set of ((unresolved Hashtable`Object)))public explicit function size'(() -> nat)public explicit function isEmpty'(() -> bool)public explicit function contains'((unresolved Hashtable`Object) -> bool)public explicit function containsKey'((unresolved Hashtable`Object) -> bool)static public explicit function Put'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> (@T1 -> (@T2 -> (map (@T1) to ((map (@T1) to (@T2))))))))static public explicit function PutAll'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> ((map (@T1) to (@T2)) -> (map (@T1) to ((map (@T1) to (@T2)))))))static public explicit function PutAllAux'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> ((map (@T1) to (@T2)) -> (set of (@T1) -> (map (@T1) to ((map (@T1) to (@T2))))))))static public explicit function Get'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> (@T1 -> [@T2])))static public explicit function Remove'((map (@T1) to ((map (@T1) to (@T2)))) -> (((@T1 -> @T1)) -> (@T1 -> (map (@T1) to ((map (@T1) to (@T2)))))))static public explicit function Clear'(() -> (map (@T1) to ((map (@T1) to (@T2)))))static public explicit function KeySet'((map (@T1) to ((map (@T1) to (@T2)))) -> set of (@T1))static public explicit function ValueSet'((map (@T1) to ((map (@T1) to (@T2)))) -> set of (@T2))static public explicit function Size'((map (@T1) to ((map (@T1) to (@T2)))) -> nat)static public explicit function IsEmpty'((map (@T1) to ((map (@T1) to (@T2)))) -> bool)static public explicit function Contains'((map (@T1) to ((map (@T1) to (@T2)))) -> (@T2 -> bool))static public explicit function ContainsKey'((map (@T1) to ((map (@T1) to (@T2)))) -> (@T1 -> bool))end Hashtableclass String is subclass of Sequencestatic public explicit function asInteger'(seq of (char) -> int)static private explicit function AsIntegerAux'(seq of (char) -> (int -> int))static private explicit function length'([seq of (char)] +> nat)static public explicit function isDigits'(seq of (char) -> bool)static public explicit function isSpace'([seq of (char)] -> bool)static public explicit function LT'(seq of (char) * seq of (char) -> bool)static public explicit function LT2'(seq of (char) -> (seq of (char) -> bool))static public explicit function LE'(seq of (char) * seq of (char) -> bool)static public explicit function LE2'(seq of (char) -> (seq of (char) -> bool))static public explicit function GT'(seq of (char) * seq of (char) -> bool)static public explicit function GT2'(seq of (char) -> (seq of (char) -> bool))static public explicit function GE'(seq of (char) * seq of (char) -> bool)static public explicit function GE2'(seq of (char) -> (seq of (char) -> bool))static public explicit function Index'(char -> (seq of (char) -> int))static public explicit function indexAll'(seq of (char) * char -> set of (int))static public explicit function IndexAll2'(char -> (seq of (char) -> set of (int)))static public explicit function isInclude'(seq of (char) -> (seq of (char) -> bool))static public explicit function subStr'(seq1 of (char) * nat * nat -> seq of (char))static public explicit function SubStr'(nat -> (nat -> (seq1 of (char) -> seq of (char))))static public explicit operation index'(seq of (char) * char ==> int)static public explicit operation subStrFill'(seq of (char) * nat * nat * char ==> seq of (char))end Stringclass AllTpublic explicit operation run'(() ==> bool)end AllTclass Setstatic public explicit function asSequence'(set of (@T) -> seq of (@T))static private explicit function cardinality'(set of (@T) +> nat)static public explicit function hasSameElems'((seq of (@T)) * (set of (@T)) -> bool)static public explicit function Combinations'(nat1 -> (set of (@T) -> set of (set of (@T))))static public explicit function fmap'(((@T1 -> @T2)) -> (set of (@T1) -> set of (@T2)))static public explicit function Sum'(set of (@T) -> @T)static private explicit function SumAux'(set of (@T) -> (@T -> @T))end Set
