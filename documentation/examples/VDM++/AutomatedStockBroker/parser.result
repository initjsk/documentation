RESULT:result:-1:-1,-1:class MATHstatic public explicit function sin'(real +> real)static public explicit function cos'(real +> real)static public explicit function tan'(real -> real)static public explicit function cot'(real -> real)static public explicit function asin'(real -> real)static public explicit function acos'(real -> real)static public explicit function atan'(real +> real)static public explicit function acot'(real +> real)static public explicit function sqrt'(real -> real)static public explicit function pi_f'(() +> real)static public explicit operation srand'(int ==> ())static public explicit operation rand'(int ==> int)static public explicit operation srand2'(int ==> int)static public explicit function exp'(real +> real)static public explicit function ln'(real -> real)static public explicit function log'(real -> real)static public explicit function fac'(nat -> nat1)static public value pi'?end MATHclass GLOBALstatic public type String'Stringstatic public type EventType'EventTypestatic public type StockState'StockStatestatic public type Event'Eventstatic public type Region'Regionstatic public type StockValue'StockValuestatic public type StockIdentifier'StockIdentifierstatic public type ActionType'ActionTypestatic public type ActionTrigger'ActionTriggerstatic public type StockRecord'StockRecordstatic public type ActionEvent'ActionEventstatic public value testValues'map ((unresolved GLOBAL`StockIdentifier)) to (seq of ((unresolved GLOBAL`Event)))end GLOBALclass StockMarket is subclass of GLOBALprivate instance variable stocks'map ((unresolved StockMarket`StockIdentifier)) to ((unresolved StockMarket`Stock))public explicit operation UpdateStocks'(() ==> ())public explicit operation AddStock'(((unresolved StockMarket`Stock)) ==> ())public explicit operation RemoveStock'(((unresolved StockMarket`Stock)) ==> ())public explicit operation GetStock'(((unresolved StockMarket`StockIdentifier)) ==> (unresolved StockMarket`Stock))public explicit operation GetStockNames'(() ==> set of ((unresolved StockMarket`StockIdentifier)))end StockMarketclass StockWatcher is subclass of GLOBALprivate instance variable eventHistory'seq of ((unresolved StockWatcher`Event))private instance variable stockRecord'(unresolved StockWatcher`StockRecord)private instance variable sm'[(unresolved StockWatcher`StockMarket)]private instance variable currentlyTriggeredAction'[(unresolved StockWatcher`ActionType)]private invariant inv_StockWatcher'boolpublic explicit operation StockWatcher'((unresolved StockWatcher`StockRecord) * seq of ((unresolved StockWatcher`Event)) ==> (unresolved StockWatcher`StockWatcher))public explicit operation StockWatcher'((unresolved StockWatcher`StockRecord) ==> (unresolved StockWatcher`StockWatcher))private explicit operation UpdateEvents'(nat ==> ())private explicit operation UpdateAction'(nat ==> ())public explicit operation ObserveStock'(nat ==> ())public explicit operation updateStockRecord'((unresolved StockWatcher`StockRecord) ==> ())public explicit operation GetStockValue'(nat ==> (unresolved StockWatcher`StockValue))public explicit operation GetTriggeredAction'(() ==> [(unresolved StockWatcher`ActionType)])private explicit function NoActiveTriggerInNoActionRegion'((unresolved StockWatcher`StockValue) * (unresolved StockWatcher`Region) * [(unresolved StockWatcher`ActionType)] -> bool)private explicit function IsInRegion'((unresolved StockWatcher`StockValue) * (unresolved StockWatcher`Region) -> bool)private explicit function IsPeak'(seq of ((unresolved StockWatcher`StockValue)) -> bool)private explicit function IsValley'(seq of ((unresolved StockWatcher`StockValue)) -> bool)private explicit function FindLowestIndexFromTime'(nat * seq of ((unresolved StockWatcher`Event)) -> nat1)public explicit function IsActionTriggeredAtTime'(nat * (unresolved StockWatcher`ActionTrigger) * seq of ((unresolved StockWatcher`Event)) -> bool)end StockWatcherclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval'(@p -> bool)static public explicit function fwriteval'(seq1 of (char) * @p * (unresolved IO`filedirective) -> bool)static public explicit function freadval'(seq1 of (char) -> (bool * [@p]))public explicit operation echo'(seq of (char) ==> bool)public explicit operation fecho'(seq of (char) * seq of (char) * [(unresolved IO`filedirective)] ==> bool)public explicit operation ferror'(() ==> seq of (char))static public explicit operation print'(? ==> ())static public explicit operation println'(? ==> ())static public explicit operation printf'(seq of (char) * seq of (?) ==> ())end IOclass AutomatedStockBroker is subclass of GLOBALprivate instance variable stocks'seq of ((unresolved AutomatedStockBroker`StockRecord))private instance variable stockWatchers'map ((unresolved AutomatedStockBroker`StockIdentifier)) to ((unresolved AutomatedStockBroker`StockWatcher))private instance variable actionLog'seq of ((unresolved AutomatedStockBroker`ActionEvent))private instance variable balance'intprivate invariant inv_AutomatedStockBroker'boolprivate invariant inv_AutomatedStockBroker'boolprivate invariant inv_AutomatedStockBroker'boolprivate invariant inv_AutomatedStockBroker'boolpublic explicit operation AutomatedStockBroker'(nat ==> (unresolved AutomatedStockBroker`AutomatedStockBroker))public explicit operation AddStock'((unresolved AutomatedStockBroker`StockRecord) * nat1 ==> ())public explicit operation GetActionLog'(() ==> seq of ((unresolved AutomatedStockBroker`ActionEvent)))public explicit operation GetStocksWithActiveActionTrigger'((unresolved AutomatedStockBroker`StockState) ==> seq of ((unresolved AutomatedStockBroker`StockRecord)))private explicit operation FindValidBuy'(seq of ((unresolved AutomatedStockBroker`StockRecord)) * nat ==> [(unresolved AutomatedStockBroker`StockRecord)])private explicit operation FindValidSell'(seq of ((unresolved AutomatedStockBroker`StockRecord)) * nat ==> (unresolved AutomatedStockBroker`StockRecord))private explicit operation PerformBuy'((unresolved AutomatedStockBroker`StockRecord) * nat ==> ())private explicit operation PerformSell'((unresolved AutomatedStockBroker`StockRecord) * nat ==> ())private explicit operation ObserveAllStocks'(nat ==> ())public explicit operation Step'(nat ==> ())private explicit function IsGTAll'(int * set of (int) -> bool)private explicit function CanAfford'((unresolved AutomatedStockBroker`StockRecord) * nat -> bool)private explicit function MaxOneOfEachActionTypePerTime'(seq of ((unresolved AutomatedStockBroker`ActionEvent)) -> bool)end AutomatedStockBrokerclass World is subclass of GLOBALstatic private value simTime'natstatic private value actionsLimit'natstatic private value startCash'natstatic public value simulate'boolstatic public instance variable timerRef'(unresolved World`Timer)static public instance variable stockMarket'(unresolved World`StockMarket)private instance variable asb'(unresolved World`AutomatedStockBroker)public explicit operation isFinished'(() ==> bool)public explicit operation Run'(() ==> ())public explicit function FindSmallestSeqLen'(map ((unresolved World`String)) to (seq of ((unresolved World`Event))) -> nat)end Worldclass Stock is subclass of GLOBALstatic public type RateOfChange'RateOfChangeprivate instance variable name'(unresolved Stock`StockIdentifier)private instance variable valueHistory'seq of ((unresolved Stock`StockValue))private instance variable currentRateOfChange'[(unresolved Stock`RateOfChange)]public explicit operation Stock'((unresolved Stock`StockIdentifier) * (unresolved Stock`StockValue) ==> (unresolved Stock`Stock))public explicit operation UpdateStock'(() ==> ())public explicit operation GetName'(() ==> (unresolved Stock`StockIdentifier))public explicit operation GetCurrentValue'(() ==> (unresolved Stock`StockValue))public explicit operation GetValueHistory'(() ==> seq of ((unresolved Stock`StockValue)))private explicit function InitialRateOfChange'(((unresolved Stock`StockValue)) -> (unresolved Stock`RateOfChange))private explicit function NextRateOfChange'((unresolved Stock`RateOfChange) * (unresolved Stock`StockValue) -> (unresolved Stock`RateOfChange))private explicit function MakelistFromSet'(set of ((unresolved Stock`RateOfChange)) -> seq of ((unresolved Stock`RateOfChange)))end Stockclass Timerprivate instance variable currentTime'natstatic private value stepLength'natpublic explicit operation StepTime'(() ==> ())public explicit operation GetTime'(() ==> nat)end Timer
