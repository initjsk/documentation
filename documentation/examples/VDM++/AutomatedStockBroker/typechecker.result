WARNING:GLOBAL.vdmpp:5000:32,31:Definition 'p4' not used.
WARNING:GLOBAL.vdmpp:5000:32,28:Definition 'p3' not used.
WARNING:GLOBAL.vdmpp:5000:32,34:Definition 'p5' not used.
WARNING:GLOBAL.vdmpp:5000:32,22:Definition 'p1' not used.
WARNING:Stock.vdmpp:5012:84,18:Recursive function has no measure.
RESULT:result:-1:-1,-1:class Stock is subclass of GLOBALstatic public type RateOfChange'RateOfChangeprivate instance variable name'StockIdentifierprivate instance variable valueHistory'seq of (StockValue)private instance variable currentRateOfChange'[RateOfChange]public explicit operation Stock(StockIdentifier, StockValue)'(StockIdentifier * StockValue ==> Stock)public explicit operation UpdateStock()'(() ==> ())public explicit operation GetName()'(() ==> StockIdentifier)public explicit operation GetCurrentValue()'(() ==> StockValue)public explicit operation GetValueHistory()'(() ==> seq of (StockValue))private explicit function InitialRateOfChange(StockValue)'(StockValue -> RateOfChange)private explicit function NextRateOfChange(RateOfChange, StockValue)'(RateOfChange * StockValue -> RateOfChange)private explicit function MakelistFromSet(set of (RateOfChange))'(set of (RateOfChange) -> seq of (RateOfChange))end Stockclass StockMarket is subclass of GLOBALprivate instance variable stocks'map (StockIdentifier) to (Stock)public explicit operation UpdateStocks()'(() ==> ())public explicit operation AddStock(Stock)'(Stock ==> ())public explicit operation RemoveStock(Stock)'(Stock ==> ())public explicit operation GetStock(StockIdentifier)'(StockIdentifier ==> Stock)public explicit operation GetStockNames()'(() ==> set of (StockIdentifier))end StockMarketclass AutomatedStockBroker is subclass of GLOBALprivate instance variable stocks'seq of (StockRecord)private instance variable stockWatchers'map (StockIdentifier) to (StockWatcher)private instance variable actionLog'seq of (ActionEvent)private instance variable balance'intprivate invariant inv_AutomatedStockBroker'boolprivate invariant inv_AutomatedStockBroker'boolprivate invariant inv_AutomatedStockBroker'boolprivate invariant inv_AutomatedStockBroker'boolpublic explicit operation AutomatedStockBroker(nat)'(nat ==> AutomatedStockBroker)public explicit operation AddStock(StockRecord, nat1)'(StockRecord * nat1 ==> ())public explicit operation GetActionLog()'(() ==> seq of (ActionEvent))public explicit operation GetStocksWithActiveActionTrigger(StockState)'(StockState ==> seq of (StockRecord))private explicit operation FindValidBuy(seq of (StockRecord), nat)'(seq of (StockRecord) * nat ==> [StockRecord])private explicit operation FindValidSell(seq of (StockRecord), nat)'(seq of (StockRecord) * nat ==> StockRecord)private explicit operation PerformBuy(StockRecord, nat)'(StockRecord * nat ==> ())private explicit operation PerformSell(StockRecord, nat)'(StockRecord * nat ==> ())private explicit operation ObserveAllStocks(nat)'(nat ==> ())public explicit operation Step(nat)'(nat ==> ())private explicit function IsGTAll(int, set of (int))'(int * set of (int) -> bool)private explicit function CanAfford(StockRecord, nat)'(StockRecord * nat -> bool)private explicit function MaxOneOfEachActionTypePerTime(seq of (ActionEvent))'(seq of (ActionEvent) -> bool)end AutomatedStockBrokerclass GLOBALstatic public type String'Stringstatic public type EventType'EventTypestatic public type StockState'StockStatestatic public type Event'Eventstatic public type Region'Regionstatic public type StockValue'StockValuestatic public type StockIdentifier'StockIdentifierstatic public type ActionType'ActionTypestatic public type ActionTrigger'ActionTriggerstatic public type StockRecord'StockRecordstatic public type ActionEvent'ActionEventstatic public value testValues'map (StockIdentifier) to (seq of (Event))end GLOBALclass Timerprivate instance variable currentTime'natstatic private value stepLength'natpublic explicit operation StepTime()'(() ==> ())public explicit operation GetTime()'(() ==> nat)end Timerclass MATHstatic public explicit function sin(real)'(real +> real)static public explicit function cos(real)'(real +> real)static public explicit function tan(real)'(real -> real)static public explicit function cot(real)'(real -> real)static public explicit function asin(real)'(real -> real)static public explicit function acos(real)'(real -> real)static public explicit function atan(real)'(real +> real)static public explicit function acot(real)'(real +> real)static public explicit function sqrt(real)'(real -> real)static public explicit function pi_f()'(() +> real)static public explicit operation srand(int)'(int ==> ())static public explicit operation rand(int)'(int ==> int)static public explicit operation srand2(int)'(int ==> int)static public explicit function exp(real)'(real +> real)static public explicit function ln(real)'(real -> real)static public explicit function log(real)'(real -> real)static public explicit function fac(nat)'(nat -> nat1)static public value pi'realend MATHclass StockWatcher is subclass of GLOBALprivate instance variable eventHistory'seq of (Event)private instance variable stockRecord'StockRecordprivate instance variable sm'[StockMarket]private instance variable currentlyTriggeredAction'[ActionType]private invariant inv_StockWatcher'boolpublic explicit operation StockWatcher(StockRecord, seq of (Event))'(StockRecord * seq of (Event) ==> StockWatcher)public explicit operation StockWatcher(StockRecord)'(StockRecord ==> StockWatcher)private explicit operation UpdateEvents(nat)'(nat ==> ())private explicit operation UpdateAction(nat)'(nat ==> ())public explicit operation ObserveStock(nat)'(nat ==> ())public explicit operation updateStockRecord(StockRecord)'(StockRecord ==> ())public explicit operation GetStockValue(nat)'(nat ==> StockValue)public explicit operation GetTriggeredAction()'(() ==> [ActionType])private explicit function NoActiveTriggerInNoActionRegion(StockValue, Region, [ActionType])'(StockValue * Region * [ActionType] -> bool)private explicit function IsInRegion(StockValue, Region)'(StockValue * Region -> bool)private explicit function IsPeak(seq of (StockValue))'(seq of (StockValue) -> bool)private explicit function IsValley(seq of (StockValue))'(seq of (StockValue) -> bool)private explicit function FindLowestIndexFromTime(nat, seq of (Event))'(nat * seq of (Event) -> nat1)public explicit function IsActionTriggeredAtTime(nat, ActionTrigger, seq of (Event))'(nat * ActionTrigger * seq of (Event) -> bool)end StockWatcherclass World is subclass of GLOBALstatic private value simTime'natstatic private value actionsLimit'natstatic private value startCash'natstatic public value simulate'boolstatic public instance variable timerRef'Timerstatic public instance variable stockMarket'StockMarketprivate instance variable asb'AutomatedStockBrokerpublic explicit operation isFinished()'(() ==> bool)public explicit operation Run()'(() ==> ())public explicit function FindSmallestSeqLen(map (String) to (seq of (Event)))'(map (String) to (seq of (Event)) -> nat)end Worldclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IO
