RESULT:result:-1:-1,-1:Proof Obligation 1' (Unproved)DecreaseBal(nat)' subtype obligation in 'Purse' (../../documentation/examples/VDM++/ElectronicPurse/Purse.vdmpp) at line 19'22(balance - sum) >= 0Proof Obligation 2' (Unproved)Transfer(CardId, CardId, nat)' map apply obligation in 'System' (../../documentation/examples/VDM++/ElectronicPurse/System.vdmpp) at line 25'5(({fromId, toId} subset (dom Purses)) =>  ((fromId <> toId) =>    fromId in set dom Purses))Proof Obligation 3' (Unproved)System(set of (Purse))' map set compatible obligation in 'System' (../../documentation/examples/VDM++/ElectronicPurse/System.vdmpp) at line 29'13forall m1, m2 in set {{(p.GetCardNo)() |-> p} | p in set PurseSet} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 4' (Unproved)System(set of (Purse))' state invariant obligation in 'System' (../../documentation/examples/VDM++/ElectronicPurse/System.vdmpp) at line 27'8-- After System(set of (Purse)) constructor body(forall p in set (dom Purses) & ((Purses(p).GetCardNo)() = p))Proof Obligation 5' (Trivial by <not x = y => x <> y>)TotalSum(seq of (Transaction)), tx' non-empty sequence obligation in 'System' (../../documentation/examples/VDM++/ElectronicPurse/System.vdmpp) at line 42'20(forall tseq'seq of (Transaction) &  (not (tseq = []) =>    tseq <> []))Proof Obligation 6' (Unproved)TotalSum(seq of (Transaction))' recursive function obligation in 'System' (../../documentation/examples/VDM++/ElectronicPurse/System.vdmpp) at line 38'1(forall tseq'seq of (Transaction) &  (not (tseq = []) =>    (let tx'Transaction = (hd tseq) in      Len(tseq) > Len((tl tseq)))))Proof Obligation 7' (Unproved)TotalSum(seq of (Transaction))' non-empty sequence obligation in 'System' (../../documentation/examples/VDM++/ElectronicPurse/System.vdmpp) at line 44'31(forall tseq'seq of (Transaction) &  (not (tseq = []) =>    (let tx'Transaction = (hd tseq) in      tseq <> [])))
