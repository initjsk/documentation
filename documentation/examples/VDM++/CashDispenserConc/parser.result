RESULT:result:-1:-1,-1:class Tillprivate instance variable curCard'[(unresolved Till`Card)]private instance variable cardOk'boolprivate instance variable retainedCards'set of ((unresolved Till`Card))private instance variable resource'(unresolved Till`LocalResource)private invariant inv_Till'boolpublic explicit operation Till'((unresolved Till`LocalResource) ==> (unresolved Till`Till))public explicit operation Set'((unresolved Till`LocalResource) ==> (unresolved Till`Till))public explicit operation InsertCard'((unresolved Till`Card) ==> ())public explicit operation Validate'((unresolved Card`PinCode) ==> (<Fail> | <PinNotOk> | <PinOk> | <Retained>))public explicit operation ReturnCard'(() ==> ())public explicit operation GetBalance'(() ==> (<Fail> | [nat]))public explicit operation MakeWithdrawal'(nat ==> (<Fail> | bool))public explicit operation RequestStatement'(() ==> (<Fail> | bool))public explicit operation IsLegalCard'(() ==> (<Fail> | bool))public explicit operation CardValidated'(() ==> bool)public explicit operation CardInside'(() ==> bool)private explicit function Encode'((unresolved Card`PinCode) +> (unresolved Card`Code))end Tillclass LocalTillprivate instance variable c'(unresolved LocalTill`Channel)private instance variable resource'(unresolved LocalTill`CentralResource)private instance variable enabled'boolprotected thread null'?private explicit operation ProcessRequest'((unresolved Channel`Request) ==> ())public explicit operation LocalTill'((unresolved LocalTill`Channel) * (unresolved LocalTill`CentralResource) ==> (unresolved LocalTill`LocalTill))public explicit operation Fail'(() ==> ())public explicit operation Repair'((unresolved LocalTill`Channel) ==> ())end LocalTillclass Timerprivate instance variable curTime'natprivate instance variable active'boolpublic explicit operation Start'(() ==> ())public explicit operation Stop'(() ==> ())public explicit operation GetTime'(() ==> nat)private explicit operation IncTime'(() ==> ())protected thread null'?end Timerclass LocalResourceprivate instance variable c'(unresolved LocalResource`Channel)public explicit operation LocalResource'((unresolved LocalResource`Channel) ==> (unresolved LocalResource`LocalResource))public explicit operation GetBalance'((unresolved Account`AccountId) ==> (<Fail> | [nat]))private explicit operation Wait'((unresolved Channel`Command) ==> ((unresolved Channel`RespData) | <Fail>))public explicit operation Withdrawal'((unresolved Account`AccountId) * (unresolved Card`CardId) * nat ==> (<Fail> | bool))public explicit operation PostStatement'((unresolved Account`AccountId) * (unresolved Card`CardId) ==> (<Fail> | bool))public explicit operation IsLegalCard'((unresolved Account`AccountId) * (unresolved Card`CardId) ==> (<Fail> | bool))public explicit operation NumberOfTriesExceeded'((unresolved Card`CardId) ==> (<Fail> | bool))public explicit operation ResetNumberOfTries'((unresolved Card`CardId) ==> [<Fail>])public explicit operation IncrNumberOfTries'((unresolved Card`CardId) ==> [<Fail>])end LocalResourceclass Letterboxprivate instance variable statements'seq of ((unresolved Letterbox`Letter))public explicit operation PostStatement'((unresolved Letterbox`Letter) ==> ())private explicit operation GetLastStatement'(() ==> (unresolved Letterbox`Letter))end Letterboxclass Channelprivate instance variable req'[(unresolved Channel`Request)]private instance variable resp'[(unresolved Channel`Response)]private instance variable timer'(unresolved Channel`Timer)private instance variable curTime'natstatic private value timeout'?static public type Request'Requeststatic public type Command'Commandstatic public type ReqData'ReqDatastatic public type CardId'CardIdstatic public type AccountId'AccountIdstatic public type Amount'Amountstatic public type Response'Responsestatic public type RespData'RespDatapublic explicit operation SendRequest'((unresolved Channel`Request) ==> ())public explicit operation ReceiveRequest'(() ==> (unresolved Channel`Request))public explicit operation SendResponse'((unresolved Channel`Response) ==> ())public explicit operation ReceiveResponse'(() ==> [(unresolved Channel`Response)])public explicit operation Wait'(() ==> ())private explicit operation CheckTime'(() ==> ())private explicit function AllReceived'(nat * nat * nat * nat -> bool)private permission predicate 'boolprivate permission predicate 'boolprivate permission predicate 'boolprotected thread null'?end Channelclass Cardholderstatic public type Address'Addressstatic public type Name'Nameprivate instance variable name'(unresolved Cardholder`Name)private instance variable address'(unresolved Cardholder`Address)public explicit operation Cardholder'((unresolved Cardholder`Name) * (unresolved Cardholder`Address) ==> (unresolved Cardholder`Cardholder))public explicit operation GetName'(() ==> (unresolved Cardholder`Name))public explicit operation GetAddress'(() ==> (unresolved Cardholder`Address))end Cardholderclass Clockstatic public type Date'Dateprivate instance variable date'(unresolved Clock`Date)public explicit operation SetDate'((unresolved Clock`Date) ==> ())public explicit operation GetDate'(() ==> (unresolved Clock`Date))end Clockclass CentralResourceprivate instance variable accounts'map ((unresolved Account`AccountId)) to ((unresolved CentralResource`Account))private instance variable numberOfTries'map ((unresolved Card`CardId)) to (nat)private instance variable illegalCards'set of ((unresolved Card`CardId))private instance variable letterbox'(unresolved CentralResource`Letterbox)private instance variable clock'(unresolved CentralResource`Clock)private invariant inv_CentralResource'boolstatic private value maxNumberOfTries'natpublic explicit operation CentralResource'((unresolved CentralResource`Clock) * (unresolved CentralResource`Letterbox) ==> (unresolved CentralResource`CentralResource))public explicit operation GetBalance'((unresolved Account`AccountId) ==> [nat])public explicit operation Withdrawal'((unresolved Account`AccountId) * (unresolved Card`CardId) * nat ==> bool)public explicit operation PostStatement'((unresolved Account`AccountId) * (unresolved Card`CardId) ==> bool)public explicit operation IsLegalCard'((unresolved Account`AccountId) * (unresolved Card`CardId) ==> bool)public explicit operation NumberOfTriesExceeded'((unresolved Card`CardId) ==> bool)public explicit operation ResetNumberOfTries'((unresolved Card`CardId) ==> ())public explicit operation IncrNumberOfTries'((unresolved Card`CardId) ==> ())public explicit operation AddAccount'((unresolved Account`AccountId) * (unresolved CentralResource`Account) ==> ())public explicit operation AddIllegalCard'((unresolved Card`CardId) ==> ())end CentralResourceclass Mainprivate instance variable ltills'map ((unresolved Main`TillId)) to ((unresolved Main`LocalTill))private instance variable tills'map ((unresolved Main`TillId)) to ((unresolved Main`Till))private instance variable cards'seq of ((unresolved Main`Card))private instance variable resource'(unresolved Main`CentralResource)private instance variable clock'(unresolved Main`Clock)private instance variable letterbox'(unresolved Main`Letterbox)private instance variable mb'(unresolved Main`MessageBuffer)static public type TillId'TillIdstatic private value nat2char'map (nat) to (char)private explicit function tStr'(nat -> seq of (char))private explicit function nat2chars'(nat -> seq of (char))private explicit function nat2string'(nat -> seq of (char))public explicit operation GetTill'((unresolved Main`TillId) ==> (unresolved Main`Till))public explicit operation Main'(() ==> (unresolved Main`Main))private explicit operation SetupTill'(nat * (unresolved Main`Till) ==> (unresolved Main`Till))public explicit operation RepairTill'(nat ==> ())public explicit operation EnterCardAtTill'(nat * nat * nat ==> ())public explicit operation WithdrawalAtTill'(nat * nat ==> ())public explicit operation GetBalanceAtTill'(nat ==> ())public explicit operation Fail'(nat ==> ())public explicit operation ReturnCard'(nat ==> ())private explicit operation Wait'(() ==> ())public explicit operation Run'(() ==> seq of (char))private mutex predicate '?private mutex predicate '?private permission predicate 'boolend Mainclass MessageBufferprivate instance variable data'seq of (char)public explicit operation put'(seq of (char) ==> ())public explicit operation get'(() ==> seq of (char))private mutex predicate '?end MessageBufferclass Userprivate instance variable tillNum'natprivate instance variable cardNum'natprivate instance variable pin'natprivate instance variable m'(unresolved User`Main)public explicit operation User'(nat * nat * nat * (unresolved User`Main) ==> (unresolved User`User))private explicit operation Test1'(() ==> ())protected thread null'?end Userclass Letterprivate instance variable name'(unresolved Cardholder`Name)private instance variable address'(unresolved Cardholder`Address)private instance variable date'(unresolved Clock`Date)private instance variable transactions'seq of ((unresolved Account`Transaction))private instance variable balance'natpublic explicit operation Letter'((unresolved Cardholder`Name) * (unresolved Cardholder`Address) * (unresolved Clock`Date) * seq of ((unresolved Account`Transaction)) * nat ==> (unresolved Letter`Letter))end Letterclass Cardstatic public type CardId'CardIdstatic public type Code'Codestatic public type PinCode'PinCodeprivate instance variable code'(unresolved Card`Code)private instance variable cardId'(unresolved Card`CardId)private instance variable accountId'(unresolved Account`AccountId)public explicit operation Card'((unresolved Card`Code) * (unresolved Card`CardId) * (unresolved Account`AccountId) ==> (unresolved Card`Card))public explicit operation GetCode'(() ==> (unresolved Card`Code))public explicit operation GetAccountId'(() ==> (unresolved Account`AccountId))public explicit operation GetCardId'(() ==> (unresolved Card`CardId))end Cardclass Accountprivate instance variable cards'map ((unresolved Card`CardId)) to ((unresolved Account`Cardholder))private instance variable balance'natprivate instance variable transactions'seq of ((unresolved Account`Transaction))private invariant inv_Account'boolstatic private value dailyLimit'natstatic public type AccountId'AccountIdstatic public type Transaction'Transactionpublic explicit operation Account'(map ((unresolved Card`CardId)) to ((unresolved Account`Cardholder)) * nat ==> (unresolved Account`Account))public explicit operation GetBalance'(() ==> nat)public explicit operation Withdrawal'((unresolved Card`CardId) * nat * (unresolved Clock`Date) ==> bool)public explicit operation MakeStatement'((unresolved Card`CardId) * (unresolved Clock`Date) ==> (unresolved Account`Letter))public explicit operation GetCardIds'(() ==> set of ((unresolved Card`CardId)))private explicit operation AddCard'((unresolved Card`CardId) * (unresolved Account`Cardholder) ==> ())private explicit function TransactionsInvariant'(seq of ((unresolved Account`Transaction)) +> bool)private explicit function DateTotal'((unresolved Clock`Date) * seq of ((unresolved Account`Transaction)) +> nat)private explicit function Sum'(seq of (real) +> real)end Account
