WARNING:Account.vdmpp:5012:106,6:Recursive function has no measure.
WARNING:concur.vdmpp:5012:28,12:Recursive function has no measure.
RESULT:result:-1:-1,-1:class Channelprivate instance variable req'[Request]private instance variable resp'[Response]private instance variable timer'Timerprivate instance variable curTime'natstatic private value timeout'nat1static public type Request'Requeststatic public type Command'Commandstatic public type ReqData'ReqDatastatic public type CardId'CardIdstatic public type AccountId'AccountIdstatic public type Amount'Amountstatic public type Response'Responsestatic public type RespData'RespDatapublic explicit operation SendRequest(Request)'(Request ==> ())public explicit operation ReceiveRequest()'(() ==> Request)public explicit operation SendResponse(Response)'(Response ==> ())public explicit operation ReceiveResponse()'(() ==> [Response])public explicit operation Wait()'(() ==> ())private explicit operation CheckTime()'(() ==> ())private explicit function AllReceived(nat, nat, nat, nat)'(nat * nat * nat * nat -> bool)private permission predicate 'boolprivate permission predicate 'boolprivate permission predicate 'boolprotected thread thread'?end Channelclass Cardstatic public type CardId'CardIdstatic public type Code'Codestatic public type PinCode'PinCodeprivate instance variable code'Codeprivate instance variable cardId'CardIdprivate instance variable accountId'AccountIdpublic explicit operation Card(Code, CardId, AccountId)'(Code * CardId * AccountId ==> Card)public explicit operation GetCode()'(() ==> Code)public explicit operation GetAccountId()'(() ==> AccountId)public explicit operation GetCardId()'(() ==> CardId)end Cardclass Tillprivate instance variable curCard'[Card]private instance variable cardOk'boolprivate instance variable retainedCards'set of (Card)private instance variable resource'LocalResourceprivate invariant inv_Till'boolpublic explicit operation Till(LocalResource)'(LocalResource ==> Till)public explicit operation Set(LocalResource)'(LocalResource ==> Till)public explicit operation InsertCard(Card)'(Card ==> ())public explicit operation Validate(PinCode)'(PinCode ==> (<Fail> | <PinNotOk> | <PinOk> | <Retained>))public explicit operation ReturnCard()'(() ==> ())public explicit operation GetBalance()'(() ==> (<Fail> | [nat]))public explicit operation MakeWithdrawal(nat)'(nat ==> (<Fail> | bool))public explicit operation RequestStatement()'(() ==> (<Fail> | bool))public explicit operation IsLegalCard()'(() ==> (<Fail> | bool))public explicit operation CardValidated()'(() ==> bool)public explicit operation CardInside()'(() ==> bool)private explicit function Encode(PinCode)'(PinCode +> Code)end Tillclass CentralResourceprivate instance variable accounts'map (AccountId) to (Account)private instance variable numberOfTries'map (CardId) to (nat)private instance variable illegalCards'set of (CardId)private instance variable letterbox'Letterboxprivate instance variable clock'Clockprivate invariant inv_CentralResource'boolstatic private value maxNumberOfTries'natpublic explicit operation CentralResource(Clock, Letterbox)'(Clock * Letterbox ==> CentralResource)public explicit operation GetBalance(AccountId)'(AccountId ==> [nat])public explicit operation Withdrawal(AccountId, CardId, nat)'(AccountId * CardId * nat ==> bool)public explicit operation PostStatement(AccountId, CardId)'(AccountId * CardId ==> bool)public explicit operation IsLegalCard(AccountId, CardId)'(AccountId * CardId ==> bool)public explicit operation NumberOfTriesExceeded(CardId)'(CardId ==> bool)public explicit operation ResetNumberOfTries(CardId)'(CardId ==> ())public explicit operation IncrNumberOfTries(CardId)'(CardId ==> ())public explicit operation AddAccount(AccountId, Account)'(AccountId * Account ==> ())public explicit operation AddIllegalCard(CardId)'(CardId ==> ())end CentralResourceclass Accountprivate instance variable cards'map (CardId) to (Cardholder)private instance variable balance'natprivate instance variable transactions'seq of (Transaction)private invariant inv_Account'boolstatic private value dailyLimit'natstatic public type AccountId'AccountIdstatic public type Transaction'Transactionpublic explicit operation Account(map (CardId) to (Cardholder), nat)'(map (CardId) to (Cardholder) * nat ==> Account)public explicit operation GetBalance()'(() ==> nat)public explicit operation Withdrawal(CardId, nat, Date)'(CardId * nat * Date ==> bool)public explicit operation MakeStatement(CardId, Date)'(CardId * Date ==> Letter)public explicit operation GetCardIds()'(() ==> set of (CardId))private explicit operation AddCard(CardId, Cardholder)'(CardId * Cardholder ==> ())private explicit function TransactionsInvariant(seq of (Transaction))'(seq of (Transaction) +> bool)private explicit function DateTotal(Date, seq of (Transaction))'(Date * seq of (Transaction) +> nat)private explicit function Sum(seq of (real))'(seq of (real) +> real)end Accountclass LocalResourceprivate instance variable c'Channelpublic explicit operation LocalResource(Channel)'(Channel ==> LocalResource)public explicit operation GetBalance(AccountId)'(AccountId ==> (<Fail> | [nat]))private explicit operation Wait(Command)'(Command ==> (<Fail> | RespData))public explicit operation Withdrawal(AccountId, CardId, nat)'(AccountId * CardId * nat ==> (<Fail> | bool))public explicit operation PostStatement(AccountId, CardId)'(AccountId * CardId ==> (<Fail> | bool))public explicit operation IsLegalCard(AccountId, CardId)'(AccountId * CardId ==> (<Fail> | bool))public explicit operation NumberOfTriesExceeded(CardId)'(CardId ==> (<Fail> | bool))public explicit operation ResetNumberOfTries(CardId)'(CardId ==> [<Fail>])public explicit operation IncrNumberOfTries(CardId)'(CardId ==> [<Fail>])end LocalResourceclass Clockstatic public type Date'Dateprivate instance variable date'Datepublic explicit operation SetDate(Date)'(Date ==> ())public explicit operation GetDate()'(() ==> Date)end Clockclass Timerprivate instance variable curTime'natprivate instance variable active'boolpublic explicit operation Start()'(() ==> ())public explicit operation Stop()'(() ==> ())public explicit operation GetTime()'(() ==> nat)private explicit operation IncTime()'(() ==> ())protected thread thread'?end Timerclass Letterboxprivate instance variable statements'seq of (Letter)public explicit operation PostStatement(Letter)'(Letter ==> ())private explicit operation GetLastStatement()'(() ==> Letter)end Letterboxclass Cardholderstatic public type Address'Addressstatic public type Name'Nameprivate instance variable name'Nameprivate instance variable address'Addresspublic explicit operation Cardholder(Name, Address)'(Name * Address ==> Cardholder)public explicit operation GetName()'(() ==> Name)public explicit operation GetAddress()'(() ==> Address)end Cardholderclass Mainprivate instance variable ltills'map (TillId) to (LocalTill)private instance variable tills'map (TillId) to (Till)private instance variable cards'seq of (Card)private instance variable resource'CentralResourceprivate instance variable clock'Clockprivate instance variable letterbox'Letterboxprivate instance variable mb'MessageBufferstatic public type TillId'TillIdstatic private value nat2char'map (nat) to (char)private explicit function tStr(nat)'(nat -> seq of (char))private explicit function nat2chars(nat)'(nat -> seq of (char))private explicit function nat2string(nat)'(nat -> seq of (char))public explicit operation GetTill(TillId)'(TillId ==> Till)public explicit operation Main()'(() ==> Main)private explicit operation SetupTill(nat, Till)'(nat * Till ==> Till)public explicit operation RepairTill(nat)'(nat ==> ())public explicit operation EnterCardAtTill(nat, nat, nat)'(nat * nat * nat ==> ())public explicit operation WithdrawalAtTill(nat, nat)'(nat * nat ==> ())public explicit operation GetBalanceAtTill(nat)'(nat ==> ())public explicit operation Fail(nat)'(nat ==> ())public explicit operation ReturnCard(nat)'(nat ==> ())private explicit operation Wait()'(() ==> ())public explicit operation Run()'(() ==> seq of (char))private mutex predicate '?private mutex predicate '?private permission predicate 'boolend Mainclass MessageBufferprivate instance variable data'seq of (char)public explicit operation put(seq of (char))'(seq of (char) ==> ())public explicit operation get()'(() ==> seq of (char))private mutex predicate '?end MessageBufferclass Userprivate instance variable tillNum'natprivate instance variable cardNum'natprivate instance variable pin'natprivate instance variable m'Mainpublic explicit operation User(nat, nat, nat, Main)'(nat * nat * nat * Main ==> User)private explicit operation Test1()'(() ==> ())protected thread thread'?end Userclass LocalTillprivate instance variable c'Channelprivate instance variable resource'CentralResourceprivate instance variable enabled'boolprotected thread thread'?private explicit operation ProcessRequest(Request)'(Request ==> ())public explicit operation LocalTill(Channel, CentralResource)'(Channel * CentralResource ==> LocalTill)public explicit operation Fail()'(() ==> ())public explicit operation Repair(Channel)'(Channel ==> ())end LocalTillclass Letterprivate instance variable name'Nameprivate instance variable address'Addressprivate instance variable date'Dateprivate instance variable transactions'seq of (Transaction)private instance variable balance'natpublic explicit operation Letter(Name, Address, Date, seq of (Transaction), nat)'(Name * Address * Date * seq of (Transaction) * nat ==> Letter)end Letter
