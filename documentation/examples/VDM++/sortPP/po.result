RESULT:result:-1:-1,-1:Proof Obligation 1' (Unproved)DoSorting(seq of (int)), sorted' recursive function obligation in 'DoSort' (../../documentation/examples/VDM++/sortPP/dosort.vdmpp) at line 14'3(forall l'seq of (int) &  (not (l = []) =>    Len(l) > Len((tl l))))Proof Obligation 2' (Trivial by <not x = y => x <> y>)DoSorting(seq of (int)), sorted' non-empty sequence obligation in 'DoSort' (../../documentation/examples/VDM++/sortPP/dosort.vdmpp) at line 19'34(forall l'seq of (int) &  (not (l = []) =>    l <> []))Proof Obligation 3' (Unproved)DoSorting(seq of (int))' non-empty sequence obligation in 'DoSort' (../../documentation/examples/VDM++/sortPP/dosort.vdmpp) at line 20'26(forall l'seq of (int) &  (not (l = []) =>    (let sorted'seq of (int) = DoSorting((tl l)) in      l <> [])))Proof Obligation 4' (Unproved)InsertSorted(int, seq of (int))' non-empty sequence obligation in 'DoSort' (../../documentation/examples/VDM++/sortPP/dosort.vdmpp) at line 28'26(forall i'int, l'seq of (int) &  (not ((l = [])) = true =>    (not ((i <= (hd l))) = true =>      l <> [])))Proof Obligation 5' (Unproved)InsertSorted(int, seq of (int))' recursive function obligation in 'DoSort' (../../documentation/examples/VDM++/sortPP/dosort.vdmpp) at line 23'3(forall i'int, l'seq of (int) &  (not ((l = [])) = true =>    (not ((i <= (hd l))) = true =>      Len(i, l) > Len(i, (tl l)))))Proof Obligation 6' (Unproved)InsertSorted(int, seq of (int))' non-empty sequence obligation in 'DoSort' (../../documentation/examples/VDM++/sortPP/dosort.vdmpp) at line 28'49(forall i'int, l'seq of (int) &  (not ((l = [])) = true =>    (not ((i <= (hd l))) = true =>      l <> [])))Proof Obligation 7' (Unproved)Sort(seq of (int))' let be st existence obligation in 'ExplSort' (../../documentation/examples/VDM++/sortPP/explsort.vdmpp) at line 14'9exists r in set Permutations(l) & IsOrdered(r)Proof Obligation 8' (Unproved)Permutations(seq of (int))' sequence apply obligation in 'ExplSort' (../../documentation/examples/VDM++/sortPP/explsort.vdmpp) at line 23'27(forall l'seq of (int) &  (not [] = l =>    (not [-] = l =>      (forall i in set (inds l) &        (forall j in set Permutations(RestSeq(l, i)) &          i in set inds l)))))Proof Obligation 9' (Unproved)Permutations(seq of (int))' recursive function obligation in 'ExplSort' (../../documentation/examples/VDM++/sortPP/explsort.vdmpp) at line 19'3(forall l'seq of (int) &  (not [] = l =>    (not [-] = l =>      (forall i in set (inds l) &        Len(l) > Len(RestSeq(l, i))))))Proof Obligation 10' (Unproved)Permutations(seq of (int))' function apply obligation in 'ExplSort' (../../documentation/examples/VDM++/sortPP/explsort.vdmpp) at line 24'48(forall l'seq of (int) &  (not [] = l =>    (not [-] = l =>      (forall i in set (inds l) &        pre_RestSeq(l, i)))))Proof Obligation 11' (Unproved)RestSeq(seq of (int), nat)' post condition obligation in 'ExplSort' (../../documentation/examples/VDM++/sortPP/explsort.vdmpp) at line 29'3(forall l'seq of (int), i'nat &  pre_RestSeq(l, i) => post_RestSeq(l, i, [l(j) | j in set ((inds l) \ {i})]))Proof Obligation 12' (Unproved)RestSeq(seq of (int), nat)' sequence apply obligation in 'ExplSort' (../../documentation/examples/VDM++/sortPP/explsort.vdmpp) at line 31'6(forall l'seq of (int), i'nat & (i in set (inds l)) =>  (forall j in set ((inds l) \ {i}) &    j in set inds l))Proof Obligation 13' (Unproved)IsOrdered(seq of (int))' sequence apply obligation in 'ExplSort' (../../documentation/examples/VDM++/sortPP/explsort.vdmpp) at line 38'41(forall l'seq of (int) &  (forall i, j in set (inds l) &    i in set inds l))Proof Obligation 14' (Unproved)IsOrdered(seq of (int))' sequence apply obligation in 'ExplSort' (../../documentation/examples/VDM++/sortPP/explsort.vdmpp) at line 38'49(forall l'seq of (int) &  (forall i, j in set (inds l) &    j in set inds l))Proof Obligation 15' (Unproved)ImplSorter(seq of (int))' function satisfiability obligation in 'ImplSort' (../../documentation/examples/VDM++/sortPP/implsort.vdmpp) at line 19'10(forall l'seq of (int) &  exists r'seq of (int) & post_ImplSorter(l, r))Proof Obligation 16' (Trivial by <forall x in set s & x in set s>)IsPermutation(seq of (int), seq of (int))' sequence apply obligation in 'ImplSort' (../../documentation/examples/VDM++/sortPP/implsort.vdmpp) at line 25'36(forall l1'seq of (int), l2'seq of (int) &  (forall e in set ((elems l1) union (elems l2)) &    (forall i in set (inds l1) &      i in set inds l1)))Proof Obligation 17' (Trivial by <forall x in set s & x in set s>)IsPermutation(seq of (int), seq of (int))' sequence apply obligation in 'ImplSort' (../../documentation/examples/VDM++/sortPP/implsort.vdmpp) at line 26'36(forall l1'seq of (int), l2'seq of (int) &  (forall e in set ((elems l1) union (elems l2)) &    (forall i in set (inds l2) &      i in set inds l2)))Proof Obligation 18' (Unproved)IsOrdered(seq of (int))' sequence apply obligation in 'ImplSort' (../../documentation/examples/VDM++/sortPP/implsort.vdmpp) at line 30'41(forall l'seq of (int) &  (forall i, j in set (inds l) &    i in set inds l))Proof Obligation 19' (Unproved)IsOrdered(seq of (int))' sequence apply obligation in 'ImplSort' (../../documentation/examples/VDM++/sortPP/implsort.vdmpp) at line 30'49(forall l'seq of (int) &  (forall i, j in set (inds l) &    j in set inds l))Proof Obligation 20' (Unproved)Sort(seq of (int))' subtype obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 9'10is_(RESULT, seq of (int))Proof Obligation 21' (Unproved)MergeSorter(seq of (real))' let be st existence obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 20'24(forall l'seq of (real) &  (not [] = l =>    (not exists [e]'seq of (real) & [e] = l =>      exists l1 ^ l2 in set {l} & ((abs ((len l1) - (len l2))) < 2))))Proof Obligation 22' (Unproved)MergeSorter(seq of (real)), l_l' recursive function obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 15'3(forall l'seq of (real) &  (not [] = l =>    (not exists [e]'seq of (real) & [e] = l =>      (forall l1 ^ l2 in set {l} & ((abs ((len l1) - (len l2))) < 2) =>        Len(l) > Len(l1)))))Proof Obligation 23' (Unproved)MergeSorter(seq of (real)), l_r' recursive function obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 15'3(forall l'seq of (real) &  (not [] = l =>    (not exists [e]'seq of (real) & [e] = l =>      (forall l1 ^ l2 in set {l} & ((abs ((len l1) - (len l2))) < 2) =>        Len(l) > Len(l2)))))Proof Obligation 24' (Unproved)MergeSorter(seq of (real))' function apply obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 24'21(forall l'seq of (real) &  (not [] = l =>    (not exists [e]'seq of (real) & [e] = l =>      (forall l1 ^ l2 in set {l} & ((abs ((len l1) - (len l2))) < 2) =>        (let l_l'seq of (real) = MergeSorter(l1), l_r'seq of (real) = MergeSorter(l2) in          pre_Merge(l_l, l_r))))))Proof Obligation 25' (Unproved)MergeSorter(seq of (real))' subtype obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 24'27(forall l'seq of (real) &  (not [] = l =>    (not exists [e]'seq of (real) & [e] = l =>      (forall l1 ^ l2 in set {l} & ((abs ((len l1) - (len l2))) < 2) =>        (let l_l'seq of (real) = MergeSorter(l1), l_r'seq of (real) = MergeSorter(l2) in          is_(l_l, seq of (int)))))))Proof Obligation 26' (Unproved)MergeSorter(seq of (real))' subtype obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 24'32(forall l'seq of (real) &  (not [] = l =>    (not exists [e]'seq of (real) & [e] = l =>      (forall l1 ^ l2 in set {l} & ((abs ((len l1) - (len l2))) < 2) =>        (let l_l'seq of (real) = MergeSorter(l1), l_r'seq of (real) = MergeSorter(l2) in          is_(l_r, seq of (int)))))))Proof Obligation 27' (Trivial by <forall x in set s & x in set s>)Merge(seq of (int), seq of (int))' sequence apply obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 48'33(forall l1'seq of (int), l2'seq of (int) &  (forall i in set (inds l1) &    i in set inds l1))Proof Obligation 28' (Unproved)Merge(seq of (int), seq of (int))' sequence apply obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 49'33(forall l1'seq of (int), l2'seq of (int) &  (forall i in set (inds l1) &    ((l1(i) >= 0) =>      (forall i in set (inds l2) &        i in set inds l2))))Proof Obligation 29' (Unproved)Merge(seq of (int), seq of (int))' non-empty sequence obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 43'36(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      l1 <> [])))Proof Obligation 30' (Unproved)Merge(seq of (int), seq of (int))' non-empty sequence obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 43'45(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      l2 <> [])))Proof Obligation 31' (Unproved)Merge(seq of (int), seq of (int))' non-empty sequence obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 44'36(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      (((hd l1) <= (hd l2)) =>        l1 <> []))))Proof Obligation 32' (Unproved)Merge(seq of (int), seq of (int))' function apply obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 44'42(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      (((hd l1) <= (hd l2)) =>        pre_Merge((tl l1), l2)))))Proof Obligation 33' (Unproved)Merge(seq of (int), seq of (int))' recursive function obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 39'3(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      (((hd l1) <= (hd l2)) =>        Len(l1, l2) > Len((tl l1), l2)))))Proof Obligation 34' (Unproved)Merge(seq of (int), seq of (int))' non-empty sequence obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 44'51(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      (((hd l1) <= (hd l2)) =>        l1 <> []))))Proof Obligation 35' (Unproved)Merge(seq of (int), seq of (int))' non-empty sequence obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 46'36(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      (not ((hd l1) <= (hd l2)) =>        l2 <> []))))Proof Obligation 36' (Unproved)Merge(seq of (int), seq of (int))' function apply obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 46'42(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      (not ((hd l1) <= (hd l2)) =>        pre_Merge(l1, (tl l2))))))Proof Obligation 37' (Unproved)Merge(seq of (int), seq of (int))' recursive function obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 39'3(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      (not ((hd l1) <= (hd l2)) =>        Len(l1, l2) > Len(l1, (tl l2))))))Proof Obligation 38' (Unproved)Merge(seq of (int), seq of (int))' non-empty sequence obligation in 'MergeSort' (../../documentation/examples/VDM++/sortPP/mergesort.vdmpp) at line 46'55(forall l1'seq of (int), l2'seq of (int) & (forall i in set (inds l1) & ((l1(i) >= 0) and (forall i in set (inds l2) & (l2(i) >= 0)))) =>  (not exists mk_([], l)'(seq of (int) * seq of (int)) & mk_([], l) = mk_(l1, l2) =>    (not exists mk_(l, [])'(seq of (int) * seq of (int)) & mk_(l, []) = mk_(l1, l2) =>      (not ((hd l1) <= (hd l2)) =>        l2 <> []))))
