RESULT:result:-1:-1,-1:class NavigationDecodeTMC is subclass of BasicTaskpublic explicit operation NavigationDecodeTMC'((unresolved NavigationDecodeTMC`EventDispatcher) ==> (unresolved NavigationDecodeTMC`NavigationDecodeTMC))public explicit operation DecodeTMC'(() ==> ())protected explicit operation handleEvent'((unresolved NavigationDecodeTMC`Event) ==> ())end NavigationDecodeTMCclass MMIHandleKeyPressOne is subclass of BasicTaskpublic explicit operation MMIHandleKeyPressOne'((unresolved MMIHandleKeyPressOne`EventDispatcher) ==> (unresolved MMIHandleKeyPressOne`MMIHandleKeyPressOne))public explicit operation HandleKeyPress'(() ==> ())protected explicit operation handleEvent'((unresolved MMIHandleKeyPressOne`Event) ==> ())end MMIHandleKeyPressOneclass AbstractTaskEventprivate instance variable abstask'(unresolved AbstractTaskEvent`AbstractTask)private instance variable ev'(unresolved AbstractTaskEvent`Event)public explicit operation AbstractTaskEvent'((unresolved AbstractTaskEvent`AbstractTask) * (unresolved AbstractTaskEvent`Event) ==> (unresolved AbstractTaskEvent`AbstractTaskEvent))public explicit operation getFields'(() ==> ((unresolved AbstractTaskEvent`AbstractTask) * (unresolved AbstractTaskEvent`Event)))end AbstractTaskEventclass NavigationDatabaseLookup is subclass of BasicTaskpublic explicit operation NavigationDatabaseLookup'((unresolved NavigationDatabaseLookup`EventDispatcher) ==> (unresolved NavigationDatabaseLookup`NavigationDatabaseLookup))public explicit operation DatabaseLookup'(() ==> ())protected explicit operation handleEvent'((unresolved NavigationDatabaseLookup`Event) ==> ())end NavigationDatabaseLookupclass RadioHandleTMC is subclass of BasicTaskpublic explicit operation RadioHandleTMC'((unresolved RadioHandleTMC`EventDispatcher) ==> (unresolved RadioHandleTMC`RadioHandleTMC))public explicit operation HandleTMC'(() ==> ())protected explicit operation handleEvent'((unresolved RadioHandleTMC`Event) ==> ())end RadioHandleTMCclass MMIHandleKeyPressTwo is subclass of BasicTaskpublic explicit operation MMIHandleKeyPressTwo'((unresolved MMIHandleKeyPressTwo`EventDispatcher) ==> (unresolved MMIHandleKeyPressTwo`MMIHandleKeyPressTwo))public explicit operation HandleKeyPress'(() ==> ())protected explicit operation handleEvent'((unresolved MMIHandleKeyPressTwo`Event) ==> ())end MMIHandleKeyPressTwoclass TransmitTMC is subclass of EnvironmentTaskpublic explicit operation TransmitTMC'((unresolved TransmitTMC`EventDispatcher) * nat ==> (unresolved TransmitTMC`TransmitTMC))protected explicit operation handleEvent'((unresolved TransmitTMC`Event) ==> ())private explicit operation createSignal'(() ==> ())public explicit operation Run'(() ==> ())protected thread null'?end TransmitTMCclass MMIUpdateScreenTMC is subclass of BasicTaskpublic explicit operation MMIUpdateScreenTMC'((unresolved MMIUpdateScreenTMC`EventDispatcher) ==> (unresolved MMIUpdateScreenTMC`MMIUpdateScreenTMC))public explicit operation UpdateScreen'(() ==> ())protected explicit operation handleEvent'((unresolved MMIUpdateScreenTMC`Event) ==> ())end MMIUpdateScreenTMCclass Loggerstatic private instance variable io'(unresolved Logger`IO)static private instance variable mode'(<append> | <start>)public explicit operation printNetworkEvent'(seq of (char) * seq of (char) * nat ==> ())public explicit operation printInterruptEvent'(seq of (char) * seq of (char) * nat ==> ())end Loggerclass InterruptEvent is subclass of Eventpublic explicit operation InterruptEvent'(nat ==> (unresolved InterruptEvent`InterruptEvent))end InterruptEventclass EventDispatcher is subclass of Loggerprivate instance variable queues'map (seq of (char)) to ((unresolved EventDispatcher`AbstractTask))private instance variable messages'seq of ((unresolved EventDispatcher`AbstractTaskEvent))private instance variable interrupts'seq of ((unresolved EventDispatcher`AbstractTaskEvent))public explicit operation Register'((unresolved EventDispatcher`AbstractTask) ==> ())private explicit operation setEvent'((unresolved EventDispatcher`AbstractTask) * (unresolved EventDispatcher`Event) ==> ())private explicit operation getEvent'(() ==> ((unresolved EventDispatcher`AbstractTask) * (unresolved EventDispatcher`Event)))public explicit operation SendNetwork'(seq of (char) * seq of (char) * nat ==> ())public explicit operation SendInterrupt'(seq of (char) * seq of (char) * nat ==> ())protected thread null'?private mutex predicate '?private permission predicate 'boolend EventDispatcherclass AbstractTaskprivate instance variable name'seq of (char)private instance variable events'seq of ((unresolved AbstractTask`NetworkEvent))private instance variable interrupts'seq of ((unresolved AbstractTask`InterruptEvent))private instance variable dispatcher'(unresolved AbstractTask`EventDispatcher)public explicit operation AbstractTask'(seq of (char) * (unresolved AbstractTask`EventDispatcher) ==> (unresolved AbstractTask`AbstractTask))public explicit operation getName'(() ==> seq of (char))public explicit operation setEvent'((unresolved AbstractTask`Event) ==> ())protected explicit operation getEvent'(() ==> (unresolved AbstractTask`Event))protected explicit operation sendMessage'(seq of (char) * nat ==> ())protected explicit operation raiseInterrupt'(seq of (char) * nat ==> ())private mutex predicate '?private permission predicate 'boolend AbstractTaskclass BasicTask is subclass of AbstractTaskpublic explicit operation BasicTask'(seq of (char) * (unresolved BasicTask`EventDispatcher) ==> (unresolved BasicTask`BasicTask))protected explicit operation handleEvent'((unresolved BasicTask`Event) ==> ())protected thread null'?end BasicTaskclass Eventprivate instance variable val'natpublic explicit operation Event'(nat ==> (unresolved Event`Event))public explicit operation getEvent'(() ==> nat)end Eventclass InsertAddress is subclass of EnvironmentTaskpublic explicit operation InsertAddress'((unresolved InsertAddress`EventDispatcher) * nat ==> (unresolved InsertAddress`InsertAddress))protected explicit operation handleEvent'((unresolved InsertAddress`Event) ==> ())private explicit operation createSignal'(() ==> ())public explicit operation Run'(() ==> ())protected thread null'?end InsertAddressclass RadioAdjustVolume is subclass of BasicTaskpublic explicit operation RadioAdjustVolume'((unresolved RadioAdjustVolume`EventDispatcher) ==> (unresolved RadioAdjustVolume`RadioAdjustVolume))public explicit operation AdjustVolume'(() ==> ())protected explicit operation handleEvent'((unresolved RadioAdjustVolume`Event) ==> ())end RadioAdjustVolumeclass NetworkEvent is subclass of Eventpublic explicit operation NetworkEvent'(nat ==> (unresolved NetworkEvent`NetworkEvent))end NetworkEventclass EnvironmentTask is subclass of AbstractTaskstatic private instance variable num'natprotected instance variable max_stimuli'natprotected instance variable e2s'map (nat) to (nat)protected instance variable s2e'map (nat) to (nat)public explicit function checkResponseTimes'(map (nat) to (nat) * map (nat) to (nat) * nat -> bool)public explicit operation EnvironmentTask'(seq of (char) * (unresolved EnvironmentTask`EventDispatcher) * nat ==> (unresolved EnvironmentTask`EnvironmentTask))protected explicit operation handleEvent'((unresolved EnvironmentTask`Event) ==> ())public explicit operation getNum'(() ==> nat)public explicit operation setEvent'((unresolved EnvironmentTask`Event) ==> ())public explicit operation Run'(() ==> ())public explicit operation logEnvToSys'(nat ==> ())public explicit operation logSysToEnv'(nat ==> ())public explicit operation getMinMaxAverage'(() ==> (nat * nat * real))private mutex predicate '?private mutex predicate '?private mutex predicate '?private permission predicate 'boolend EnvironmentTaskclass RadNavSysstatic public type perfdata'perfdataprivate instance variable dispatch'(unresolved RadNavSys`EventDispatcher)private instance variable appTasks'set of ((unresolved RadNavSys`BasicTask))private instance variable envTasks'map (seq of (char)) to ((unresolved RadNavSys`EnvironmentTask))private instance variable mode'natpublic explicit operation RadNavSys'(() ==> (unresolved RadNavSys`RadNavSys))public explicit operation RadNavSys'(nat ==> (unresolved RadNavSys`RadNavSys))private explicit operation addApplicationTask'((unresolved RadNavSys`BasicTask) ==> ())private explicit operation addEnvironmentTask'((unresolved RadNavSys`EnvironmentTask) ==> ())public explicit operation Run'(() ==> map (seq of (char)) to ((unresolved RadNavSys`perfdata)))end RadNavSysclass MMIUpdateScreenAddress is subclass of BasicTaskpublic explicit operation MMIUpdateScreenAddress'((unresolved MMIUpdateScreenAddress`EventDispatcher) ==> (unresolved MMIUpdateScreenAddress`MMIUpdateScreenAddress))public explicit operation UpdateScreen'(() ==> ())protected explicit operation handleEvent'((unresolved MMIUpdateScreenAddress`Event) ==> ())end MMIUpdateScreenAddressclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval'(@p -> bool)static public explicit function fwriteval'(seq1 of (char) * @p * (unresolved IO`filedirective) -> bool)static public explicit function freadval'(seq1 of (char) -> (bool * [@p]))public explicit operation echo'(seq of (char) ==> bool)public explicit operation fecho'(seq of (char) * seq of (char) * [(unresolved IO`filedirective)] ==> bool)public explicit operation ferror'(() ==> seq of (char))static public explicit operation print'(? ==> ())static public explicit operation println'(? ==> ())static public explicit operation printf'(seq of (char) * seq of (?) ==> ())end IOclass VolumeKnob is subclass of EnvironmentTaskpublic explicit operation VolumeKnob'((unresolved VolumeKnob`EventDispatcher) * nat ==> (unresolved VolumeKnob`VolumeKnob))protected explicit operation handleEvent'((unresolved VolumeKnob`Event) ==> ())private explicit operation createSignal'(() ==> ())public explicit operation Run'(() ==> ())protected thread null'?end VolumeKnobclass MMIUpdateScreenVolume is subclass of BasicTaskpublic explicit operation MMIUpdateScreenVolume'((unresolved MMIUpdateScreenVolume`EventDispatcher) ==> (unresolved MMIUpdateScreenVolume`MMIUpdateScreenVolume))public explicit operation UpdateScreen'(() ==> ())protected explicit operation handleEvent'((unresolved MMIUpdateScreenVolume`Event) ==> ())end MMIUpdateScreenVolume
