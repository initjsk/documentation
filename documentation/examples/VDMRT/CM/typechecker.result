WARNING:flaredispenser.vdmrt:5001:35,8:Instance variable 'eventid' is not initialized
RESULT:result:-1:-1,-1:class TestCase is subclass of Testprotected instance variable name'seq of (char)public explicit operation TestCase(seq of (char))'(seq of (char) ==> TestCase)public explicit operation GetName()'(() ==> seq of (char))protected explicit operation AssertTrue(bool)'(bool ==> ())protected explicit operation AssertFalse(bool)'(bool ==> ())public explicit operation Run(TestResult)'(TestResult ==> ())protected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end TestCaseclass Testpublic explicit operation Run(TestResult)'(TestResult ==> ())end Testclass TestSuite is subclass of Testprivate instance variable tests'seq of (Test)public explicit operation Run()'(() ==> ())public explicit operation Run(TestResult)'(TestResult ==> ())public explicit operation AddTest(Test)'(Test ==> ())end TestSuiteclass Sensor is subclass of GLOBALprivate instance variable detector'MissileDetectorprivate instance variable aperture'Anglepublic explicit operation Sensor(MissileDetector, Angle)'(MissileDetector * Angle ==> Sensor)public explicit operation getAperture()'(() ==> (Angle * Angle))async public explicit operation trip(EventId, MissileType, Angle)'(EventId * MissileType * Angle ==> ())end Sensorclass TestResultprivate instance variable failures'seq of (TestCase)public explicit operation AddFailure(TestCase)'(TestCase ==> ())public explicit operation Print(seq of (char))'(seq of (char) ==> ())public explicit operation Show()'(() ==> ())end TestResultclass FlareDispenser is subclass of GLOBALstatic private value responseDB'map (MissileType) to (Plan)static private value missilePriority'map (MissileType) to (nat)static public type Plan'Planstatic public type PlanStep'PlanSteppublic instance variable curplan'Planprivate instance variable curprio'natprivate instance variable busy'boolprivate instance variable aparature'Angleprivate instance variable eventid'[EventId]public explicit operation FlareDispenser(Angle)'(Angle ==> FlareDispenser)public explicit operation GetAngle()'(() ==> nat)async public explicit operation addThreat(EventId, MissileType, Time)'(EventId * MissileType * Time ==> ())async private explicit operation evalQueue()'(() ==> ())private explicit operation releaseFlare(EventId, FlareType, Time, Time)'(EventId * FlareType * Time * Time ==> ())public explicit operation isFinished()'(() ==> ())private mutex predicate '?private permission predicate 'boolprotected thread thread'?end FlareDispenserclass GLOBALstatic public value SENSOR_APERTURE'nat1static public value FLARE_APERTURE'nat1static public value DISPENSER_APERTURE'nat1static public type MissileType'MissileTypestatic public type FlareType'FlareTypestatic public type Angle'Anglestatic public type EventId'EventIdstatic public type Time'Timepublic explicit operation canObserve(Angle, Angle, Angle)'(Angle * Angle * Angle ==> bool)public explicit operation getAperture()'(() ==> (Angle * Angle))end GLOBALclass Environment is subclass of GLOBALstatic public type inline'inlinestatic public type outline'outlineprivate instance variable io'IOprivate instance variable inlines'seq of (inline)private instance variable outlines'seq of (outline)private instance variable ranges'map (nat) to ((Angle * Angle))private instance variable sensors'map (nat) to (Sensor)private invariant inv_Environment'boolprivate instance variable busy'boolpublic explicit operation Environment(seq of (char))'(seq of (char) ==> Environment)public explicit operation addSensor(Sensor)'(Sensor ==> ())private explicit operation createSignal()'(() ==> ())public explicit operation handleEvent(EventId, FlareType, Angle, Time, Time)'(EventId * FlareType * Angle * Time * Time ==> ())public explicit operation showResult()'(() ==> ())public explicit operation isFinished()'(() ==> ())public explicit operation GetAndPurgeOutlines()'(() ==> seq of (outline))private mutex predicate '?private mutex predicate '?private permission predicate 'boolprotected thread thread'?end Environmentclass FlareController is subclass of GLOBALprivate instance variable aperture'Angleprivate instance variable ranges'map (nat) to ((Angle * Angle))private instance variable dispensers'map (nat) to (FlareDispenser)private invariant inv_FlareController'boolprivate instance variable threats'seq of ((EventId * MissileType * Angle * Time))private instance variable busy'boolpublic explicit operation FlareController(Angle)'(Angle ==> FlareController)public explicit operation addDispenser(FlareDispenser)'(FlareDispenser ==> ())public explicit operation getAperture()'(() ==> (Angle * Angle))async public explicit operation addThreat(EventId, MissileType, Angle, Time)'(EventId * MissileType * Angle * Time ==> ())private explicit operation getThreat()'(() ==> (EventId * MissileType * Angle * Time))public explicit operation isFinished()'(() ==> ())private mutex predicate '?private permission predicate 'boolprivate permission predicate 'boolprotected thread thread'?end FlareControllerclass MissileDetector is subclass of GLOBALprivate instance variable ranges'map (nat) to ((Angle * Angle))private instance variable controllers'map (nat) to (FlareController)private invariant inv_MissileDetector'boolprivate instance variable threats'seq of ((EventId * MissileType * Angle * Time))private instance variable busy'boolpublic explicit operation addController(FlareController)'(FlareController ==> ())async public explicit operation addThreat(EventId, MissileType, Angle, Time)'(EventId * MissileType * Angle * Time ==> ())private explicit operation getThreat()'(() ==> (EventId * MissileType * Angle * Time))public explicit operation isFinished()'(() ==> ())private mutex predicate '?private permission predicate 'boolprivate permission predicate 'boolprotected thread thread'?end MissileDetectorclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IOclass CMTestCase2 is subclass of TestCasepublic explicit operation CMTestCase2(seq of (char))'(seq of (char) ==> CMTestCase2)protected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end CMTestCase2class CMTestpublic explicit operation Execute()'(() ==> ())end CMTestclass Worldstatic public instance variable env'[Environment]public explicit operation World()'(() ==> World)public explicit operation Run()'(() ==> ())end Worldclass CMprivate instance variable cpu1'CPUprivate instance variable cpu2'CPUprivate instance variable cpu3'CPUprivate instance variable cpu4'CPUprivate instance variable cpu5'CPUprivate instance variable cpu6'CPUprivate instance variable bus1'BUSprivate instance variable bus2'BUSprivate instance variable bus3'BUSstatic public instance variable detector'MissileDetectorstatic public instance variable sensor0'Sensorstatic public instance variable sensor1'Sensorstatic public instance variable sensor2'Sensorstatic public instance variable sensor3'Sensorstatic public instance variable controller0'FlareControllerstatic public instance variable controller1'FlareControllerstatic public instance variable controller2'FlareControllerstatic public instance variable dispenser0'FlareDispenserstatic public instance variable dispenser1'FlareDispenserstatic public instance variable dispenser2'FlareDispenserstatic public instance variable dispenser3'FlareDispenserstatic public instance variable dispenser4'FlareDispenserstatic public instance variable dispenser5'FlareDispenserstatic public instance variable dispenser6'FlareDispenserstatic public instance variable dispenser7'FlareDispenserstatic public instance variable dispenser8'FlareDispenserstatic public instance variable dispenser9'FlareDispenserstatic public instance variable dispenser10'FlareDispenserstatic public instance variable dispenser11'FlareDispenserpublic explicit operation CM()'(() ==> CM)end CMclass CPUpublic explicit operation CPU((<FCFS> | <FP>), real)'((<FCFS> | <FP>) * real ==> CPU)public explicit operation deploy(?)'(? ==> ())public explicit operation deploy(?, seq of (char))'(? * seq of (char) ==> ())public explicit operation setPriority(?, nat)'(? * nat ==> ())end CPUclass BUSpublic explicit operation BUS((<CSMACD> | <FCFS>), real, set of (CPU))'((<CSMACD> | <FCFS>) * real * set of (CPU) ==> BUS)end BUS
