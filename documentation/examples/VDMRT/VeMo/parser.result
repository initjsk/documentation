RESULT:result:-1:-1,-1:class TrafficDataprivate instance variable dir'(unresolved Types`Direction)private instance variable pos'(unresolved TrafficData`Position)private instance variable message'(unresolved TrafficData`MessageType)private instance variable timeToLive'natstatic public type MessageType'MessageTypepublic explicit operation TrafficData'((unresolved TrafficData`MessageType) * (unresolved TrafficData`Position) * (unresolved Types`Direction) ==> (unresolved TrafficData`TrafficData))public explicit operation GetPosition'(() ==> (unresolved TrafficData`Position))public explicit operation GetMessage'(() ==> (unresolved TrafficData`MessageType))public explicit operation GetDirection'(() ==> (unresolved Types`Direction))public explicit operation Expired'(() ==> bool)public explicit operation ToString'(() ==> seq of (char))static public explicit function MessageTypeToString'((unresolved TrafficData`MessageType) -> seq of (char))end TrafficDataclass gui_Graphicspublic explicit operation init'(() ==> ())public explicit operation sleep'(() ==> ())public explicit operation addVehicle'(int ==> ())public explicit operation connectVehicles'(int * int ==> ())public explicit operation disconnectVehicles'(int * int ==> ())public explicit operation updatePosition'(int * int * int ==> ())public explicit operation updateDirection'(int * int ==> ())public explicit operation receivedMessage'(int ==> ())end gui_Graphicsclass Trafficprivate instance variable vehicles'seq of ((unresolved Traffic`Vehicle))private invariant inv_Traffic'boolpublic explicit operation AddVehicle'((unresolved Traffic`Vehicle) ==> ())public explicit operation ExistVehicle'((unresolved Traffic`Vehicle) ==> bool)public explicit operation ExistVehicleData'((unresolved Traffic`VehicleData) ==> bool)public explicit operation GetVehicles'(() ==> seq of ((unresolved Traffic`Vehicle)))public explicit operation Congestion'(() ==> bool)private explicit operation AverageSpeed'(set of ((unresolved Traffic`Vehicle)) ==> nat)public explicit function InRange'((unresolved Traffic`Vehicle) * (unresolved Traffic`Vehicle) -> bool)public explicit function FindInRangeWithSameDirection'((unresolved Traffic`Vehicle) * seq of ((unresolved Traffic`Vehicle)) -> set of ((unresolved Traffic`Vehicle)))private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?end Trafficclass TrafficLightprivate instance variable pos'(unresolved TrafficLight`Position)private instance variable greenLightTime'nat1private instance variable greenDir'(unresolved Types`Direction)private instance variable id'natpublic explicit operation TrafficLight'(nat * (unresolved TrafficLight`Position) * nat1 ==> (unresolved TrafficLight`TrafficLight))public explicit operation AddTrafficData'((unresolved TrafficLight`TrafficData) ==> ())public explicit operation GetTrafficData'(() ==> set of ((unresolved TrafficLight`TrafficData)))public explicit operation GetPosition'(() ==> (unresolved TrafficLight`Position))public explicit operation GreenLightPath'(() ==> (unresolved Types`Direction))public explicit operation GetID'(() ==> nat)private explicit operation Step'(() ==> ())static public explicit function CrossDirection'((unresolved Types`Direction) -> (unresolved Types`Direction))protected thread null'?private mutex predicate '?private mutex predicate '?end TrafficLightclass TestTrafficLight is subclass of TestCaseprivate instance variable pos'(unresolved TestTrafficLight`Position)public explicit operation TestTrafficLight'(seq of (char) ==> (unresolved TestTrafficLight`TestTrafficLight))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())public explicit operation testGreenLightPath'(() ==> ())public explicit operation testCrossDirection'(() ==> ())end TestTrafficLightclass TestTraffic is subclass of TestCaseprivate instance variable pos'(unresolved TestTraffic`Position)public explicit operation TestTraffic'(seq of (char) ==> (unresolved TestTraffic`TestTraffic))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())public explicit operation testCongestion'(() ==> ())end TestTrafficclass TestPosition is subclass of TestCasepublic explicit operation TestPosition'(seq of (char) ==> (unresolved TestPosition`TestPosition))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())public explicit operation testInRange'(() ==> ())public explicit operation testDeepCopy'(() ==> ())public explicit operation testCompare'(() ==> ())end TestPositionclass Testpublic explicit operation Run'((unresolved Test`TestResult) ==> ())end Testclass TestVehicle is subclass of TestCaseprivate instance variable dir'(unresolved Types`Direction)private instance variable pos'(unresolved TestVehicle`Position)public explicit operation TestVehicle'(seq of (char) ==> (unresolved TestVehicle`TestVehicle))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())protected explicit operation initData'(() ==> (unresolved TestVehicle`Vehicle))protected explicit operation testGetDirection'(() ==> ())protected explicit operation testSetDirection'(() ==> ())protected explicit operation testGetSpeed'(() ==> ())protected explicit operation testSetSpeed'(() ==> ())protected explicit operation testgetLowGrip'(() ==> ())protected explicit operation testsetLowGrip'(() ==> ())protected explicit operation testTurnIndicator'(() ==> ())protected explicit operation testsetTurnIndicator'(() ==> ())protected explicit operation testGetPosition'(() ==> ())protected explicit operation testSetPosition'(() ==> ())protected explicit operation testStep'(() ==> ())end TestVehicleclass Positionprivate instance variable x'intprivate instance variable y'intpublic explicit operation Position'(int * int ==> (unresolved Position`Position))public explicit operation X'(() ==> int)public explicit operation Y'(() ==> int)public explicit operation setX'(int ==> ())public explicit operation setY'(int ==> ())public explicit operation toString'(() ==> seq of (char))public explicit operation inRange'((unresolved Position`Position) * int ==> bool)public explicit operation deepCopy'(() ==> (unresolved Position`Position))static public explicit function Compare'((unresolved Position`Position) * (unresolved Position`Position) -> bool)end Positionclass TestVeMoCompletepublic explicit operation Execute'(() ==> ())end TestVeMoCompleteclass VeMoControllerpublic instance variable ctrlUnits'inmap of (nat) to ((unresolved VeMoController`Controller))public instance variable lights'inmap of (nat) to ((unresolved VeMoController`TrafficLight))private invariant inv_VeMoController'boolprivate invariant inv_VeMoController'boolprivate invariant inv_VeMoController'boolstatic public instance variable graphics'(unresolved VeMoController`gui_Graphics)static private instance variable env'(unresolved VeMoController`Environment)public explicit operation VeMoController'(() ==> (unresolved VeMoController`VeMoController))public explicit operation addController'((unresolved VeMoController`Controller) ==> ())public explicit operation addTrafficLight'((unresolved VeMoController`TrafficLight) ==> ())public explicit operation getController'(nat ==> (unresolved VeMoController`Controller))public explicit operation getTrafficLight'(nat ==> (unresolved VeMoController`TrafficLight))public explicit operation EnvironmentReady'(() ==> ())public explicit operation CalculateInRange'(() ==> ())static public explicit function OppositeDirection'((unresolved Types`Direction) -> (unresolved Types`Direction))public explicit function FindInRange'((unresolved VeMoController`Controller) * set of ((unresolved VeMoController`Controller)) -> set of ((unresolved VeMoController`Controller)))public explicit function InRange'((unresolved VeMoController`Controller) * (unresolved VeMoController`Controller) -> bool)public explicit function FindInRangeWithOppositeDirection'((unresolved VeMoController`Controller) * set of ((unresolved VeMoController`Controller)) -> set of ((unresolved VeMoController`Controller)))protected thread null'?private permission predicate 'boolprivate mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?end VeMoControllerclass Configstatic public value Range'natstatic public value TrafficDataLifeTime'natstatic public value TrafficDataKeeptNumber'natstatic public value TrafficCongestionTrack'natstatic public value TrafficCongestionRange'natstatic public value TrafficCongestionThreshold'natend Configclass Controllerprivate instance variable internalTrafficData'seq of ((unresolved Controller`TrafficData))private invariant inv_Controller'boolprivate instance variable externalTrafficData'seq of ((unresolved Controller`TrafficData))private invariant inv_Controller'boolprivate instance variable communicatedWith'seq of (nat)private invariant inv_Controller'boolprivate instance variable traffic'(unresolved Controller`Traffic)private instance variable vemoVehicle'(unresolved Controller`Vehicle)private instance variable canRun'boolpublic explicit operation Controller'((unresolved Controller`Vehicle) ==> (unresolved Controller`Controller))async public explicit operation AddOncomingVehicle'((unresolved Controller`VehicleData) ==> ())public explicit operation AddTrafficData'(nat * seq of ((unresolved Controller`TrafficData)) ==> ())private explicit operation AddInternalTrafficData'((unresolved Controller`TrafficData) ==> ())public explicit operation GetTrafficData'(() ==> [seq of ((unresolved Controller`TrafficData))])public explicit operation GetVehicleID'(() ==> nat)public explicit operation GetPosition'(() ==> [(unresolved Controller`Position)])public explicit operation GetDirection'(() ==> [(unresolved Types`Direction)])public explicit operation getVehicle'(() ==> [(unresolved Controller`Vehicle)])public explicit operation getVehicleDTO'(() ==> [(unresolved Controller`VehicleData)])public explicit operation EnvironmentReady'(() ==> ())public explicit operation Step'(() ==> ())async public explicit operation run'(() ==> ())protected thread null'?private permission predicate 'boolprivate mutex predicate '?private mutex predicate '?private mutex predicate '?end Controllerclass TestTrafficData is subclass of TestCaseprivate instance variable pos'(unresolved TestTrafficData`Position)public explicit operation TestTrafficData'(seq of (char) ==> (unresolved TestTrafficData`TestTrafficData))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())public explicit operation testExpired'(() ==> ())end TestTrafficDataclass Environmentprivate instance variable vemoCtrl'(unresolved Environment`VeMoController)private instance variable io'(unresolved Environment`IO)private instance variable inlines'seq of ((unresolved Environment`inline))private instance variable outlines'seq of (char)private instance variable busy'boolstatic private type inline'inlinestatic private type InputTP'InputTPpublic explicit operation Environment'(seq of (char) ==> (unresolved Environment`Environment))public explicit operation Events'(() ==> ())public explicit operation handleEvent'(seq of (char) ==> ())public explicit operation report'(() ==> ())public explicit operation isFinished'(() ==> ())public explicit operation goEnvironment'(() ==> ())public explicit operation setVeMoCtrl'((unresolved Environment`VeMoController) ==> ())public explicit operation run'(() ==> ())protected thread null'?private permission predicate 'boolprivate permission predicate 'boolprivate mutex predicate '?end Environmentclass TestCase is subclass of Testprivate instance variable name'seq of (char)public explicit operation TestCase'(seq of (char) ==> (unresolved TestCase`TestCase))public explicit operation GetName'(() ==> seq of (char))protected explicit operation AssertTrue'(bool ==> ())protected explicit operation AssertFalse'(bool ==> ())public explicit operation Run'((unresolved TestCase`TestResult) ==> ())protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end TestCaseclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval'(@p -> bool)static public explicit function fwriteval'(seq1 of (char) * @p * (unresolved IO`filedirective) -> bool)static public explicit function freadval'(seq1 of (char) -> (bool * [@p]))public explicit operation echo'(seq of (char) ==> bool)public explicit operation fecho'(seq of (char) * seq of (char) * [(unresolved IO`filedirective)] ==> bool)public explicit operation ferror'(() ==> seq of (char))static public explicit operation print'(? ==> ())static public explicit operation println'(? ==> ())static public explicit operation printf'(seq of (char) * seq of (?) ==> ())end IOclass Worldstatic public instance variable env'[(unresolved World`Environment)]public explicit operation World'(() ==> (unresolved World`World))public explicit operation Run'(() ==> ())static public explicit operation Verbose'(bool ==> ())end Worldclass TestVeMoController is subclass of TestCaseprivate instance variable pos'(unresolved TestVeMoController`Position)public explicit operation TestVeMoController'(seq of (char) ==> (unresolved TestVeMoController`TestVeMoController))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())private explicit operation runner'(() ==> ())private explicit operation IsFinished'(() ==> ())protected explicit operation TearDown'(() ==> ())protected thread null'?private permission predicate 'boolend TestVeMoControllerclass VeMopublic instance variable cpu0'(unresolved VeMo`CPU)public instance variable cpu1'(unresolved VeMo`CPU)public instance variable cpu2'(unresolved VeMo`CPU)public instance variable cpu9'(unresolved VeMo`CPU)public instance variable bus1'(unresolved VeMo`BUS)static private instance variable e'(unresolved VeMo`Environment)static public instance variable ctrl1'(unresolved VeMo`Controller)static public instance variable ctrl2'(unresolved VeMo`Controller)static public instance variable ctrl9'(unresolved VeMo`Controller)static public instance variable tl1'(unresolved VeMo`TrafficLight)static public instance variable vemoCtrl'(unresolved VeMo`VeMoController)public explicit operation VeMo'(() ==> (unresolved VeMo`VeMo))end VeMoclass VehicleDataprivate instance variable dir'(unresolved Types`Direction)private instance variable speed'natprivate instance variable lowgrip'boolprivate instance variable turnIndicator'(unresolved VehicleData`Indicator)private instance variable pos'(unresolved VehicleData`Position)private instance variable id'natstatic public type Indicator'Indicatorpublic explicit operation VehicleData'(nat * (unresolved VehicleData`Position) * nat * (unresolved Types`Direction) * bool ==> (unresolved VehicleData`VehicleData))public explicit operation GetDirection'(() ==> (unresolved Types`Direction))public explicit operation GetSpeed'(() ==> nat)public explicit operation getLowGrip'(() ==> bool)public explicit operation TurnIndicator'(() ==> (unresolved VehicleData`Indicator))public explicit operation GetPosition'(() ==> (unresolved VehicleData`Position))public explicit operation GetID'(() ==> nat)end VehicleDataclass TestSuite is subclass of Testprivate instance variable tests'seq of ((unresolved TestSuite`Test))static public type TestKinds'TestKindspublic explicit operation Run'(() ==> ())public explicit operation Run'((unresolved TestSuite`TestResult) ==> ())public explicit operation AddTest'((unresolved TestSuite`TestKinds) ==> ())end TestSuiteclass Vehicleprivate instance variable dir'(unresolved Types`Direction)private instance variable speed'natprivate instance variable lowgrip'boolprivate instance variable turnIndicator'(unresolved Vehicle`Indicator)private instance variable pos'(unresolved Vehicle`Position)private instance variable id'natstatic public type Indicator'Indicatorpublic explicit operation Vehicle'(nat * (unresolved Vehicle`Position) * nat * (unresolved Types`Direction) ==> (unresolved Vehicle`Vehicle))public explicit operation Vehicle'((unresolved Vehicle`VehicleData) ==> (unresolved Vehicle`Vehicle))public explicit operation GetDirection'(() ==> (unresolved Types`Direction))async public explicit operation SetDirection'((unresolved Types`Direction) ==> ())public explicit operation GetSpeed'(() ==> nat)async public explicit operation SetSpeed'(nat ==> ())public explicit operation getLowGrip'(() ==> bool)async public explicit operation setLowGrip'(bool ==> ())public explicit operation TurnIndicator'(() ==> (unresolved Vehicle`Indicator))async public explicit operation setTurnIndicator'((unresolved Vehicle`Indicator) ==> ())public explicit operation GetPosition'(() ==> (unresolved Vehicle`Position))async public explicit operation SetPosition'((unresolved Vehicle`Position) ==> ())public explicit operation GetID'(() ==> nat)public explicit operation Move'(() ==> ())public explicit operation getDTO'(() ==> (unresolved Vehicle`VehicleData))static public explicit function IndicatorToString'((unresolved Vehicle`Indicator) -> seq of (char))private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?end Vehicleclass Typesstatic public type Time'Timestatic public type Direction'Directionstatic public type Event'Eventstatic public type VechicleRun'VechicleRunstatic public type TrafficLightRun'TrafficLightRunstatic public type VehicleUpdateSpeed'VehicleUpdateSpeedstatic public type VehicleUpdatePosition'VehicleUpdatePositionstatic public type VehicleUpdateDirection'VehicleUpdateDirectionstatic public type VehicleLowGrip'VehicleLowGripstatic public type VehicleTurnIndication'VehicleTurnIndicationstatic public type WasteTime'WasteTimestatic public explicit function DirectionToString'((unresolved Types`Direction) -> seq of (char))static public explicit function DirectionToGraphics'((unresolved Types`Direction) -> nat)end Typesclass Printerstatic private instance variable echo'boolstatic public explicit operation Echo'(bool ==> ())static public explicit operation OutAlways'(seq of (char) ==> ())static public explicit operation OutWithTS'(seq of (char) ==> ())static public explicit operation natToString'(nat ==> seq of (char))static public explicit operation intToString'(int ==> seq of (char))private mutex predicate '?end Printerclass TestController is subclass of TestCaseprivate instance variable pos'(unresolved TestController`Position)public explicit operation TestController'(seq of (char) ==> (unresolved TestController`TestController))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end TestControllerclass TestResultprivate instance variable failures'seq of ((unresolved TestResult`TestCase))public explicit operation AddFailure'((unresolved TestResult`TestCase) ==> ())public explicit operation Print'(seq of (char) ==> ())public explicit operation Show'(() ==> ())end TestResult
