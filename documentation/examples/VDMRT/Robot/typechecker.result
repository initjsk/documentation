WARNING:SteeringController.vdmrt:5001:12,14:Instance variable 'dest' is not initialized
WARNING:SteeringController.vdmrt:5001:13,22:Instance variable 'workingGrid' is not initialized
WARNING:Storage.vdmrt:5001:21,9:Instance variable 'counter' is not initialized
WARNING:Storage.vdmrt:5008:72,21:dest at 17'9 hidden by dest
WARNING:Storage.vdmrt:5001:140,21:Instance variable 'completeGrid' is not initialized
WARNING:NextMoveController.vdmrt:5001:4,4:Instance variable 'obs' is not initialized
WARNING:Storage.vdmrt:5001:17,13:Instance variable 'dest' is not initialized
WARNING:Robot.vdmrt:5001:25,14:Instance variable 'name' is not initialized
WARNING:Enviroment.vdmrt:5001:6,30:Instance variable 'currentRobotPosition' is not initialized
RESULT:result:-1:-1,-1:class IOstatic public type filedirective'filedirectivestatic public explicit function writeval(@p)'(@p -> bool)static public explicit function fwriteval(seq1 of (char), @p, filedirective)'(seq1 of (char) * @p * filedirective -> bool)static public explicit function freadval(seq1 of (char))'(seq1 of (char) -> (bool * [@p]))public explicit operation echo(seq of (char))'(seq of (char) ==> bool)public explicit operation fecho(seq of (char), seq of (char), [filedirective])'(seq of (char) * seq of (char) * [filedirective] ==> bool)public explicit operation ferror()'(() ==> seq of (char))static public explicit operation print(?)'(? ==> ())static public explicit operation println(?)'(? ==> ())static public explicit operation printf(seq of (char), seq of (?))'(seq of (char) * seq of (?) ==> ())end IOclass Worldstatic public instance variable env'[Enviroment]public explicit operation World()'(() ==> World)public explicit operation Run()'(() ==> ())end Worldclass RobotTestpublic explicit operation Execute()'(() ==> ())end RobotTestclass Gridstatic public type PointAvalibility'PointAvalibilitystatic public type Point'Pointpublic instance variable points'map (Point) to (PointAvalibility)private instance variable maxPoint'Pointprivate invariant inv_Grid'boolpublic explicit operation Grid(Point, Point)'(Point * Point ==> Grid)public explicit operation GetPointAvalibility(int, int)'(int * int ==> PointAvalibility)public explicit operation SetPointMP(map (Point) to (PointAvalibility))'(map (Point) to (PointAvalibility) ==> ())public explicit operation IsValidGridPoint(Point)'(Point ==> bool)end Gridclass GridTest is subclass of TestCasestatic private value sta'Pointstatic private value max'Pointpublic explicit operation GridTest(seq of (char))'(seq of (char) ==> GridTest)protected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end GridTestclass MATHstatic public explicit function sin(real)'(real +> real)static public explicit function cos(real)'(real +> real)static public explicit function tan(real)'(real -> real)static public explicit function cot(real)'(real -> real)static public explicit function asin(real)'(real -> real)static public explicit function acos(real)'(real -> real)static public explicit function atan(real)'(real +> real)static public explicit function acot(real)'(real +> real)static public explicit function sqrt(real)'(real -> real)static public explicit function pi_f()'(() +> real)static public explicit operation srand(int)'(int ==> ())static public explicit operation rand(int)'(int ==> int)static public explicit operation srand2(int)'(int ==> int)static public explicit function exp(real)'(real +> real)static public explicit function ln(real)'(real -> real)static public explicit function log(real)'(real -> real)static public explicit function fac(nat)'(nat -> nat1)static public value pi'realend MATHclass Enviromentprivate instance variable file'Storagepublic instance variable completeGrid'Gridprivate instance variable currentRobotPosition'Pointprivate instance variable busy'boolpublic explicit operation Enviroment()'(() ==> Enviroment)public explicit operation GetPointAvalibility(Point)'(Point ==> PointAvalibility)public explicit operation handleEvent(Grid, seq of (Route), Point, bool)'(Grid * seq of (Route) * Point * bool ==> ())public explicit operation isFinished()'(() ==> ())protected thread thread'?private permission predicate 'boolend Enviromentclass EnviromentTest is subclass of TestCaseprotected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end EnviromentTestclass SteeringControllerstatic private value MAX_POINT'Pointstatic public type Route'Routeprivate instance variable routes'seq of (Route)static public instance variable obsSensors'set of (ObstacleSensor)private instance variable batCap'intprivate instance variable dest'Pointprivate instance variable workingGrid'Gridprivate instance variable busy'boolpublic explicit operation SteeringController()'(() ==> SteeringController)private explicit operation GetPointDirection(Point)'(Point ==> SensorDirection)private explicit operation GetBatUsage()'(() ==> nat)private explicit operation GetPos()'(() ==> Point)private explicit operation GetRoutes()'(() ==> seq of (Route))private explicit operation GetNeighbourPoints()'(() ==> set of (Point))private explicit operation GetNextMove(set of (Point))'(set of (Point) ==> [Point])private explicit operation IsDestination(Point)'(Point ==> bool)private explicit operation DoesRouteHaveMoreOptions()'(() ==> bool)private explicit operation IsInRoute(Point)'(Point ==> bool)private explicit operation StartNewRoute()'(() ==> ())public explicit operation ReturnToBase()'(() ==> ())private explicit operation Move(Point)'(Point ==> ())private explicit operation RestartNewRoute()'(() ==> ())private explicit operation FindRoute()'(() ==> (Grid * seq of (Route) * Point * bool))private explicit operation FindRouteToDestination()'(() ==> bool)private explicit operation DiscoverUnknownNeighbourPoints(set of (Point))'(set of (Point) ==> ())public explicit operation SetDiscoverInfo(Point, Point, int)'(Point * Point * int ==> ())public explicit operation AddObstacleSensor(ObstacleSensor)'(ObstacleSensor ==> ())public explicit operation isFinished()'(() ==> ())private permission predicate 'boolprotected thread thread'?private permission predicate 'boolprivate mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private explicit function ValidatePoint(Point, Point)'(Point * Point -> bool)end SteeringControllerclass SteeringControllerTest is subclass of TestCasestatic private value sta'Pointprotected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end SteeringControllerTestclass Robotprivate instance variable cpu1'CPUprivate instance variable cpu2'CPUprivate instance variable cpu3'CPUprivate instance variable cpu4'CPUprivate instance variable cpu5'CPUprivate instance variable bus1'BUSprivate instance variable bus2'BUSprivate instance variable bus3'BUSprivate instance variable bus4'BUSprivate instance variable bus5'BUSprivate instance variable name'set of (char)static public instance variable obsSensorNorth'ObstacleSensorstatic public instance variable obsSensorSouth'ObstacleSensorstatic public instance variable obsSensorEast'ObstacleSensorstatic public instance variable obsSensorWest'ObstacleSensorstatic public instance variable dataReader'DataReaderstatic public instance variable steering'SteeringControllerstatic public instance variable mobs1'MovingObstaclestatic public instance variable mobs2'MovingObstaclestatic public instance variable mobs3'MovingObstaclestatic public instance variable mobs4'MovingObstaclestatic public instance variable nmc'NextMoveControllerpublic explicit operation Robot()'(() ==> Robot)end Robotclass NextMoveControllerprivate instance variable obs'map (Point) to (PointAvalibility)private instance variable mobs'set of (MovingObstacle)protected thread thread'?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private permission predicate 'boolprivate permission predicate 'boolpublic explicit operation NextMoveController()'(() ==> NextMoveController)public explicit operation AddMovingObsticle(MovingObstacle)'(MovingObstacle ==> ())private explicit operation LocateMovingObstacles()'(() ==> ())private explicit operation SetObs(map (Point) to (PointAvalibility))'(map (Point) to (PointAvalibility) ==> ())private explicit operation WaitForAvalibility(Point)'(Point ==> ())private explicit operation IsPointBlocked(Point)'(Point ==> bool)public explicit operation GetNextPoint(set of (Point), Point)'(set of (Point) * Point ==> [Point])private explicit function Distance(Point, Point)'(Point * Point -> nat)end NextMoveControllerclass NextMoveControllerTest is subclass of TestCaseprotected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end NextMoveControllerTestclass Storagestatic public type inDataType'inDataTypestatic private value startIndex'natstatic private value destIndex'natstatic private value batCapIndex'natprivate instance variable file'IOprivate instance variable inputFileName'seq of (char)private invariant inv_Storage'boolprivate instance variable outputFileName'seq of (char)private invariant inv_Storage'boolprivate instance variable inData'seq of (inDataType)public instance variable dest'Pointpublic instance variable startingPoint'Pointpublic instance variable battery'natprivate invariant inv_Storage'boolprivate instance variable counter'natpublic instance variable fields'natprivate invariant inv_Storage'boolpublic explicit operation Storage()'(() ==> Storage)public explicit operation Load(seq of (char))'(seq of (char) ==> Grid)private explicit operation SetData(seq of (inDataType))'(seq of (inDataType) ==> Grid)public explicit operation Save(Grid, seq of (Route), Point, bool)'(Grid * seq of (Route) * Point * bool ==> ())private explicit operation WriteMap(Point, PointAvalibility)'(Point * PointAvalibility ==> ())private explicit operation WriteRoute(Route)'(Route ==> ())private explicit operation PrintInt(nat)'(nat ==> ())private explicit operation PrintLine(seq of (char))'(seq of (char) ==> ())end Storageclass StorageTest is subclass of TestCaseprivate instance variable completeGrid'Gridpublic explicit operation StorageTest(seq of (char))'(seq of (char) ==> StorageTest)protected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end StorageTestclass Utilstatic public explicit operation PrintValue(Point)'(Point ==> ())static public explicit operation PrintDebug(seq of (char))'(seq of (char) ==> ())static public explicit operation PrintInt(int)'(int ==> ())end Utilclass DataReaderpublic explicit operation DataReader()'(() ==> DataReader)public explicit operation Read()'(() ==> ())end DataReaderclass DataReaderTest is subclass of TestCaseprotected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end DataReaderTestclass MovingObstaclestatic public type MoveDirection'MoveDirectionprivate instance variable firstpos'Pointprivate instance variable pos'Pointprivate instance variable direction'MoveDirectionprivate instance variable steps'intprivate instance variable busy'boolpublic explicit operation MovingObstacle(Point, MoveDirection)'(Point * MoveDirection ==> MovingObstacle)private explicit operation Step()'(() ==> ())private explicit operation SetPos(Point, int)'(Point * int ==> ())public explicit operation GetPos()'(() ==> Point)public explicit operation Stop()'(() ==> ())protected thread thread'?private mutex predicate '?private mutex predicate '?end MovingObstacleclass MovingObstacleTest is subclass of TestCaseprotected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end MovingObstacleTestclass ObstacleSensorstatic public type SensorDirection'SensorDirectionprivate instance variable sDirection'SensorDirectionpublic explicit operation ObstacleSensor(SensorDirection)'(SensorDirection ==> ObstacleSensor)public explicit operation GetPointAvalibility(Point)'(Point ==> PointAvalibility)public explicit operation GetDirection()'(() ==> SensorDirection)end ObstacleSensorclass ObstacleSensorTest is subclass of TestCaseprotected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end ObstacleSensorTestclass Testpublic explicit operation Run(TestResult)'(TestResult ==> ())end Testclass TestCase is subclass of Testprivate instance variable name'seq of (char)public explicit operation TestCase(seq of (char))'(seq of (char) ==> TestCase)public explicit operation GetName()'(() ==> seq of (char))protected explicit operation AssertTrue(bool)'(bool ==> ())protected explicit operation AssertFalse(bool)'(bool ==> ())public explicit operation Run(TestResult)'(TestResult ==> ())protected explicit operation SetUp()'(() ==> ())protected explicit operation RunTest()'(() ==> ())protected explicit operation TearDown()'(() ==> ())end TestCaseclass TestSuite is subclass of Testprivate instance variable tests'seq of (Test)public explicit operation Run()'(() ==> ())public explicit operation Run(TestResult)'(TestResult ==> ())public explicit operation AddTest(Test)'(Test ==> ())end TestSuiteclass TestResultprivate instance variable failures'seq of (TestCase)public explicit operation AddFailure(TestCase)'(TestCase ==> ())public explicit operation Print(seq of (char))'(seq of (char) ==> ())public explicit operation Show()'(() ==> ())end TestResultclass CPUpublic explicit operation CPU((<FCFS> | <FP>), real)'((<FCFS> | <FP>) * real ==> CPU)public explicit operation deploy(?)'(? ==> ())public explicit operation deploy(?, seq of (char))'(? * seq of (char) ==> ())public explicit operation setPriority(?, nat)'(? * nat ==> ())end CPUclass BUSpublic explicit operation BUS((<CSMACD> | <FCFS>), real, set of (CPU))'((<CSMACD> | <FCFS>) * real * set of (CPU) ==> BUS)end BUS
