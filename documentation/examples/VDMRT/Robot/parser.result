RESULT:result:-1:-1,-1:class Robotprivate instance variable cpu1'(unresolved Robot`CPU)private instance variable cpu2'(unresolved Robot`CPU)private instance variable cpu3'(unresolved Robot`CPU)private instance variable cpu4'(unresolved Robot`CPU)private instance variable cpu5'(unresolved Robot`CPU)private instance variable bus1'(unresolved Robot`BUS)private instance variable bus2'(unresolved Robot`BUS)private instance variable bus3'(unresolved Robot`BUS)private instance variable bus4'(unresolved Robot`BUS)private instance variable bus5'(unresolved Robot`BUS)private instance variable name'set of (char)static public instance variable obsSensorNorth'(unresolved Robot`ObstacleSensor)static public instance variable obsSensorSouth'(unresolved Robot`ObstacleSensor)static public instance variable obsSensorEast'(unresolved Robot`ObstacleSensor)static public instance variable obsSensorWest'(unresolved Robot`ObstacleSensor)static public instance variable dataReader'(unresolved Robot`DataReader)static public instance variable steering'(unresolved Robot`SteeringController)static public instance variable mobs1'(unresolved Robot`MovingObstacle)static public instance variable mobs2'(unresolved Robot`MovingObstacle)static public instance variable mobs3'(unresolved Robot`MovingObstacle)static public instance variable mobs4'(unresolved Robot`MovingObstacle)static public instance variable nmc'(unresolved Robot`NextMoveController)public explicit operation Robot'(() ==> (unresolved Robot`Robot))end Robotclass Utilstatic public explicit operation PrintValue'((unresolved Grid`Point) ==> ())static public explicit operation PrintDebug'(seq of (char) ==> ())static public explicit operation PrintInt'(int ==> ())end Utilclass RobotTestpublic explicit operation Execute'(() ==> ())end RobotTestclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval'(@p -> bool)static public explicit function fwriteval'(seq1 of (char) * @p * (unresolved IO`filedirective) -> bool)static public explicit function freadval'(seq1 of (char) -> (bool * [@p]))public explicit operation echo'(seq of (char) ==> bool)public explicit operation fecho'(seq of (char) * seq of (char) * [(unresolved IO`filedirective)] ==> bool)public explicit operation ferror'(() ==> seq of (char))static public explicit operation print'(? ==> ())static public explicit operation println'(? ==> ())static public explicit operation printf'(seq of (char) * seq of (?) ==> ())end IOclass Enviromentprivate instance variable file'(unresolved Enviroment`Storage)public instance variable completeGrid'(unresolved Enviroment`Grid)private instance variable currentRobotPosition'(unresolved Grid`Point)private instance variable busy'boolpublic explicit operation Enviroment'(() ==> (unresolved Enviroment`Enviroment))public explicit operation GetPointAvalibility'((unresolved Grid`Point) ==> (unresolved Grid`PointAvalibility))public explicit operation handleEvent'((unresolved Enviroment`Grid) * seq of ((unresolved SteeringController`Route)) * (unresolved Grid`Point) * bool ==> ())public explicit operation isFinished'(() ==> ())protected thread null'?private permission predicate 'boolend Enviromentclass EnviromentTest is subclass of TestCaseprotected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end EnviromentTestclass Worldstatic public instance variable env'[(unresolved World`Enviroment)]public explicit operation World'(() ==> (unresolved World`World))public explicit operation Run'(() ==> ())end Worldclass SteeringControllerstatic private value MAX_POINT'(unresolved Grid`Point)static public type Route'Routeprivate instance variable routes'seq of ((unresolved SteeringController`Route))static public instance variable obsSensors'set of ((unresolved SteeringController`ObstacleSensor))private instance variable batCap'intprivate instance variable dest'(unresolved Grid`Point)private instance variable workingGrid'(unresolved SteeringController`Grid)private instance variable busy'boolpublic explicit operation SteeringController'(() ==> (unresolved SteeringController`SteeringController))private explicit operation GetPointDirection'((unresolved Grid`Point) ==> (unresolved ObstacleSensor`SensorDirection))private explicit operation GetBatUsage'(() ==> nat)private explicit operation GetPos'(() ==> (unresolved Grid`Point))private explicit operation GetRoutes'(() ==> seq of ((unresolved SteeringController`Route)))private explicit operation GetNeighbourPoints'(() ==> set of ((unresolved Grid`Point)))private explicit operation GetNextMove'(set of ((unresolved Grid`Point)) ==> [(unresolved Grid`Point)])private explicit operation IsDestination'((unresolved Grid`Point) ==> bool)private explicit operation DoesRouteHaveMoreOptions'(() ==> bool)private explicit operation IsInRoute'((unresolved Grid`Point) ==> bool)private explicit operation StartNewRoute'(() ==> ())public explicit operation ReturnToBase'(() ==> ())private explicit operation Move'((unresolved Grid`Point) ==> ())private explicit operation RestartNewRoute'(() ==> ())private explicit operation FindRoute'(() ==> ((unresolved SteeringController`Grid) * seq of ((unresolved SteeringController`Route)) * (unresolved Grid`Point) * bool))private explicit operation FindRouteToDestination'(() ==> bool)private explicit operation DiscoverUnknownNeighbourPoints'(set of ((unresolved Grid`Point)) ==> ())public explicit operation SetDiscoverInfo'((unresolved Grid`Point) * (unresolved Grid`Point) * int ==> ())public explicit operation AddObstacleSensor'((unresolved SteeringController`ObstacleSensor) ==> ())public explicit operation isFinished'(() ==> ())private permission predicate 'boolprotected thread null'?private permission predicate 'boolprivate mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private explicit function ValidatePoint'((unresolved Grid`Point) * (unresolved Grid`Point) -> bool)end SteeringControllerclass SteeringControllerTest is subclass of TestCasestatic private value sta'(unresolved Grid`Point)protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end SteeringControllerTestclass ObstacleSensorstatic public type SensorDirection'SensorDirectionprivate instance variable sDirection'(unresolved ObstacleSensor`SensorDirection)public explicit operation ObstacleSensor'((unresolved ObstacleSensor`SensorDirection) ==> (unresolved ObstacleSensor`ObstacleSensor))public explicit operation GetPointAvalibility'((unresolved Grid`Point) ==> (unresolved Grid`PointAvalibility))public explicit operation GetDirection'(() ==> (unresolved ObstacleSensor`SensorDirection))end ObstacleSensorclass ObstacleSensorTest is subclass of TestCaseprotected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end ObstacleSensorTestclass Testpublic explicit operation Run'((unresolved Test`TestResult) ==> ())end Testclass TestCase is subclass of Testprivate instance variable name'seq of (char)public explicit operation TestCase'(seq of (char) ==> (unresolved TestCase`TestCase))public explicit operation GetName'(() ==> seq of (char))protected explicit operation AssertTrue'(bool ==> ())protected explicit operation AssertFalse'(bool ==> ())public explicit operation Run'((unresolved TestCase`TestResult) ==> ())protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end TestCaseclass TestSuite is subclass of Testprivate instance variable tests'seq of ((unresolved TestSuite`Test))public explicit operation Run'(() ==> ())public explicit operation Run'((unresolved TestSuite`TestResult) ==> ())public explicit operation AddTest'((unresolved TestSuite`Test) ==> ())end TestSuiteclass TestResultprivate instance variable failures'seq of ((unresolved TestResult`TestCase))public explicit operation AddFailure'((unresolved TestResult`TestCase) ==> ())public explicit operation Print'(seq of (char) ==> ())public explicit operation Show'(() ==> ())end TestResultclass MovingObstaclestatic public type MoveDirection'MoveDirectionprivate instance variable firstpos'(unresolved Grid`Point)private instance variable pos'(unresolved Grid`Point)private instance variable direction'(unresolved MovingObstacle`MoveDirection)private instance variable steps'intprivate instance variable busy'boolpublic explicit operation MovingObstacle'((unresolved Grid`Point) * (unresolved MovingObstacle`MoveDirection) ==> (unresolved MovingObstacle`MovingObstacle))private explicit operation Step'(() ==> ())private explicit operation SetPos'((unresolved Grid`Point) * int ==> ())public explicit operation GetPos'(() ==> (unresolved Grid`Point))public explicit operation Stop'(() ==> ())protected thread null'?private mutex predicate '?private mutex predicate '?end MovingObstacleclass MovingObstacleTest is subclass of TestCaseprotected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end MovingObstacleTestclass MATHstatic public explicit function sin'(real +> real)static public explicit function cos'(real +> real)static public explicit function tan'(real -> real)static public explicit function cot'(real -> real)static public explicit function asin'(real -> real)static public explicit function acos'(real -> real)static public explicit function atan'(real +> real)static public explicit function acot'(real +> real)static public explicit function sqrt'(real -> real)static public explicit function pi_f'(() +> real)static public explicit operation srand'(int ==> ())static public explicit operation rand'(int ==> int)static public explicit operation srand2'(int ==> int)static public explicit function exp'(real +> real)static public explicit function ln'(real -> real)static public explicit function log'(real -> real)static public explicit function fac'(nat -> nat1)static public value pi'?end MATHclass Storagestatic public type inDataType'inDataTypestatic private value startIndex'natstatic private value destIndex'natstatic private value batCapIndex'natprivate instance variable file'(unresolved Storage`IO)private instance variable inputFileName'seq of (char)private invariant inv_Storage'boolprivate instance variable outputFileName'seq of (char)private invariant inv_Storage'boolprivate instance variable inData'seq of ((unresolved Storage`inDataType))public instance variable dest'(unresolved Grid`Point)public instance variable startingPoint'(unresolved Grid`Point)public instance variable battery'natprivate invariant inv_Storage'boolprivate instance variable counter'natpublic instance variable fields'natprivate invariant inv_Storage'boolpublic explicit operation Storage'(() ==> (unresolved Storage`Storage))public explicit operation Load'(seq of (char) ==> (unresolved Storage`Grid))private explicit operation SetData'(seq of ((unresolved Storage`inDataType)) ==> (unresolved Storage`Grid))public explicit operation Save'((unresolved Storage`Grid) * seq of ((unresolved SteeringController`Route)) * (unresolved Grid`Point) * bool ==> ())private explicit operation WriteMap'((unresolved Grid`Point) * (unresolved Grid`PointAvalibility) ==> ())private explicit operation WriteRoute'((unresolved SteeringController`Route) ==> ())private explicit operation PrintInt'(nat ==> ())private explicit operation PrintLine'(seq of (char) ==> ())end Storageclass StorageTest is subclass of TestCaseprivate instance variable completeGrid'(unresolved StorageTest`Grid)public explicit operation StorageTest'(seq of (char) ==> (unresolved StorageTest`StorageTest))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end StorageTestclass NextMoveControllerprivate instance variable obs'map ((unresolved Grid`Point)) to ((unresolved Grid`PointAvalibility))private instance variable mobs'set of ((unresolved NextMoveController`MovingObstacle))protected thread null'?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private mutex predicate '?private permission predicate 'boolprivate permission predicate 'boolpublic explicit operation NextMoveController'(() ==> (unresolved NextMoveController`NextMoveController))public explicit operation AddMovingObsticle'((unresolved NextMoveController`MovingObstacle) ==> ())private explicit operation LocateMovingObstacles'(() ==> ())private explicit operation SetObs'(map ((unresolved Grid`Point)) to ((unresolved Grid`PointAvalibility)) ==> ())private explicit operation WaitForAvalibility'((unresolved Grid`Point) ==> ())private explicit operation IsPointBlocked'((unresolved Grid`Point) ==> bool)public explicit operation GetNextPoint'(set of ((unresolved Grid`Point)) * (unresolved Grid`Point) ==> [(unresolved Grid`Point)])private explicit function Distance'((unresolved Grid`Point) * (unresolved Grid`Point) -> nat)end NextMoveControllerclass NextMoveControllerTest is subclass of TestCaseprotected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end NextMoveControllerTestclass Gridstatic public type PointAvalibility'PointAvalibilitystatic public type Point'Pointpublic instance variable points'map ((unresolved Grid`Point)) to ((unresolved Grid`PointAvalibility))private instance variable maxPoint'(unresolved Grid`Point)private invariant inv_Grid'boolpublic explicit operation Grid'((unresolved Grid`Point) * (unresolved Grid`Point) ==> (unresolved Grid`Grid))public explicit operation GetPointAvalibility'(int * int ==> (unresolved Grid`PointAvalibility))public explicit operation SetPointMP'(map ((unresolved Grid`Point)) to ((unresolved Grid`PointAvalibility)) ==> ())public explicit operation IsValidGridPoint'((unresolved Grid`Point) ==> bool)end Gridclass GridTest is subclass of TestCasestatic private value sta'(unresolved Grid`Point)static private value max'(unresolved Grid`Point)public explicit operation GridTest'(seq of (char) ==> (unresolved GridTest`GridTest))protected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end GridTestclass DataReaderpublic explicit operation DataReader'(() ==> (unresolved DataReader`DataReader))public explicit operation Read'(() ==> ())end DataReaderclass DataReaderTest is subclass of TestCaseprotected explicit operation SetUp'(() ==> ())protected explicit operation RunTest'(() ==> ())protected explicit operation TearDown'(() ==> ())end DataReaderTest
