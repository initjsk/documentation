RESULT:result:-1:-1,-1:class P is subclass of DTControlprotected instance variable k'realpublic explicit operation P'(real ==> (unresolved P`P))public explicit operation P'(() ==> (unresolved P`P))public explicit operation Output'(real ==> real)static private value DEF_K'realend Pclass Sensor is subclass of ISensorRealprivate instance variable value'realpublic explicit operation Sensor'(real ==> (unresolved Sensor`Sensor))public explicit operation Sensor'(() ==> (unresolved Sensor`Sensor))public explicit operation GetValue'(() ==> real)end Sensorclass ChessWayprivate instance variable fpga1'(unresolved ChessWay`CPU)private instance variable fpga2'(unresolved ChessWay`CPU)private instance variable bus'(unresolved ChessWay`BUS)static public instance variable acc_in'[(unresolved ChessWay`ISensorReal)]static public instance variable vel_in'[(unresolved ChessWay`ISensorReal)]static public instance variable acc_out'[(unresolved ChessWay`IActuatorReal)]static public instance variable vel_out'[(unresolved ChessWay`IActuatorReal)]static public instance variable lctrl'(unresolved ChessWay`LeftController)static public instance variable rctrl'(unresolved ChessWay`RightController)static public instance variable debug'boolpublic explicit operation ChessWay'(() ==> (unresolved ChessWay`ChessWay))end ChessWayclass Environmentstatic private value reserved'set of (seq of (char))static public type tCtCurve'tCtCurvestatic public type tCtBehavior'tCtBehaviorprivate instance variable mCtBehavior'(unresolved Environment`tCtBehavior)public explicit operation loadCsvFile'(seq of (char) * seq of (char) ==> ())public explicit operation loadScenario'(seq of (char) ==> ())public explicit operation evalSensors'(real ==> ())public explicit operation evalSingle'(real * seq of (char) * (unresolved Environment`tCtCurve) ==> ())static public instance variable debug'natprivate instance variable mWorld'(unresolved Environment`World)private instance variable mMaxSimTime'natprivate instance variable mLeftWheel'(unresolved Environment`Wheel)private instance variable mRightWheel'(unresolved Environment`Wheel)private instance variable mLeftHall'(unresolved Environment`HallSensor)private instance variable mRightHall'(unresolved Environment`HallSensor)private instance variable mUser'(unresolved Environment`User)public explicit operation Environment'((unresolved Environment`World) * nat ==> (unresolved Environment`Environment))private instance variable ain'(unresolved Environment`ISensorReal)private instance variable vin'(unresolved Environment`ISensorReal)private instance variable aout'(unresolved Environment`IActuatorReal)private instance variable vout'(unresolved Environment`IActuatorReal)private instance variable mValues'map (seq of (char)) to (real)public explicit operation setValue'(seq of (char) * real ==> ())private explicit operation setCosimValue'(seq of (char) * real ==> ())public explicit operation getValue'(seq of (char) ==> real)private explicit operation getCosimValue'(seq of (char) ==> real)private mutex predicate '?private mutex predicate '?private mutex predicate '?private explicit operation mainLoop'(() ==> ())private explicit operation terminate'(() ==> ())protected thread null'?private explicit operation printDiagnostics'(() ==> ())public explicit operation printEnvironment'(() ==> ())end Environmentclass DirectionSwitchprivate instance variable mController'(unresolved DirectionSwitch`Controller)public explicit operation DirectionSwitch'((unresolved DirectionSwitch`Controller) ==> (unresolved DirectionSwitch`DirectionSwitch))static public type tDirectionStatus'tDirectionStatuspublic explicit operation getStatus'(() ==> (unresolved DirectionSwitch`tDirectionStatus))end DirectionSwitchclass DTObjectprotected instance variable sampletime'realpublic explicit operation SetSampleTime'(real ==> ())end DTObjectclass HallSensorprivate instance variable mName'seq of (char)private instance variable mEnvironment'(unresolved HallSensor`Environment)private instance variable mWheel'(unresolved HallSensor`Wheel)private explicit function convert'(real -> nat)public explicit operation HallSensor'(seq of (char) * (unresolved HallSensor`Environment) * (unresolved HallSensor`Wheel) ==> (unresolved HallSensor`HallSensor))private explicit operation setSensor'(seq of (char) * bool ==> ())public explicit operation setSensors'(bool * bool * bool ==> ())public explicit operation evaluate'(() ==> ())end HallSensorclass LeftController is subclass of Controllerstatic private value KP1'realstatic private value KI1'realstatic private value KD1'realstatic private value BETA1'realpublic instance variable ctrl'(unresolved LeftController`DTControl)public instance variable mAccelerometer'(unresolved LeftController`Accelerometer)public instance variable mGyroscope'(unresolved LeftController`Gyroscope)public explicit operation LeftController'(() ==> (unresolved LeftController`LeftController))private instance variable mRight'[(unresolved LeftController`RightController)]public explicit operation setRightController'((unresolved LeftController`RightController) ==> ())private instance variable mLoopCnt'natprivate instance variable mTimeEntry'natprivate instance variable mDebug'natpublic explicit operation CtrlLoopEntry'(() ==> ())public explicit operation CtrlLoopBody'(() ==> ())public explicit operation CtrlLoopExit'(() ==> ())public explicit operation PowerUp'(() ==> ())public explicit operation printDiagnostics'(() ==> ())public explicit operation computeResponse'(((bool * bool * bool)) * ((real * real * real)) * real ==> real)end LeftControllerclass IOstatic public type filedirective'filedirectivestatic public explicit function writeval'(@p -> bool)static public explicit function fwriteval'(seq1 of (char) * @p * (unresolved IO`filedirective) -> bool)static public explicit function freadval'(seq1 of (char) -> (bool * [@p]))public explicit operation echo'(seq of (char) ==> bool)public explicit operation fecho'(seq of (char) * seq of (char) * [(unresolved IO`filedirective)] ==> bool)public explicit operation ferror'(() ==> seq of (char))static public explicit operation print'(? ==> ())static public explicit operation println'(? ==> ())static public explicit operation printf'(seq of (char) * seq of (?) ==> ())end IOclass MATHstatic public explicit function sin'(real +> real)static public explicit function cos'(real +> real)static public explicit function tan'(real -> real)static public explicit function cot'(real -> real)static public explicit function asin'(real -> real)static public explicit function acos'(real -> real)static public explicit function atan'(real +> real)static public explicit function acot'(real +> real)static public explicit function sqrt'(real -> real)static public explicit function pi_f'(() +> real)static public explicit operation srand'(int ==> ())static public explicit operation rand'(int ==> int)static public explicit operation srand2'(int ==> int)static public explicit function exp'(real +> real)static public explicit function ln'(real -> real)static public explicit function log'(real -> real)static public explicit function fac'(nat -> nat1)static public value pi'?end MATHclass IActuatorRealpublic explicit operation SetValue'(real ==> ())end IActuatorRealclass DTControl is subclass of DTObjectpublic explicit operation Output'(real ==> real)end DTControlclass MotorSensor is subclass of ISensorRealprivate instance variable mController'(unresolved MotorSensor`Controller)public explicit operation MotorSensor'((unresolved MotorSensor`Controller) ==> (unresolved MotorSensor`MotorSensor))public explicit operation GetValue'(() ==> real)public explicit operation getHallSensorData'(() ==> (bool * bool * bool))end MotorSensorclass PID is subclass of DTControlprotected instance variable k'realprotected instance variable tauI'realprotected instance variable tauD'realprotected instance variable beta'realprotected instance variable uP'realprotected instance variable uD'realprotected instance variable uI'realprotected instance variable prev_err'realpublic explicit operation PID'(real * real * real * real ==> (unresolved PID`PID))public explicit operation PID'(real * real * real ==> (unresolved PID`PID))public explicit operation PID'(() ==> (unresolved PID`PID))public explicit operation Output'(real ==> real)static private value DEF_K'realstatic private value DEF_TAUI'realstatic private value DEF_TAUD'realstatic private value DEF_BETA'realend PIDclass CSV is subclass of IOstatic public explicit function fwriteval'(seq1 of (char) * seq of (?) * (unresolved CSV`filedirective) -> bool)static public explicit function freadval'(seq1 of (char) * int -> (bool * [@p]))static public explicit function flinecount'(seq1 of (char) -> (bool * int))static public explicit operation ferror'(() ==> seq of (char))end CSVclass OnOffSwitchprivate instance variable mController'(unresolved OnOffSwitch`Controller)public explicit operation OnOffSwitch'((unresolved OnOffSwitch`Controller) ==> (unresolved OnOffSwitch`OnOffSwitch))public explicit operation getStatus'(() ==> bool)end OnOffSwitchclass Controllerstatic public value SAMPLETIME'?public instance variable mName'seq of (char)public instance variable mMotorActuator'(unresolved Controller`MotorActuator)public instance variable mMotorSensor'(unresolved Controller`MotorSensor)public explicit operation Controller'(seq of (char) ==> (unresolved Controller`Controller))protected instance variable mEnvironment'[(unresolved Controller`Environment)]public explicit operation setEnvironment'((unresolved Controller`Environment) ==> ())public explicit operation setValue'(seq of (char) * real ==> ())public explicit operation getValue'(seq of (char) ==> real)static protected value DEBUGCTRLLOOP'?protected explicit operation printDiagnostics'(nat ==> ())public explicit operation PowerUp'(() ==> ())async private explicit operation CtrlLoop'(() ==> ())public explicit operation CtrlLoopEntry'(() ==> ())public explicit operation CtrlLoopBody'(() ==> ())public explicit operation CtrlLoopExit'(() ==> ())protected thread null'?end Controllerclass RightController is subclass of Controllerstatic private value KP2'realstatic private value KI2'realstatic private value KD2'realstatic private value BETA2'realpublic instance variable ctrl'(unresolved RightController`DTControl)public instance variable mSafetySwitch'(unresolved RightController`SafetySwitch)public instance variable mOnOffSwitch'(unresolved RightController`OnOffSwitch)public instance variable mDirectionSwitch'(unresolved RightController`DirectionSwitch)public explicit operation RightController'(() ==> (unresolved RightController`RightController))private instance variable mLeft'[(unresolved RightController`LeftController)]public explicit operation setLeftController'((unresolved RightController`LeftController) ==> ())private instance variable mLoopCnt'natprivate instance variable mTimeEntry'natprivate instance variable mDebug'natpublic explicit operation CtrlLoopEntry'(() ==> ())public explicit operation CtrlLoopBody'(() ==> ())public explicit operation CtrlLoopExit'(() ==> ())public explicit operation PowerUp'(() ==> ())public explicit operation printDiagnostics'(() ==> ())public explicit operation computeResponse'(((bool * bool * bool)) * bool * bool * (unresolved DirectionSwitch`tDirectionStatus) ==> real)end RightControllerclass Actuator is subclass of IActuatorRealprivate instance variable value'realpublic explicit operation Actuator'(real ==> (unresolved Actuator`Actuator))public explicit operation Actuator'(() ==> (unresolved Actuator`Actuator))public explicit operation SetValue'(real ==> ())end Actuatorclass MotorActuator is subclass of IActuatorRealstatic private type tDriveStatus'tDriveStatusprivate instance variable mDriveStatus'(unresolved MotorActuator`tDriveStatus)private instance variable mController'(unresolved MotorActuator`Controller)public explicit operation MotorActuator'((unresolved MotorActuator`Controller) ==> (unresolved MotorActuator`MotorActuator))public explicit operation initActuator'(() ==> ())public explicit operation isActuated'(() ==> bool)public explicit operation setFreeRunning'(() ==> ())public explicit operation setActuated'(() ==> ())public explicit operation SetValue'(real ==> ())public explicit operation setPWM'(real ==> ())public explicit operation printDiagnostics'(() ==> ())end MotorActuatorclass ISensorRealpublic explicit operation GetValue'(() ==> real)end ISensorRealclass Gyroscopeprivate instance variable mController'(unresolved Gyroscope`Controller)public explicit operation Gyroscope'((unresolved Gyroscope`Controller) ==> (unresolved Gyroscope`Gyroscope))public explicit operation getYawRateData'(() ==> real)end Gyroscopeclass SafetySwitchprivate instance variable mController'(unresolved SafetySwitch`Controller)public explicit operation SafetySwitch'((unresolved SafetySwitch`Controller) ==> (unresolved SafetySwitch`SafetySwitch))public explicit operation getStatus'(() ==> bool)end SafetySwitchclass Worldstatic public value SIM_RESOLUTION'?static public value MAX_SIM_TIME'?static public instance variable cosim'boolpublic explicit operation run'(() ==> ())public explicit operation RunVdmRt'(() ==> ())public explicit operation RunScenario'(seq1 of (char) ==> ())public instance variable finish'boolprivate explicit operation waitForSimulationEnd'(() ==> ())public explicit operation signal'(() ==> ())private permission predicate 'boolend Worldclass PD is subclass of DTControlprotected instance variable k'realprotected instance variable tauD'realprotected instance variable beta'realprotected instance variable uD'realprotected instance variable prev_err'realpublic explicit operation PD'(real * real * real ==> (unresolved PD`PD))public explicit operation PD'(real * real ==> (unresolved PD`PD))public explicit operation PD'(() ==> (unresolved PD`PD))public explicit operation Output'(real ==> real)static private value DEF_K'realstatic private value DEF_TAUD'realstatic private value DEF_BETA'realend PDclass Accelerometerprivate instance variable mController'(unresolved Accelerometer`Controller)public explicit operation Accelerometer'((unresolved Accelerometer`Controller) ==> (unresolved Accelerometer`Accelerometer))public explicit operation getAccelerationData'(() ==> (real * real * real))end Accelerometerclass SetpointProfileCSVprivate instance variable filename'seq of (char)private instance variable lines'intprivate instance variable line'intprivate instance variable setpoint'realprivate instance variable next_setpoint'[((real * real))]public explicit operation SetpointProfileCSV'(real * seq of (char) ==> (unresolved SetpointProfileCSV`SetpointProfileCSV))public explicit operation SetpointProfileCSV'(seq of (char) ==> (unresolved SetpointProfileCSV`SetpointProfileCSV))private explicit operation ReadNextSetpoint'(() ==> ())public explicit operation GetSetpoint'(() ==> real)private explicit operation quit'(seq of (char) * seq of (?) ==> ())private explicit operation quit'(seq of (char) ==> ())end SetpointProfileCSVclass Userstatic private value gravity'realprivate instance variable mEnvironment'(unresolved User`Environment)private instance variable mLeftWheel'(unresolved User`Wheel)private instance variable mRightWheel'(unresolved User`Wheel)private instance variable last'natprivate instance variable angle'realpublic explicit operation User'((unresolved User`Environment) * (unresolved User`Wheel) * (unresolved User`Wheel) ==> (unresolved User`User))public explicit operation evaluate'(() ==> ())end Userclass PI is subclass of DTControlprotected instance variable k'realprotected instance variable tauI'realprotected instance variable uP'realprotected instance variable uI'realpublic explicit operation PI'(real * real ==> (unresolved PI`PI))public explicit operation PI'(() ==> (unresolved PI`PI))public explicit operation Output'(real ==> real)static private value DEF_K'realstatic private value DEF_TAUI'realend PIclass Wheelstatic private value MAX_ACC'realprivate instance variable mName'seq of (char)private instance variable mEnvironment'(unresolved Wheel`Environment)private instance variable last'natpublic instance variable acc'realpublic instance variable speed'realpublic instance variable position'realpublic explicit operation Wheel'(seq of (char) * (unresolved Wheel`Environment) ==> (unresolved Wheel`Wheel))private explicit operation isActuated'(() ==> bool)private explicit operation getPWM'(() ==> real)public explicit operation evaluate'(() ==> ())end Wheel
