RESULT:result:-1:-1,-1:module DEFAULTexports alldefinitionsstatic private p1'(unresolved DEFAULT`Path) = mk_token("A1North")static private p2'(unresolved DEFAULT`Path) = mk_token("A1South")static private p3'(unresolved DEFAULT`Path) = mk_token("A66East")static private p4'(unresolved DEFAULT`Path) = mk_token("A66West")static private lights'map ((unresolved DEFAULT`Path)) to ((unresolved DEFAULT`Light)) = {p1 |-> <Red>, p2 |-> <Red>, p3 |-> <Green>, p4 |-> <Green>}static private conflicts'set of ((unresolved DEFAULT`Conflict)) = {mk_Conflict(p1, p3), mk_Conflict(p1, p4), mk_Conflict(p2, p3), mk_Conflict(p2, p4), mk_Conflict(p3, p1), mk_Conflict(p4, p1), mk_Conflict(p3, p2), mk_Conflict(p4, p2)}static private kernel'(unresolved DEFAULT`Kernel) = mk_Kernel(lights, conflicts)static private Light = (<Amber> | <Green> | <Red>)static private Time = real	inv t == (t >= 0)static private Path = tokenstatic private Conflict = compose Conflict of path1'(unresolved DEFAULT`Path), path2'(unresolved DEFAULT`Path) end	inv mk_(unresolved DEFAULT`Conflict)(path1, path2) == (path1 <> path2)static private Kernel = compose Kernel of lights'map ((unresolved DEFAULT`Path)) to ((unresolved DEFAULT`Light)), conflicts'set of ((unresolved DEFAULT`Conflict)) end	inv mk_(unresolved DEFAULT`Kernel)(ls, cs) == (forall c in set cs & ((mk_Conflict((c.path2), (c.path1)) in set cs) and (((c.path1) in set (dom ls)) and (((c.path2) in set (dom ls)) and ((ls((c.path1)) = <Red>) or (ls((c.path2)) = <Red>))))))ToGreen' ((unresolved DEFAULT`Path) * (unresolved DEFAULT`Kernel) -> (unresolved DEFAULT`Kernel))	ToGreen(p, mk_(unresolved DEFAULT`Kernel)(lights, conflicts)) ==mk_Kernel(ChgLight(lights, p, <Green>), conflicts)	pre ((p in set (dom lights)) and ((lights(p) = <Red>) and (forall mk_(unresolved DEFAULT`Conflict)(p1, p2) in set conflicts & ((p = p1) => (lights(p2) = <Red>)))))ToRed' ((unresolved DEFAULT`Path) * (unresolved DEFAULT`Kernel) -> (unresolved DEFAULT`Kernel))	ToRed(p, mk_(unresolved DEFAULT`Kernel)(lights, conflicts)) ==mk_Kernel(ChgLight(lights, p, <Red>), conflicts)	pre ((p in set (dom lights)) and (lights(p) = <Amber>))ToAmber' ((unresolved DEFAULT`Path) * (unresolved DEFAULT`Kernel) -> (unresolved DEFAULT`Kernel))	ToAmber(p, mk_(unresolved DEFAULT`Kernel)(lights, conflicts)) ==mk_Kernel(ChgLight(lights, p, <Amber>), conflicts)	pre ((p in set (dom lights)) and (lights(p) = <Green>))ChgLight' ((map ((unresolved DEFAULT`Path)) to ((unresolved DEFAULT`Light))) * (unresolved DEFAULT`Path) * (unresolved DEFAULT`Light) -> (map ((unresolved DEFAULT`Path)) to ((unresolved DEFAULT`Light))))	ChgLight(lights, p, colour) ==(lights ++ {p |-> colour})end DEFAULT
