RESULT:result:-1:-1,-1:Proof Obligation 1' (Unproved)CheckIn, new_c' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 40'25(forall new_k'Key &  ((new_k not in set (desk~.issued)) =>    r in set dom (desk~.prev)))Proof Obligation 2' (Unproved)CheckIn' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 45'37(forall new_k'Key &  ((new_k not in set (desk~.issued)) =>    (let new_c'Card = mk_Card((desk~.prev)(r), new_k) in      (((desk.issued) = ((desk~.issued) union {new_k})) =>        (((desk.prev) = ((desk~.prev) ++ {r |-> new_k})) =>          ((g in set (dom guests~)) =>            g in set dom guests~))))))Proof Obligation 3' (Unproved)CheckIn' map compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 46'19(forall new_k'Key &  ((new_k not in set (desk~.issued)) =>    (let new_c'Card = mk_Card((desk~.prev)(r), new_k) in      (((desk.issued) = ((desk~.issued) union {new_k})) =>        (((desk.prev) = ((desk~.prev) ++ {r |-> new_k})) =>          (not (g in set (dom guests~)) =>            forall ldom1 in set dom guests~, rdom2 in set dom {g |-> {new_c}} &            ldom1 = rdom2 => guests~(ldom1) = {g |-> {new_c}}(rdom2)))))))Proof Obligation 4' (Unproved)CheckIn' operation post condition obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 31'1(exists [new_k'Key] & ((new_k not in set (desk~.issued)) and let new_c'Card = mk_Card((desk~.prev)(r), new_k) in (((desk.issued) = ((desk~.issued) union {new_k})) and (((desk.prev) = ((desk~.prev) ++ {r |-> new_k})) and (if (g in set (dom guests~))then (guests = (guests~ ++ {g |-> (guests~(g) union {new_c})}))else (guests = (guests~ munion {g |-> {new_c}})))))))Proof Obligation 5' (Unproved)CheckIn' operation satifiability obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 31'1(forall g'Guest, r'Room, oldstate'Hotel &  pre_CheckIn(g, r, oldstate) =>  post_CheckIn(g, r, oldstate, newstate))Proof Obligation 6' (Unproved)Enter' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 56'21((r in set (dom locks)) =>  ((g in set (dom guests)) =>    g in set dom guests))Proof Obligation 7' (Unproved)Enter' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 56'39((r in set (dom locks)) =>  ((g in set (dom guests)) =>    (forall c in set guests(g) &      r in set dom locks)))Proof Obligation 8' (Unproved)Enter' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 56'57((r in set (dom locks)) =>  ((g in set (dom guests)) =>    (forall c in set guests(g) &      (not ((c.fst) = locks(r)) =>        r in set dom locks))))Proof Obligation 9' (Unproved)Enter' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 58'22g in set dom guestsProof Obligation 10' (Unproved)Enter' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 59'13(forall c in set guests(g) &  r in set dom locks)Proof Obligation 11' (Unproved)Enter' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 60'13(forall c in set guests(g) &  (not (((c.fst) = locks(r)) and (locks = (locks~ ++ {r |-> (c.snd)}))) =>    r in set dom locks))Proof Obligation 12' (Unproved)Enter' operation post condition obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 49'1(exists [c in set guests(g)] & ((((c.fst) = locks(r)) and (locks = (locks~ ++ {r |-> (c.snd)}))) or (((c.snd) = locks(r)) and (locks = locks~))))Proof Obligation 13' (Unproved)Enter' operation satifiability obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 49'1(forall r'Room, g'Guest, oldstate'Hotel &  pre_Enter(r, g, oldstate) =>  post_Enter(r, g, oldstate, newstate))Proof Obligation 14' (Unproved)CheckInExpl' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 64'7exists new_k'Key & (new_k not in set (desk.issued))Proof Obligation 15' (Unproved)CheckInExpl, new_c' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 66'25r in set dom (desk.prev)Proof Obligation 16' (Unproved)CheckInExpl' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 68'8-- After desk.issued '= ((desk.issued) union {new_k})let h = Hotel in (((dom ((h.desk).prev)) subset (dom (h.locks))) and ((dunion {{(c.fst), (c.snd)} | [c in set (dunion (rng (h.guests)))]}) subset ((h.desk).issued)))Proof Obligation 17' (Unproved)CheckInExpl' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 69'8-- After desk.prev '= ((desk.prev) ++ {r |-> new_k})let h = Hotel in (((dom ((h.desk).prev)) subset (dom (h.locks))) and ((dunion {{(c.fst), (c.snd)} | [c in set (dunion (rng (h.guests)))]}) subset ((h.desk).issued)))Proof Obligation 18' (Unproved)CheckInExpl' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 70'8-- After guests '= (if (g in set (dom guests))then (guests ++ {g |-> (guests(g) union {new_c})})else (guests munion {g |-> {new_c}}))let h = Hotel in (((dom ((h.desk).prev)) subset (dom (h.locks))) and ((dunion {{(c.fst), (c.snd)} | [c in set (dunion (rng (h.guests)))]}) subset ((h.desk).issued)))Proof Obligation 19' (Trivial by <x in set s => x in set s>)CheckInExpl' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 71'45((g in set (dom guests)) =>  g in set dom guests)Proof Obligation 20' (Unproved)CheckInExpl' map compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 72'28(not (g in set (dom guests)) =>  forall ldom1 in set dom guests, rdom2 in set dom {g |-> {new_c}} &  ldom1 = rdom2 => guests(ldom1) = {g |-> {new_c}}(rdom2))Proof Obligation 21' (Unproved)EnterExpl' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 88'21((r in set (dom locks)) =>  ((g in set (dom guests)) =>    g in set dom guests))Proof Obligation 22' (Unproved)EnterExpl' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 88'39((r in set (dom locks)) =>  ((g in set (dom guests)) =>    (forall c in set guests(g) &      r in set dom locks)))Proof Obligation 23' (Unproved)EnterExpl' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 88'57((r in set (dom locks)) =>  ((g in set (dom guests)) =>    (forall c in set guests(g) &      (not ((c.fst) = locks(r)) =>        r in set dom locks))))Proof Obligation 24' (Unproved)EnterExpl' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 82'7exists c in set guests(g) & (((c.fst) = locks(r)) or ((c.snd) = locks(r)))Proof Obligation 25' (Unproved)EnterExpl' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 82'16g in set dom guestsProof Obligation 26' (Unproved)EnterExpl' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 82'40r in set dom locksProof Obligation 27' (Unproved)EnterExpl' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 82'60(not ((c.fst) = locks(r)) =>  r in set dom locks)Proof Obligation 28' (Unproved)EnterExpl' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 84'16r in set dom locksProof Obligation 29' (Unproved)EnterExpl' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 85'10-- After locks '= (locks ++ {r |-> (c.snd)})let h = Hotel in (((dom ((h.desk).prev)) subset (dom (h.locks))) and ((dunion {{(c.fst), (c.snd)} | [c in set (dunion (rng (h.guests)))]}) subset ((h.desk).issued)))Proof Obligation 30' (Unproved)IssueCard' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 92'7exists k'Key & (k not in set (desk.issued))Proof Obligation 31' (Unproved)IssueCard' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 94'6-- After desk.issued '= ((desk.issued) union {k})let h = Hotel in (((dom ((h.desk).prev)) subset (dom (h.locks))) and ((dunion {{(c.fst), (c.snd)} | [c in set (dunion (rng (h.guests)))]}) subset ((h.desk).issued)))Proof Obligation 32' (Unproved)AddRoom' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 100'4-- After desk.prev '= ((desk.prev) munion {r |-> k})let h = Hotel in (((dom ((h.desk).prev)) subset (dom (h.locks))) and ((dunion {{(c.fst), (c.snd)} | [c in set (dunion (rng (h.guests)))]}) subset ((h.desk).issued)))Proof Obligation 33' (Unproved)AddRoom' map compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 100'17forall ldom1 in set dom (desk.prev), rdom2 in set dom {r |-> k} &ldom1 = rdom2 => (desk.prev)(ldom1) = {r |-> k}(rdom2)Proof Obligation 34' (Unproved)AddRoom' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 101'4-- After locks '= (locks munion {r |-> k})let h = Hotel in (((dom ((h.desk).prev)) subset (dom (h.locks))) and ((dunion {{(c.fst), (c.snd)} | [c in set (dunion (rng (h.guests)))]}) subset ((h.desk).issued)))Proof Obligation 35' (Unproved)AddRoom' map compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 101'13forall ldom1 in set dom locks, rdom2 in set dom {r |-> k} &ldom1 = rdom2 => locks(ldom1) = {r |-> k}(rdom2)Proof Obligation 36' (Unproved)AddGuest' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 107'3-- After guests '= (guests ++ {g |-> (if (g in set (dom guests))then (guests(g) union cs)else cs)})let h = Hotel in (((dom ((h.desk).prev)) subset (dom (h.locks))) and ((dunion {{(c.fst), (c.snd)} | [c in set (dunion (rng (h.guests)))]}) subset ((h.desk).issued)))Proof Obligation 37' (Trivial by <x in set s => x in set s>)AddGuest' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/hotel/hotel.vdmsl) at line 108'35((g in set (dom guests)) =>  g in set dom guests)
