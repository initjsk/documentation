module AS

exports all 

definitions 

types 
Identifier = seq of char;

Spec ::
  sys      : System 
  classmap : map Identifier to Class;

System ::
  cpus : set of (Identifier * (<FP> | <FCFS>))
  buses: map Identifier to set of Identifier
  deployed : map Identifier to set of ObjRef;
  
Class ::
  thread : ThreadDefinition 
  opdefs : OperationDefinitions 
  sync   : SynchronizationDefinitions;

ObjRef 			= token;

---
--- OPERATION DEFINITIONS
---
OperationDefinitions ::
	operationList : seq of OperationDefinition;

OperationDefinition ::
	shape : OperationShape;

OperationShape =
	ExplicitOperation;

ExplicitOperation ::
	identifier 	: Identifier
	body 		: OperationBody;

OperationBody ::
	statement : [Statement];

---
--- Permision
---
ActiveExpression  ::
	name : Name;
	
---
--- THREAD DEFINITIONS
---
ThreadDefinition ::
	threadSpecification : [ThreadSpecification];

ThreadSpecification =
--	PeriodicThread |
	ProcedureThread ;

--PeriodicThread ::
--	args : seq of Expression
--	name : Name;

ProcedureThread ::
	statement : Statement;  
	
---
--- SYNCHRONIZATION 
---
SynchronizationDefinitions ::
	syncList : seq of PermissionPredicate;

PermissionPredicate ::
	name : Name
	expression : Expression;
	
---
--- EXPRESSIONS
---
Expression = 	ActiveExpression | 
				Name;
				
Name ::
	classIdentifier : [Identifier]
	identifier : Identifier;

---
--- STATEMENTS
---
Statement =	AssignStatement |
			CallStatement | 
			token;
			
AssignStatement ::
	lhs : Name
	expression : Expression;

CallStatement ::
	name : Name
	
end AS