RESULT:result:-1:-1,-1:module DEFAULTexports alldefinitionsstatic private Tracker = compose Tracker of containers'(unresolved DEFAULT`ContainerInfo), phases'(unresolved DEFAULT`PhaseInfo) end	inv mk_(unresolved DEFAULT`Tracker)(containers, phases) == (Consistent(containers, phases) and (PhasesDistinguished(phases) and MaterialSafe(containers, phases)))static private ContainerInfo = map ((unresolved DEFAULT`ContainerId)) to ((unresolved DEFAULT`Container))static private PhaseInfo = map ((unresolved DEFAULT`PhaseId)) to ((unresolved DEFAULT`Phase))static private Container = compose Container of fiss_mass'real, material'(unresolved DEFAULT`Material) endstatic private Phase = compose Phase of contents'set of ((unresolved DEFAULT`ContainerId)), expected_materials'set of ((unresolved DEFAULT`Material)), capacity'nat end	inv p == (((card (p.contents)) <= (p.capacity)) and ((p.expected_materials) <> {}))static private ContainerId = tokenstatic private PhaseId = tokenstatic private Material = tokenIntroduce' ((unresolved DEFAULT`Tracker) * (unresolved DEFAULT`ContainerId) * real * (unresolved DEFAULT`Material) -> (unresolved DEFAULT`Tracker))	Introduce(trk, cid, quan, mat) ==mk_Tracker(((trk.containers) munion {cid |-> mk_Container(quan, mat)}), (trk.phases))	pre (cid not in set (dom (trk.containers)))Permission' ((unresolved DEFAULT`Tracker) * (unresolved DEFAULT`ContainerId) * (unresolved DEFAULT`PhaseId) -> bool)	Permission(mk_(unresolved DEFAULT`Tracker)(containers, phases), cid, dest) ==((cid in set (dom containers)) and ((dest in set (dom phases)) and (((card (phases(dest).contents)) < (phases(dest).capacity)) and ((containers(cid).material) in set (phases(dest).expected_materials)))))Remove' ((unresolved DEFAULT`Tracker) * (unresolved DEFAULT`ContainerId) * (unresolved DEFAULT`PhaseId) -> (unresolved DEFAULT`Tracker))	Remove(mk_(unresolved DEFAULT`Tracker)(containers, phases), cid, source) ==let pha = mk_Phase(((phases(source).contents) \ {cid}), (phases(source).expected_materials), (phases(source).capacity)) in mk_Tracker(containers, (phases ++ {source |-> pha}))	pre ((source in set (dom phases)) and (cid in set (phases(source).contents)))Move' ((unresolved DEFAULT`Tracker) * (unresolved DEFAULT`ContainerId) * (unresolved DEFAULT`PhaseId) * (unresolved DEFAULT`PhaseId) -> (unresolved DEFAULT`Tracker))	Move(trk, cid, ptoid, pfromid) ==let cont = (trk.phases)(ptoid) in let pha = mk_Phase(((cont.contents) union {cid}), (cont.expected_materials), (cont.capacity)) in mk_Tracker((trk.containers), ((Remove(trk, cid, pfromid).phases) ++ {ptoid |-> pha}))	pre (Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid))Delete' ((unresolved DEFAULT`Tracker) * (unresolved DEFAULT`ContainerId) * (unresolved DEFAULT`PhaseId) -> (unresolved DEFAULT`Tracker))	Delete(tkr, cid, source) ==mk_Tracker(({cid} <-' (tkr.containers)), (Remove(tkr, cid, source).phases))	pre pre_Remove(tkr, cid, source)Consistent' ((unresolved DEFAULT`ContainerInfo) * (unresolved DEFAULT`PhaseInfo) -> bool)	Consistent(containers, phases) ==(forall ph in set (rng phases) & ((ph.contents) subset (dom containers)))PhasesDistinguished' ((unresolved DEFAULT`PhaseInfo) -> bool)	PhasesDistinguished(phases) ==(not (exists [p1, p2 in set (dom phases)] & ((p1 <> p2) and (((phases(p1).contents) inter (phases(p2).contents)) <> {}))))MaterialSafe' ((unresolved DEFAULT`ContainerInfo) * (unresolved DEFAULT`PhaseInfo) -> bool)	MaterialSafe(containers, phases) ==(forall ph in set (rng phases) & (forall cid in set (ph.contents) & ((cid in set (dom containers)) and ((containers(cid).material) in set (ph.expected_materials)))))end DEFAULT, module DEFAULTexports alldefinitionsstatic private glass = mk_token("Glass")static private liquid = mk_token("liquid")static private metal = mk_token("metal")static private plastic = mk_token("plastic")static private all_material = {glass, liquid, metal, plastic}static private unpacking_inital = mk_Phase({}, all_material, 5)static private sorting_inital = mk_Phase({}, all_material, 6)static private assay_inital = mk_Phase({}, all_material, 5)static private compaction_inital = mk_Phase({}, {glass, metal, plastic}, 3)static private storage_inital = mk_Phase({}, {glass, metal, plastic}, 50)static private coninfo_inital = {}static private cid1'(unresolved DEFAULT`ContainerId) = mk_token(42)static private phases_inital = {mk_token("Unpacking") |-> unpacking_inital, mk_token("Sorting") |-> sorting_inital, mk_token("Assay") |-> assay_inital, mk_token("Compaction") |-> compaction_inital, mk_token("Storage") |-> storage_inital}static private tracker_inital = mk_Tracker(coninfo_inital, phases_inital)SetUp' (() -> (unresolved DEFAULT`Tracker))	SetUp() ==tracker_initalend DEFAULT
