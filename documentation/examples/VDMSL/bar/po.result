RESULT:result:-1:-1,-1:Proof Obligation 1' (Unproved)AuxSeqToBag' recursive function obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 58'3(forall s'seq of (Elem), b'Bag &  (not [] = s =>    (exists [e] ^ rest'seq of (Elem) & [e] ^ rest = s =>    let [e] ^ rest = s in      LenPar1(s, b) > LenPar1(rest, Add(e, b)))))Proof Obligation 2' (Unproved)AuxSeqToBag' cases exhaustive obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 60'5(forall s'seq of (Elem), b'Bag &  s = [] or (exists [e] ^ rest'seq of (Elem) & s = [e] ^ rest))Proof Obligation 3' (Trivial by <x in set s => x in set s>)Add' map apply obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 83'22(forall e'Elem, b'Bag &  ((e in set (dom b)) =>    e in set dom b))Proof Obligation 4' (Trivial by <x in set s => x in set s>)Remove' map apply obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 89'13(forall e'Elem, b'Bag &  ((e in set (dom b)) =>    e in set dom b))Proof Obligation 5' (Unproved)Remove' map apply obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 91'27(forall e'Elem, b'Bag &  ((e in set (dom b)) =>    (not (b(e) = 1) =>      e in set dom b)))Proof Obligation 6' (Unproved)Remove' subtype obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 86'3(forall e'Elem, b'Bag &  (is_((if (e in set (dom b))  then (if (b(e) = 1)  then ({e} <-' b)  else (b ++ {e |-> (b(e) - 1)}))  else b), map (Elem) to (nat1))))Proof Obligation 7' (Trivial by <x in set s => x in set s>)Count' map apply obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 97'10(forall e'Elem, b'Bag &  ((e in set (dom b)) =>    e in set dom b))Proof Obligation 8' (Unproved)Join' map set compatible obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 108'5(forall b1'Bag, b2'Bag &  forall m1, m2 in set {{e |-> Max(Count(e, b1), Count(e, b2))} | e in set ((dom b1) union (dom b2))} &    forall d3 in set dom m1, d4 in set dom m2 &      d3 = d4 => m1(d3) = m2(d4))Proof Obligation 9' (Unproved)Join' subtype obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 106'3(forall b1'Bag, b2'Bag &  (is_({e |-> Max(Count(e, b1), Count(e, b2)) | e in set ((dom b1) union (dom b2))}, map (Elem) to (nat1))))Proof Obligation 10' (Unproved)Union' map set compatible obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 113'5(forall b1'Bag, b2'Bag &  forall m1, m2 in set {{e |-> (Count(e, b1) + Count(e, b2))} | e in set ((dom b1) union (dom b2))} &    forall d3 in set dom m1, d4 in set dom m2 &      d3 = d4 => m1(d3) = m2(d4))Proof Obligation 11' (Unproved)Union' subtype obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 111'3(forall b1'Bag, b2'Bag &  (is_({e |-> (Count(e, b1) + Count(e, b2)) | e in set ((dom b1) union (dom b2))}, map (Elem) to (nat1))))Proof Obligation 12' (Unproved)Difference' map set compatible obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 123'5(forall b1'Bag, b2'Bag &  forall m1, m2 in set {{e |-> (Count(e, b1) - Count(e, b2))} | e in set (dom b1) & (Count(e, b1) > Count(e, b2))} &    forall d3 in set dom m1, d4 in set dom m2 &      d3 = d4 => m1(d3) = m2(d4))Proof Obligation 13' (Unproved)Difference' subtype obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 121'3(forall b1'Bag, b2'Bag &  (is_({e |-> (Count(e, b1) - Count(e, b2)) | e in set (dom b1) & (Count(e, b1) > Count(e, b2))}, map (Elem) to (nat1))))Proof Obligation 14' (Unproved)Size' let be st existence obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 134'14(forall b'Bag &  (not (b = {}) =>    exists e in set (dom b)))Proof Obligation 15' (Unproved)Size' map apply obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 136'10(forall b'Bag &  (not (b = {}) =>    (forall e in set (dom b) &      e in set dom b)))Proof Obligation 16' (Unproved)Size' recursive function obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 130'3(forall b'Bag &  (not (b = {}) =>    (forall e in set (dom b) &      CardDom(b) > CardDom(({e} <-' b)))))Proof Obligation 17' (Unproved)Intersection' map set compatible obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 147'5(forall b1'Bag, b2'Bag &  forall m1, m2 in set {{e |-> Min(Count(e, b1), Count(e, b2))} | e in set ((dom b1) inter (dom b2))} &    forall d3 in set dom m1, d4 in set dom m2 &      d3 = d4 => m1(d3) = m2(d4))Proof Obligation 18' (Unproved)Intersection' subtype obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 145'3(forall b1'Bag, b2'Bag &  (is_({e |-> Min(Count(e, b1), Count(e, b2)) | e in set ((dom b1) inter (dom b2))}, map (Elem) to (nat1))))Proof Obligation 19' (Unproved)baga' map sequence compatible obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 160'16forall m1, m2 in set {{<A> |-> 3}, {<B> |-> 2}, {<C> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 20' (Unproved)bagb' map sequence compatible obligation in 'BAG' (../../documentation/examples/VDMSL/bar/bag.vdmsl) at line 161'16forall m1, m2 in set {{<A> |-> 1}, {<C> |-> 5}, {<D> |-> 4}, {<E> |-> 1}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 21' (Unproved)TestAdd1' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 43'5forall m1, m2 in set {{<A> |-> 3}, {<B> |-> 2}, {<C> |-> 5}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 22' (Unproved)TestAdd2' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 48'5forall m1, m2 in set {{<A> |-> 3}, {<B> |-> 2}, {<C> |-> 4}, {<D> |-> 1}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 23' (Unproved)TestDifference' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 61'5forall m1, m2 in set {{<A> |-> 2}, {<B> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 24' (Unproved)TestIntersection' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 78'5forall m1, m2 in set {{<A> |-> 1}, {<C> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 25' (Unproved)TestJoin' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 83'5forall m1, m2 in set {{<A> |-> 3}, {<B> |-> 2}, {<C> |-> 5}, {<D> |-> 4}, {<E> |-> 1}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 26' (Unproved)TestRemove1' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 89'5forall m1, m2 in set {{<C> |-> 5}, {<D> |-> 4}, {<E> |-> 1}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 27' (Unproved)TestRemove2' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 94'5forall m1, m2 in set {{<A> |-> 2}, {<B> |-> 2}, {<C> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 28' (Unproved)TestSeqToBag' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 103'5forall m1, m2 in set {{<A> |-> 3}, {<B> |-> 1}, {<C> |-> 1}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 29' (Unproved)TestSubBag2' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 115'16forall m1, m2 in set {{<A> |-> 2}, {<C> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 30' (Unproved)TestUnion' map sequence compatible obligation in 'BAGTEST' (../../documentation/examples/VDMSL/bar/bagtest.vdmsl) at line 120'5forall m1, m2 in set {{<A> |-> 4}, {<B> |-> 2}, {<C> |-> 9}, {<D> |-> 4}, {<E> |-> 1}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 31' (Trivial by <x in set s => x in set s>)BuyStock' map apply obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 64'26(forall supps'map (Supplier) to (Stock), s'Supplier, stock'Order, mk_(c, r)'Pub &  ((s in set (dom supps)) =>    s in set dom supps))Proof Obligation 32' (Unproved)RestockCellar' let be st existence obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 98'11(forall cl'CellarLevel, mk_(c, r)'Pub, sb'map (Supplier) to (Stock) &  (not (sb = {}) =>    exists s in set (dom sb)))Proof Obligation 33' (Unproved)RestockCellar, can_restock' map apply obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 104'53(forall cl'CellarLevel, mk_(c, r)'Pub, sb'map (Supplier) to (Stock) &  (not (sb = {}) =>    (forall s in set (dom sb) &      (let missing'Bag = BAG`Difference(cl, c) in        ((BAG`Size(missing) > 0) =>          s in set dom sb)))))Proof Obligation 34' (Unproved)RestockCellar' recursive function obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 92'3(forall cl'CellarLevel, mk_(c, r)'Pub, sb'map (Supplier) to (Stock) &  (not (sb = {}) =>    (forall s in set (dom sb) &      (let missing'Bag = BAG`Difference(cl, c) in        ((BAG`Size(missing) > 0) =>          (let can_restock'Bag = BAG`Intersection(missing, sb(s)) in            CardCellar(cl, mk_(c, r), sb) > CardCellar(cl, mk_(BAG`Union(c, can_restock), r), ({s} <-' sb))))))))Proof Obligation 35' (Unproved)HighestStock' let be st existence obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 143'11(forall supps'map (Supplier) to (Stock) &  (not ((dom supps) = {}) =>    exists s in set (dom supps)))Proof Obligation 36' (Unproved)HighestStock' map apply obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 145'18(forall supps'map (Supplier) to (Stock) &  (not ((dom supps) = {}) =>    (forall s in set (dom supps) &      s in set dom supps)))Proof Obligation 37' (Unproved)HighestStock' recursive function obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 138'3(forall supps'map (Supplier) to (Stock) &  (not ((dom supps) = {}) =>    (forall s in set (dom supps) &      CardDom(supps) > CardDom(({s} <-' supps)))))Proof Obligation 38' (Unproved)cellarlevel1' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 157'18forall m1, m2 in set {{<A> |-> 5}, {<B> |-> 5}, {<C> |-> 3}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 39' (Unproved)barlevel1' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 158'15forall m1, m2 in set {{<A> |-> 2}, {<B> |-> 2}, {<C> |-> 5}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 40' (Unproved)cellar1' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 159'13forall m1, m2 in set {{<A> |-> 8}, {<B> |-> 5}, {<C> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 41' (Unproved)cellar2' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 160'13forall m1, m2 in set {{<B> |-> 1}, {<C> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 42' (Unproved)bar1' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 161'10forall m1, m2 in set {{<A> |-> 2}, {<B> |-> 3}, {<C> |-> 6}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 43' (Unproved)bar2' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 162'10forall m1, m2 in set {{<A> |-> 3}, {<C> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 44' (Unproved)bar3' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 163'10forall m1, m2 in set {{<A> |-> 3}, {<B> |-> 3}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 45' (Unproved)supps1' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 170'24forall m1, m2 in set {{<B> |-> 10}, {<C> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 46' (Unproved)supps1' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 171'27forall m1, m2 in set {{<B> |-> 1}, {<C> |-> 10}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 47' (Unproved)supps1' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 169'12forall m1, m2 in set {{"Fizz" |-> {<A> |-> 10}}, {"Real" |-> {<B> |-> 10, <C> |-> 2}}, {"Scrumpy" |-> {<B> |-> 1, <C> |-> 10}}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 48' (Unproved)supps2' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 173'24forall m1, m2 in set {{<B> |-> 1}, {<C> |-> 5}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 49' (Unproved)supps2' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 174'27forall m1, m2 in set {{<B> |-> 1}, {<C> |-> 10}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 50' (Unproved)supps2' map sequence compatible obligation in 'BAR' (../../documentation/examples/VDMSL/bar/bar.vdmsl) at line 172'12forall m1, m2 in set {{"Fizz" |-> {<A> |-> 10}}, {"Real" |-> {<B> |-> 1, <C> |-> 5}}, {"Scrumpy" |-> {<B> |-> 1, <C> |-> 10}}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)
