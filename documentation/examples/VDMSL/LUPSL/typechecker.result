WARNING:LUPSL.vdmsl:5012:30,9:Recursive function has no measure.
RESULT:result:-1:-1,-1:module DEFAULTexports alldefinitionsstatic private array = seq1 of (int)static private a1'array = [1, 2, 9, 4, 7, 3]static private a2'array = [4, 3, 2, 1]static private a3'seq1 of (nat1) = [1, 2, 3, 4]static private a4'seq1 of (nat1) = [2]static private a5'seq1 of (nat1) = [2, 2, 2, 2]MaxOfSet' (set of (int) -> int)	MaxOfSet(s) ==let e in set s in (if ((card s) = 1)then eelse let mr'int = MaxOfSet((s \ {e})) in (if (e > mr)then eelse mr))	pre (s <> {})	post ((RESULT in set s) and (forall e in set s & (e <= RESULT)))CardInt' (set of (int) -> nat)	CardInt(s) ==(card s)lupsltok' (array * nat1 -> nat)	lupsltok(a, k) ==let compatible'set of (nat) = {lupsltok(a, j) | [j in set {1, ... ,(k - 1)}] & (a(j) <= a(k))} in (if (compatible = {})then 1else (MaxOfSet(compatible) + 1))lupsl' (array -> nat)	lupsl(a) ==MaxOfSet({lupsltok(a, j) | [j in set (inds a)]})ascending' (array * set of (int) -> bool)	ascending(a, s) ==(forall i, j in set s & ((i < j) => (a(i) <= a(j))))	pre (s subset (inds a))lupslSpec' (array -> int)	lupslSpec(a) ==MaxOfSet({(card s) | [s in set (power (inds a))] & ascending(a, s)})lupslOp1Laski (array ==> nat)	lupslOp1Laski(a) ==(lupsls'set of (nat) '= {}for all k in set (inds a) dolupsls '= (lupsls union {lupsltok(a, k)});return (MaxOfSet(lupsls)))	post (lupslSpec(a) = RESULT)state lupsof[lupslarr'array]	init s == (s = mk_lups([1]))lupsmOp1Gries (array ==> nat)	lupsmOp1Gries(a) ==(lupslarr '= [a(1)];for k = 2 to (len a)lupsm4kop1Gries(a, k);return ((len lupslarr)))	post (lupslSpec(a) = RESULT)lupsm4kop1Gries (array * nat1 ==> ())	lupsm4kop1Gries(a, k) ==(i'int '= (undefined)if (lupslarr((len lupslarr)) <= a(k))thenlupslarr '= (lupslarr ^ [a(k)])else(i '= (iota x in set {1, ... ,(len lupslarr)} & ((lupslarr(x) > a(k)) and (forall j in set {1, ... ,(x - 1)} & (lupslarr(j) <= a(k)))));lupslarr(i) '= a(k)))	pre (k in set (inds a))lupslOp2Laski (array ==> nat)	lupslOp2Laski(a) ==(lupslmax'nat '= 0for k = 1 to (len a)let private value lak'nat in if (lak > lupslmax)thenlupslmax '= lak;return (lupslmax))	post (lupslSpec(a) = RESULT)lupsmOp2Gries (array ==> nat)	lupsmOp2Gries(a) ==(lupslarr '= [a(1)];for k = 2 to (len a)lupsm4kop2Gries(a, k);return ((len lupslarr)))	post (lupslSpec(a) = RESULT)lupsm4kop2Gries (array * nat1 ==> ())	lupsm4kop2Gries(a, k) ==(i'int '= (undefined)if (lupslarr((len lupslarr)) <= a(k))thenlupslarr '= (lupslarr ^ [a(k)])else(i '= 1;while (lupslarr(i) <= a(k)) do i '= (i + 1);lupslarr(i) '= a(k)))	pre (k in set (inds a))lupslOp3Laski (array ==> nat)	lupslOp3Laski(a) ==(lupslmax'nat '= 0for k = 1 to (len a)let private value lak'nat in if (lak > lupslmax)thenlupslmax '= lak;return (lupslmax))	post (lupslSpec(a) = RESULT)lupsltokop1Laski (array * nat1 ==> nat)	lupsltokop1Laski(a, k) ==(compatible'set of (int) '= {}erg'int '= (undefined)for j = 1 to (k - 1)if (a(j) <= a(k))thencompatible '= (compatible union {lupslarr(j)});if (compatible = {})thenerg '= 1elseerg '= (MaxOfSet(compatible) + 1);lupslarr '= (lupslarr ^ [erg]);return (erg))	pre (k in set (inds a))lupsmOp3Gries (array ==> nat)	lupsmOp3Gries(a) ==(lupslarr '= [a(1)];for k = 2 to (len a)lupsm4kop3Gries(a, k);return ((len lupslarr)))	post (lupslSpec(a) = RESULT)lupsm4kop3Gries (array * nat1 ==> ())	lupsm4kop3Gries(a, k) ==(li'int '= (undefined)re'int '= (undefined)m'int '= (undefined)if (lupslarr((len lupslarr)) <= a(k))thenlupslarr '= (lupslarr ^ [a(k)])elseif (a(k) < lupslarr(1))thenlupslarr(1) '= a(k)else(li '= 1;re '= (len lupslarr);while (li <> (re - 1)) do (m '= ((li + re) div 2);if (lupslarr(m) <= a(k))thenli '= melsere '= m);lupslarr(re) '= a(k)))	pre (k in set (inds a))lupslOp4Laski (array ==> nat)	lupslOp4Laski(a) ==(lupslmax'nat '= 0for k = 1 to (len a)let private value lak'nat in if (lak > lupslmax)thenlupslmax '= lak;return (lupslmax))	post (lupslSpec(a) = RESULT)lupsltokop2Laski (array * nat1 ==> nat)	lupsltokop2Laski(a, k) ==(erg'int '= 0for j = 1 to (k - 1)if (a(j) <= a(k))thenif (erg < lupslarr(j))thenerg '= lupslarr(j);erg '= (erg + 1);lupslarr '= (lupslarr ^ [erg]);return (erg))	pre (k in set (inds a))end DEFAULT
