RESULT:result:-1:-1,-1:module DEFAULTexports alldefinitionsstatic private Country = seq of (char)static private Relation = set of ((((unresolved DEFAULT`Country) * (unresolved DEFAULT`Country))))static private Colour = set of ((unresolved DEFAULT`Country))static private Colouring = set of ((unresolved DEFAULT`Colour))isRelation' ((unresolved DEFAULT`Relation) -> bool)	isRelation(r) ==(forall mk_(c1, c2) in set r & (c1 <> c2))areNb' ((unresolved DEFAULT`Country) * (unresolved DEFAULT`Country) * (unresolved DEFAULT`Relation) -> bool)	areNb(cn1, cn2, r) ==((mk_(cn1, cn2) in set r) or (mk_(cn2, cn1) in set r))CountriesRel' ((unresolved DEFAULT`Relation) -> set of ((unresolved DEFAULT`Country)))	CountriesRel(r) ==(dunion {{c1, c2} | [mk_(c1, c2) in set r]})sameColour' ((unresolved DEFAULT`Country) * (unresolved DEFAULT`Country) * (unresolved DEFAULT`Colouring) -> bool)	sameColour(cn1, cn2, cols) ==(exists [col in set cols] & ((cn1 in set col) and (cn2 in set col)))CountriesCol' ((unresolved DEFAULT`Colouring) -> set of ((unresolved DEFAULT`Country)))	CountriesCol(cols) ==(dunion cols)isColouring' ((unresolved DEFAULT`Colouring) -> bool)	isColouring(cols) ==(forall col1, col2 in set cols & ((col1 <> col2) => ((col1 inter col2) = {})))isColouringOf' ((unresolved DEFAULT`Colouring) * set of ((unresolved DEFAULT`Country)) -> bool)	isColouringOf(cols, cns) ==(CountriesCol(cols) = cns)nbDistinctColours' ((unresolved DEFAULT`Colouring) * (unresolved DEFAULT`Relation) -> bool)	nbDistinctColours(cols, r) ==(forall cn1, cn2 in set CountriesRel(r) & (areNb(cn1, cn2, r) => (not sameColour(cn1, cn2, cols))))private colMap((r'(unresolved DEFAULT`Relation)))cols'(unresolved DEFAULT`Colouring)	pre isRelation(r)	post (isColouring(cols) and (isColouringOf(cols, CountriesRel(r)) and nbDistinctColours(cols, r)))canBeExtBy' ((unresolved DEFAULT`Colour) * (unresolved DEFAULT`Country) * (unresolved DEFAULT`Relation) -> bool)	canBeExtBy(col, c, r) ==(forall c1 in set col & (not areNb(c1, c, r)))extndCol' ((unresolved DEFAULT`Colouring) * (unresolved DEFAULT`Country) * (unresolved DEFAULT`Relation) -> (unresolved DEFAULT`Colouring))	extndCol(cols, c, r) ==(if (cols = {})then {{c}}else let col in set cols in (if canBeExtBy(col, c, r)then (({({c} union col)} union cols) \ {col})else ({col} union extndCol((cols \ {col}), c, r))))CardColouring' ((unresolved DEFAULT`Colouring) * (unresolved DEFAULT`Country) * (unresolved DEFAULT`Relation) -> nat)	CardColouring(cols, -, -) ==(card cols)colCntrs' (set of ((unresolved DEFAULT`Country)) * (unresolved DEFAULT`Relation) -> (unresolved DEFAULT`Colouring))	colCntrs(cs, r) ==(if (cs = {})then {}else let c in set cs in extndCol(colCntrs((cs \ {c}), r), c, r))CardCountry' (set of ((unresolved DEFAULT`Country)) * (unresolved DEFAULT`Relation) -> nat)	CardCountry(cs, -) ==(card cs)colMapExpl' ((unresolved DEFAULT`Relation) -> (unresolved DEFAULT`Colouring))	colMapExpl(r) ==colCntrs(CountriesRel(r), r)	pre isRelation(r)end DEFAULT
