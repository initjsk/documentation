RESULT:result:-1:-1,-1:Proof Obligation 1' (Trivial by <not x = y => x <> y>)HA, change, targetTemp, currentTemp, targetHumid, currentHumid' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 44'77(forall haInputs'HAInputs, outputSoFar'HAOut, curTime'nat &  (not (haInputs = []) =>    haInputs <> []))Proof Obligation 2' (Trivial by <not x = y => x <> y>)HA, rest' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 45'22(forall haInputs'HAInputs, outputSoFar'HAOut, curTime'nat &  (not (haInputs = []) =>    haInputs <> []))Proof Obligation 3' (Unproved)HA, timeOfLastInput' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 49'44(forall haInputs'HAInputs, outputSoFar'HAOut, curTime'nat &  (not (haInputs = []) =>    (let mk_(change, targetTemp, currentTemp, targetHumid, currentHumid)'HAInput = (hd haInputs), rest'HAInputs = (tl haInputs), nextTime'nat = (curTime + StepLength) in      ((outputSoFar <> []) =>        (len outputSoFar) in set inds outputSoFar))))Proof Obligation 4' (Unproved)ChangeHA, change, targetTemp, currentTemp, targetHumid, currentHumid' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 62'72(forall haInputs'HAInputs, outputSoFar'HAOut, curTime'AbsTime &  haInputs <> [])Proof Obligation 5' (Unproved)ChangeHA, rest' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 63'17(forall haInputs'HAInputs, outputSoFar'HAOut, curTime'AbsTime &  haInputs <> [])Proof Obligation 6' (Unproved)HumidChanged, tempChanged' non-zero obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 90'63(forall targetTemp'nat, curTemp'nat, targetHumid'nat, curHumid'nat, curTime'nat, outputSoFar'seq of (OutStep) &  TempChangeDuration <> 0)Proof Obligation 7' (Unproved)HumidChanged' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 88'1(forall targetTemp'nat, curTemp'nat, targetHumid'nat, curHumid'nat, curTime'nat, outputSoFar'seq of (OutStep) &  is_(let tempChanged'real = (((curHumid - targetHumid) * HumidChangeDuration) / TempChangeDuration), action'(<DecTemp> | <IncTemp>) = (if ((curTemp - tempChanged) > targetTemp)  then <DecTemp>  else <IncTemp>), timeChange'int = (curTime + ((curHumid - targetHumid) * HumidChangeDuration)) in ((outputSoFar ^ [mk_(<OpenWindow>, curTime)]) ^ (if ((curTemp - tempChanged) <> targetTemp)  then [mk_(<CloseWindow>, timeChange), mk_(action, timeChange), mk_(<LeaveTemp>, (timeChange + (((abs (curTemp - targetTemp)) - tempChanged) * TempChangeDuration)))]  else [mk_(<CloseWindow>, timeChange)])), seq of (OutStep)))Proof Obligation 8' (Trivial by <forall x in set s & x in set s>)InterruptOutput' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 105'4(forall output'seq of (OutStep), curTime'nat &  (forall i in set (inds output) & let mk_(-, t)'OutStep = output(i) in (t <= curTime) =>    i in set inds output))Proof Obligation 9' (Trivial by <forall x in set s & x in set s>)InterruptOutput, t' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 105'54(forall output'seq of (OutStep), curTime'nat &  (forall i in set (inds output) &    i in set inds output))Proof Obligation 10' (Unproved)CounterOutput, lastOutput' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/HASL/HA.vdmsl) at line 109'27(forall output'seq of (OutStep), curTime'nat &  (len output) in set inds output)
