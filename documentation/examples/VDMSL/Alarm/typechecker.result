WARNING:alarm.vdmsl:5008:48,22:exs in 'DEFAULT' (../../documentation/examples/VDMSL/Alarm/testalarm.vdmsl) at line 27'3 hidden by exs.
WARNING:alarm.vdmsl:5008:12,14:exs in 'DEFAULT' (../../documentation/examples/VDMSL/Alarm/testalarm.vdmsl) at line 27'3 hidden by exs.
WARNING:alarm.vdmsl:5008:5,31:alarms in 'DEFAULT' (../../documentation/examples/VDMSL/Alarm/testalarm.vdmsl) at line 39'3 hidden by alarms.
WARNING:changeexpert.vdmsl:5008:5,34:alarms in 'DEFAULT' (../../documentation/examples/VDMSL/Alarm/testalarm.vdmsl) at line 39'3 hidden by alarms.
RESULT:result:-1:-1,-1:module DEFAULTexports alldefinitionsstatic private p1'Period = mk_token("Monday day")static private p2'Period = mk_token("Monday night")static private p3'Period = mk_token("Tuesday day")static private p4'Period = mk_token("Tuesday night")static private p5'Period = mk_token("Wednesday day")static private ps'set of (Period) = {p1, p2, p3, p4, p5}static private eid1'ExpertId = mk_token(134)static private eid2'ExpertId = mk_token(145)static private eid3'ExpertId = mk_token(154)static private eid4'ExpertId = mk_token(165)static private eid5'ExpertId = mk_token(169)static private eid6'ExpertId = mk_token(174)static private eid7'ExpertId = mk_token(181)static private eid8'ExpertId = mk_token(190)static private e1'Expert = mk_Expert(eid1, {<Elec>})static private e2'Expert = mk_Expert(eid2, {<Mech>, <Chem>})static private e3'Expert = mk_Expert(eid3, {<Bio>, <Chem>, <Elec>})static private e4'Expert = mk_Expert(eid4, {<Bio>})static private e5'Expert = mk_Expert(eid5, {<Chem>, <Bio>})static private e6'Expert = mk_Expert(eid6, {<Elec>, <Chem>, <Bio>, <Mech>})static private e7'Expert = mk_Expert(eid7, {<Elec>, <Mech>})static private e8'Expert = mk_Expert(eid8, {<Mech>, <Bio>})static private exs'set of (Expert) = {e1, e2, e3, e4, e5, e6, e7, e8}static private s'map (Period) to (set of (Expert)) = {p1 |-> {e7, e5, e1}, p2 |-> {e6}, p3 |-> {e1, e3, e8}, p4 |-> {e6}}static private a1'Alarm = mk_Alarm("Power supply missing", <Elec>)static private a2'Alarm = mk_Alarm("Tank overflow", <Mech>)static private a3'Alarm = mk_Alarm("CO2 detected", <Chem>)static private a4'Alarm = mk_Alarm("Biological attack", <Bio>)static private alarms'set of (Alarm) = {a1, a2, a3, a4}static private plant1'Plant = mk_Plant(s, {a1, a2, a3})Run (Expert ==> set of (Period))	Run(e) ==return (ExpertIsOnDuty(e, plant1))[Test1] = [[let a in set alarms in let p in set ps in [[NumberOfExperts(p, plant1)], [pre_ExpertToPage(a, p, plant1)], [let ex in set exs in post_ExpertToPage(a, p, plant1, ex)]]]][Test2] = [[let ex in set exs in ExpertIsOnDuty(ex, plant1)]]static private ChangeExpert' (Plant * Expert * Expert * Period -> Plant)	ChangeExpert(mk_Plant(plan, alarms), ex1, ex2, peri) ==mk_Plant((plan ++ {peri |-> ((plan(peri) \ {ex1}) union {ex2})}), alarms)static private Plant = compose Plant of schedule'Schedule, alarms'set of (Alarm) end	inv mk_Plant(schedule, alarms) == (forall a in set alarms & (forall peri in set (dom schedule) & QualificationOK(schedule(peri), (a.quali))))static private Schedule = map (Period) to (set of (Expert))	inv sch == (forall exs in set (rng sch) & ((exs <> {}) and (forall ex1, ex2 in set exs & ((ex1 <> ex2) => ((ex1.expertid) <> (ex2.expertid))))))static private Period = tokenstatic private Expert = compose Expert of expertid'ExpertId, quali'set of (Qualification) end	inv ex == ((ex.quali) <> {})static private ExpertId = tokenstatic private Qualification = (<Bio> | <Chem> | <Elec> | <Mech>)static private Alarm = compose Alarm of alarmtext'seq of (char), quali'Qualification endstatic private NumberOfExperts' (Period * Plant -> nat)	NumberOfExperts(peri, plant) ==(card (plant.schedule)(peri))	pre (peri in set (dom (plant.schedule)))static private ExpertIsOnDuty' (Expert * Plant -> set of (Period))	ExpertIsOnDuty(ex, mk_Plant(sch, -)) =={peri | [peri in set (dom sch)] & (ex in set sch(peri))}static private ExpertToPage((a'Alarm), (peri'Period), (plant'Plant))r'Expert	pre ((peri in set (dom (plant.schedule))) and (a in set (plant.alarms)))	post ((r in set (plant.schedule)(peri)) and ((a.quali) in set (r.quali)))static private QualificationOK' (set of (Expert) * Qualification -> bool)	QualificationOK(exs, reqquali) ==(exists [ex in set exs] & (reqquali in set (ex.quali)))end DEFAULT
