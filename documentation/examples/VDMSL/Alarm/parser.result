RESULT:result:-1:-1,-1:module DEFAULTexports alldefinitionsstatic private p1'(unresolved DEFAULT`Period) = mk_token("Monday day")static private p2'(unresolved DEFAULT`Period) = mk_token("Monday night")static private p3'(unresolved DEFAULT`Period) = mk_token("Tuesday day")static private p4'(unresolved DEFAULT`Period) = mk_token("Tuesday night")static private p5'(unresolved DEFAULT`Period) = mk_token("Wednesday day")static private ps'set of ((unresolved DEFAULT`Period)) = {p1, p2, p3, p4, p5}static private eid1'(unresolved DEFAULT`ExpertId) = mk_token(134)static private eid2'(unresolved DEFAULT`ExpertId) = mk_token(145)static private eid3'(unresolved DEFAULT`ExpertId) = mk_token(154)static private eid4'(unresolved DEFAULT`ExpertId) = mk_token(165)static private eid5'(unresolved DEFAULT`ExpertId) = mk_token(169)static private eid6'(unresolved DEFAULT`ExpertId) = mk_token(174)static private eid7'(unresolved DEFAULT`ExpertId) = mk_token(181)static private eid8'(unresolved DEFAULT`ExpertId) = mk_token(190)static private e1'(unresolved DEFAULT`Expert) = mk_Expert(eid1, {<Elec>})static private e2'(unresolved DEFAULT`Expert) = mk_Expert(eid2, {<Mech>, <Chem>})static private e3'(unresolved DEFAULT`Expert) = mk_Expert(eid3, {<Bio>, <Chem>, <Elec>})static private e4'(unresolved DEFAULT`Expert) = mk_Expert(eid4, {<Bio>})static private e5'(unresolved DEFAULT`Expert) = mk_Expert(eid5, {<Chem>, <Bio>})static private e6'(unresolved DEFAULT`Expert) = mk_Expert(eid6, {<Elec>, <Chem>, <Bio>, <Mech>})static private e7'(unresolved DEFAULT`Expert) = mk_Expert(eid7, {<Elec>, <Mech>})static private e8'(unresolved DEFAULT`Expert) = mk_Expert(eid8, {<Mech>, <Bio>})static private exs'set of ((unresolved DEFAULT`Expert)) = {e1, e2, e3, e4, e5, e6, e7, e8}static private s'map ((unresolved DEFAULT`Period)) to (set of ((unresolved DEFAULT`Expert))) = {p1 |-> {e7, e5, e1}, p2 |-> {e6}, p3 |-> {e1, e3, e8}, p4 |-> {e6}}static private a1'(unresolved DEFAULT`Alarm) = mk_Alarm("Power supply missing", <Elec>)static private a2'(unresolved DEFAULT`Alarm) = mk_Alarm("Tank overflow", <Mech>)static private a3'(unresolved DEFAULT`Alarm) = mk_Alarm("CO2 detected", <Chem>)static private a4'(unresolved DEFAULT`Alarm) = mk_Alarm("Biological attack", <Bio>)static private alarms'set of ((unresolved DEFAULT`Alarm)) = {a1, a2, a3, a4}static private plant1'(unresolved DEFAULT`Plant) = mk_Plant(s, {a1, a2, a3})Run ((unresolved DEFAULT`Expert) ==> set of ((unresolved DEFAULT`Period)))	Run(e) ==return (ExpertIsOnDuty(e, plant1))[Test1] = [[let a in set alarms in let p in set ps in [[NumberOfExperts(p, plant1)], [pre_ExpertToPage(a, p, plant1)], [let ex in set exs in post_ExpertToPage(a, p, plant1, ex)]]]][Test2] = [[let ex in set exs in ExpertIsOnDuty(ex, plant1)]]end DEFAULT, module DEFAULTexports alldefinitionsstatic private ChangeExpert' ((unresolved DEFAULT`Plant) * (unresolved DEFAULT`Expert) * (unresolved DEFAULT`Expert) * (unresolved DEFAULT`Period) -> (unresolved DEFAULT`Plant))	ChangeExpert(mk_(unresolved DEFAULT`Plant)(plan, alarms), ex1, ex2, peri) ==mk_Plant((plan ++ {peri |-> ((plan(peri) \ {ex1}) union {ex2})}), alarms)end DEFAULT, module DEFAULTexports alldefinitionsstatic private Plant = compose Plant of schedule'(unresolved DEFAULT`Schedule), alarms'set of ((unresolved DEFAULT`Alarm)) end	inv mk_(unresolved DEFAULT`Plant)(schedule, alarms) == (forall a in set alarms & (forall peri in set (dom schedule) & QualificationOK(schedule(peri), (a.quali))))static private Schedule = map ((unresolved DEFAULT`Period)) to (set of ((unresolved DEFAULT`Expert)))	inv sch == (forall exs in set (rng sch) & ((exs <> {}) and (forall ex1, ex2 in set exs & ((ex1 <> ex2) => ((ex1.expertid) <> (ex2.expertid))))))static private Period = tokenstatic private Expert = compose Expert of expertid'(unresolved DEFAULT`ExpertId), quali'set of ((unresolved DEFAULT`Qualification)) end	inv ex == ((ex.quali) <> {})static private ExpertId = tokenstatic private Qualification = (<Bio> | <Chem> | <Elec> | <Mech>)static private Alarm = compose Alarm of alarmtext'seq of (char), quali'(unresolved DEFAULT`Qualification) endstatic private NumberOfExperts' ((unresolved DEFAULT`Period) * (unresolved DEFAULT`Plant) -> nat)	NumberOfExperts(peri, plant) ==(card (plant.schedule)(peri))	pre (peri in set (dom (plant.schedule)))static private ExpertIsOnDuty' ((unresolved DEFAULT`Expert) * (unresolved DEFAULT`Plant) -> set of ((unresolved DEFAULT`Period)))	ExpertIsOnDuty(ex, mk_(unresolved DEFAULT`Plant)(sch, -)) =={peri | [peri in set (dom sch)] & (ex in set sch(peri))}static private ExpertToPage((a'(unresolved DEFAULT`Alarm)), (peri'(unresolved DEFAULT`Period)), (plant'(unresolved DEFAULT`Plant)))r'(unresolved DEFAULT`Expert)	pre ((peri in set (dom (plant.schedule))) and (a in set (plant.alarms)))	post ((r in set (plant.schedule)(peri)) and ((a.quali) in set (r.quali)))static private QualificationOK' (set of ((unresolved DEFAULT`Expert)) * (unresolved DEFAULT`Qualification) -> bool)	QualificationOK(exs, reqquali) ==(exists [ex in set exs] & (reqquali in set (ex.quali)))end DEFAULT
