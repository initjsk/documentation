RESULT:result:-1:-1,-1:Proof Obligation 1' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 10'1forall m1, m2 in set {{<Adam> |-> 1}, {<Bill> |-> 2}, {<Charlie> |-> 3}, {<Frank> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 2' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 11'1forall m1, m2 in set {{<Bill> |-> 1}, {<Adam> |-> 2}, {<Charlie> |-> 3}, {<George> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 3' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 12'1forall m1, m2 in set {{<Adam> |-> 1}, {<Charlie> |-> 2}, {<Bill> |-> 3}, {<Harry> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 4' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 13'1forall m1, m2 in set {{<Bill> |-> 1}, {<Charlie> |-> 2}, {<Adam> |-> 3}, {<Ian> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 5' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 14'1forall m1, m2 in set {{<Charlie> |-> 1}, {<Adam> |-> 2}, {<Bill> |-> 3}, {<John> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 6' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 15'1forall m1, m2 in set {{<Charlie> |-> 1}, {<Bill> |-> 2}, {<Adam> |-> 3}, {<Donald> |-> 4}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 7' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 16'1forall m1, m2 in set {{<Donald> |-> 1}, {<Adam> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 8' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 17'1forall m1, m2 in set {{<Frank> |-> 1}, {<Bill> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 9' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 18'1forall m1, m2 in set {{<George> |-> 1}, {<Charlie> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 10' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 19'1forall m1, m2 in set {{<Harry> |-> 1}, {<Bill> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 11' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 20'1forall m1, m2 in set {{<Ian> |-> 1}, {<Adam> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 12' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 21'1forall m1, m2 in set {{<John> |-> 1}, {<Charlie> |-> 2}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 13' (Unproved)Votes' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 9'9forall m1, m2 in set {{{<Adam> |-> 1, <Bill> |-> 2, <Charlie> |-> 3, <Frank> |-> 4} |-> 100000}, {{<Bill> |-> 1, <Adam> |-> 2, <Charlie> |-> 3, <George> |-> 4} |-> 100000}, {{<Adam> |-> 1, <Charlie> |-> 2, <Bill> |-> 3, <Harry> |-> 4} |-> 100000}, {{<Bill> |-> 1, <Charlie> |-> 2, <Adam> |-> 3, <Ian> |-> 4} |-> 100000}, {{<Charlie> |-> 1, <Adam> |-> 2, <Bill> |-> 3, <John> |-> 4} |-> 100000}, {{<Charlie> |-> 1, <Bill> |-> 2, <Adam> |-> 3, <Donald> |-> 4} |-> 100000}, {{<Donald> |-> 1, <Adam> |-> 2} |-> 1000}, {{<Frank> |-> 1, <Bill> |-> 2} |-> 1000}, {{<George> |-> 1, <Charlie> |-> 2} |-> 1000}, {{<Harry> |-> 1, <Bill> |-> 2} |-> 1000}, {{<Ian> |-> 1, <Adam> |-> 2} |-> 1000}, {{<John> |-> 1, <Charlie> |-> 2} |-> 1000}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 14' (Unproved)Voting_paper' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 30'43(forall v'map (Candidate_names) to (nat1) &  (forall name'Candidate_names &    name in set dom v))Proof Obligation 15' (Unproved)Stage' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 40'19(forall s'seq of (Score) &  (forall i in set (inds s), j in set (inds s) &    i in set inds s))Proof Obligation 16' (Unproved)Stage' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 40'33(forall s'seq of (Score) &  (forall i in set (inds s), j in set (inds s) &    j in set inds s))Proof Obligation 17' (Unproved)Stage' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 42'18(forall s'seq of (Score) &  (forall i in set (inds s), j in set (inds s) &    i in set inds s))Proof Obligation 18' (Unproved)Stage' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 42'31(forall s'seq of (Score) &  (forall i in set (inds s), j in set (inds s) &    j in set inds s))Proof Obligation 19' (Unproved)mult_p_sum' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 109'18(forall s'set of ((nat * Parcel)) &  (not (s = {}) =>    exists mk_(m, pa) in set s))Proof Obligation 20' (Unproved)sort_papers' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 128'8(forall votes'Parcel, names'set of (Candidate_names) &  (forall name in set names &    inv_Candidate(mk_Candidate(name, vote_res(votes, {v | [v in set (dom votes)] & ((v '> {1}) = {name |-> 1})}), []))))Proof Obligation 21' (Unproved)stage_bk' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 139'3(forall s'seq of (Score) & (s <> []) =>  (len s) in set inds s)Proof Obligation 22' (Unproved)defer_transfer_of_surplus, lowest_value' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 144'30(forall quota'real, stage'Stage & ((len stage) > 1) =>  pre_stage_bk(stage))Proof Obligation 23' (Unproved)defer_transfer_of_surplus, second_lowest_value' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 145'36(forall quota'real, stage'Stage & ((len stage) > 1) =>  ((len stage) - 1) in set inds stage)Proof Obligation 24' (Trivial by <forall x in set s & x in set s>)defer_transfer_of_surplus' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 146'15(forall quota'real, stage'Stage & ((len stage) > 1) =>  (let lowest_value'real = (stage_bk(stage).count), second_lowest_value'real = (stage(((len stage) - 1)).count) in    (forall i in set (inds stage) & ((stage(i).count) > quota) =>      i in set inds stage)))Proof Obligation 25' (Trivial by <forall x in set s & x in set s>)defer_transfer_of_surplus' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 147'17(forall quota'real, stage'Stage & ((len stage) > 1) =>  (let lowest_value'real = (stage_bk(stage).count), second_lowest_value'real = (stage(((len stage) - 1)).count) in    (forall i in set (inds stage) &      i in set inds stage)))Proof Obligation 26' (Trivial by <not x = y => x <> y>)sum' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 153'11(forall s'seq of (real) &  (not (s = []) =>    s <> []))Proof Obligation 27' (Trivial by <not x = y => x <> y>)sum' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 153'22(forall s'seq of (real) &  (not (s = []) =>    s <> []))Proof Obligation 28' (Unproved)sole_leader, cand' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 157'14(forall stage'Stage, name'Candidate_names, leaders'set of (Candidate_names) &  exists1 c in set (elems stage) & ((c.name) = name))Proof Obligation 29' (Unproved)greatest_value_at_earliest_stage, leaders' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 164'59(forall name'Candidate_names, all_stages'seq of (Stage) &  all_stages <> [])Proof Obligation 30' (Unproved)greatest_value_at_earliest_stage, leaders' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 165'48(forall name'Candidate_names, all_stages'seq of (Stage) &  (forall score in set (elems (hd all_stages)) &    all_stages <> []))Proof Obligation 31' (Unproved)greatest_value_at_earliest_stage, leaders' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 165'45(forall name'Candidate_names, all_stages'seq of (Stage) &  (forall score in set (elems (hd all_stages)) &    (hd all_stages) <> []))Proof Obligation 32' (Trivial by <forall x in set s & x in set s>)greatest_value_at_earliest_stage' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 167'24(forall name'Candidate_names, all_stages'seq of (Stage) &  (let leaders'set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] & ((score.count) = ((hd (hd all_stages)).count))} in    (forall i in set (inds all_stages) &      i in set inds all_stages)))Proof Obligation 33' (Unproved)greatest_value_at_earliest_stage' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 171'34(forall name'Candidate_names, all_stages'seq of (Stage) &  (let leaders'set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] & ((score.count) = ((hd (hd all_stages)).count))} in    (forall i in set (inds all_stages) &      (sole_leader(all_stages(i), name, leaders) =>        (forall j in set {(i + 1), ... ,(len all_stages)}, other_leader in set leaders &          j in set inds all_stages)))))Proof Obligation 34' (Unproved)construct_sub_parcels, sub_parcel_map' map set compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 184'23(forall val'Value, parcel'Parcel, discontinuing'Candidate, continuing_candidates'set of (Candidate) &  (let names'set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in    forall m1, m2 in set {{n |-> mk_Sub_parcel({v |-> parcel(v) | v in set (dom parcel) & next_preference(n, v, names)}, val)} | n in set names} &      forall d3 in set dom m1, d4 in set dom m2 &        d3 = d4 => m1(d3) = m2(d4)))Proof Obligation 35' (Unproved)construct_sub_parcels, sub_parcel_map' map set compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 184'45(forall val'Value, parcel'Parcel, discontinuing'Candidate, continuing_candidates'set of (Candidate) &  (let names'set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in    (forall n in set names &      forall m1, m2 in set {{v |-> parcel(v)} | v in set (dom parcel) & next_preference(n, v, names)} &        forall d3 in set dom m1, d4 in set dom m2 &          d3 = d4 => m1(d3) = m2(d4))))Proof Obligation 36' (Trivial by <forall x in set s & x in set s>)construct_sub_parcels, sub_parcel_map' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 184'53(forall val'Value, parcel'Parcel, discontinuing'Candidate, continuing_candidates'set of (Candidate) &  (let names'set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in    (forall n in set names &      (forall v in set (dom parcel) & next_preference(n, v, names) =>        v in set dom parcel))))Proof Obligation 37' (Unproved)construct_sub_parcels, non_empty_sub_parcel_map' map set compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 187'33(forall val'Value, parcel'Parcel, discontinuing'Candidate, continuing_candidates'set of (Candidate) &  (let names'set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in    (let sub_parcel_map'map (Candidate_names) to (Sub_parcel) = {n |-> mk_Sub_parcel({v |-> parcel(v) | v in set (dom parcel) & next_preference(n, v, names)}, val) | n in set names} in      forall m1, m2 in set {{n |-> sub_parcel_map(n)} | n in set (dom sub_parcel_map) & ((sub_parcel_map(n).votes) <> {})} &        forall d3 in set dom m1, d4 in set dom m2 &          d3 = d4 => m1(d3) = m2(d4))))Proof Obligation 38' (Trivial by <forall x in set s & x in set s>)construct_sub_parcels, non_empty_sub_parcel_map' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 187'41(forall val'Value, parcel'Parcel, discontinuing'Candidate, continuing_candidates'set of (Candidate) &  (let names'set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in    (let sub_parcel_map'map (Candidate_names) to (Sub_parcel) = {n |-> mk_Sub_parcel({v |-> parcel(v) | v in set (dom parcel) & next_preference(n, v, names)}, val) | n in set names} in      (forall n in set (dom sub_parcel_map) & ((sub_parcel_map(n).votes) <> {}) =>        n in set dom sub_parcel_map))))Proof Obligation 39' (Trivial by <forall x in set s & x in set s>)construct_sub_parcels, non_empty_sub_parcel_map' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 188'34(forall val'Value, parcel'Parcel, discontinuing'Candidate, continuing_candidates'set of (Candidate) &  (let names'set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in    (let sub_parcel_map'map (Candidate_names) to (Sub_parcel) = {n |-> mk_Sub_parcel({v |-> parcel(v) | v in set (dom parcel) & next_preference(n, v, names)}, val) | n in set names} in      (forall n in set (dom sub_parcel_map) &        n in set dom sub_parcel_map))))Proof Obligation 40' (Unproved)construct_sub_parcels' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 191'65(forall val'Value, parcel'Parcel, discontinuing'Candidate, continuing_candidates'set of (Candidate) &  (let names'set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in    (let sub_parcel_map'map (Candidate_names) to (Sub_parcel) = {n |-> mk_Sub_parcel({v |-> parcel(v) | v in set (dom parcel) & next_preference(n, v, names)}, val) | n in set names} in      (let non_empty_sub_parcel_map'map (Candidate_names) to (Sub_parcel) = {n |-> sub_parcel_map(n) | n in set (dom sub_parcel_map) & ((sub_parcel_map(n).votes) <> {})} in        inv_Value(1.0) and (is_real(1.0))))))Proof Obligation 41' (Unproved)next_preference' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 205'18(forall name'Candidate_names, vote'Voting_paper, continuing'set of (Candidate_names) &  ((name in set (dom vote)) =>    (forall i in set (rng vote) &      name in set dom vote)))Proof Obligation 42' (Unproved)construct_bundle_for_transfer, new_sub_parcels' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 214'50(forall surplus'real, old_value'Value, old_votes'Parcel, disc'Candidate, cont_cands'set of (Candidate) &  inv_Value(1.0) and (is_real(1.0)))Proof Obligation 43' (Unproved)construct_bundle_for_transfer, transf_val' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 219'49(forall surplus'real, old_value'Value, old_votes'Parcel, disc'Candidate, cont_cands'set of (Candidate) &  (let new_sub_parcels'Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in    (let total_no_of_trans_votes'int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in      (let total_val_trans_votes'real = (total_no_of_trans_votes * old_value) in        inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes))))))Proof Obligation 44' (Unproved)construct_bundle_for_transfer, transf_val' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 220'50(forall surplus'real, old_value'Value, old_votes'Parcel, disc'Candidate, cont_cands'set of (Candidate) &  (let new_sub_parcels'Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in    (let total_no_of_trans_votes'int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in      (let total_val_trans_votes'real = (total_no_of_trans_votes * old_value) in        total_no_of_trans_votes >= 0))))Proof Obligation 45' (Unproved)construct_bundle_for_transfer, sub_parcels' map set compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 221'24(forall surplus'real, old_value'Value, old_votes'Parcel, disc'Candidate, cont_cands'set of (Candidate) &  (let new_sub_parcels'Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in    (let total_no_of_trans_votes'int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in      (let total_val_trans_votes'real = (total_no_of_trans_votes * old_value) in        (let transf_val'Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in          forall m1, m2 in set {{n |-> mk_Sub_parcel(((new_sub_parcels.sub_parcels)(n).votes), transf_val)} | n in set (dom (new_sub_parcels.sub_parcels))} &            forall d3 in set dom m1, d4 in set dom m2 &              d3 = d4 => m1(d3) = m2(d4))))))Proof Obligation 46' (Trivial by <forall x in set s & x in set s>)construct_bundle_for_transfer, sub_parcels' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 222'25(forall surplus'real, old_value'Value, old_votes'Parcel, disc'Candidate, cont_cands'set of (Candidate) &  (let new_sub_parcels'Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in    (let total_no_of_trans_votes'int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in      (let total_val_trans_votes'real = (total_no_of_trans_votes * old_value) in        (let transf_val'Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in          (forall n in set (dom (new_sub_parcels.sub_parcels)) &            n in set dom (new_sub_parcels.sub_parcels)))))))Proof Obligation 47' (Unproved)construct_bundle_for_transfer, loss_of_value' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 225'21(forall surplus'real, old_value'Value, old_votes'Parcel, disc'Candidate, cont_cands'set of (Candidate) &  (let new_sub_parcels'Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in    (let total_no_of_trans_votes'int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in      (let total_val_trans_votes'real = (total_no_of_trans_votes * old_value) in        (let transf_val'Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in          inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes)))))))Proof Obligation 48' (Unproved)construct_bundle_for_transfer, loss_of_value' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 225'43(forall surplus'real, old_value'Value, old_votes'Parcel, disc'Candidate, cont_cands'set of (Candidate) &  (let new_sub_parcels'Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in    (let total_no_of_trans_votes'int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in      (let total_val_trans_votes'real = (total_no_of_trans_votes * old_value) in        (let transf_val'Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in          total_no_of_trans_votes >= 0)))))Proof Obligation 49' (Unproved)construct_bundle_for_transfer, non_trans_val' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 227'41(forall surplus'real, old_value'Value, old_votes'Parcel, disc'Candidate, cont_cands'set of (Candidate) &  (let new_sub_parcels'Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in    (let total_no_of_trans_votes'int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in      (let total_val_trans_votes'real = (total_no_of_trans_votes * old_value) in        (let transf_val'Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in          inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes)))))))Proof Obligation 50' (Unproved)calc_transf_value' non-zero obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 237'34(forall surplus'real, total_value'Value, old_value'Value, total_no'nat &  ((surplus < total_value) =>    total_no <> 0))Proof Obligation 51' (Unproved)calc_transf_value' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 234'1(forall surplus'real, total_value'Value, old_value'Value, total_no'nat &  inv_Value((if (surplus < total_value)  then ((floor ((100 * surplus) / total_no)) / 100)  else old_value)) and (is_real((if (surplus < total_value)  then ((floor ((100 * surplus) / total_no)) / 100)  else old_value))))Proof Obligation 52' (Unproved)calc_loss_of_value' non-zero obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 243'22(forall surplus'real, total_value'Value, total_number'nat, old_value'Value &  ((surplus < total_value) =>    total_number <> 0))Proof Obligation 53' (Unproved)calc_loss_of_value' non-zero obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 244'45(forall surplus'real, total_value'Value, total_number'nat, old_value'Value &  ((surplus < total_value) =>    total_value <> 0))Proof Obligation 54' (Unproved)calc_non_transf_value' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 247'1(forall surplus'real, total_value'Value &  inv_Value((if (surplus > total_value)  then (surplus - total_value)  else 0)) and (is_real((if (surplus > total_value)  then (surplus - total_value)  else 0))))Proof Obligation 55' (Unproved)redistribute_parcels' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 256'18(forall previous_collection'Candset, bundle'Sub_parcel_bundle & ((dom (bundle.sub_parcels)) subset {(candidate.name) | [candidate in set previous_collection]}) =>  (forall candidate in set previous_collection, n in set (dom (bundle.sub_parcels)) & ((candidate.name) = n) =>    n in set dom (bundle.sub_parcels)))Proof Obligation 56' (Unproved)score_sort' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 273'26(forall sta'Stage &  (not [] = sta =>    (not exists [e]'Stage & [e] = sta =>      exists sta1 ^ sta2 in set {sta} & ((abs ((len sta1) - (len sta2))) < 2))))Proof Obligation 57' (Unproved)score_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 284'37(forall sta1'Stage, sta2'Stage &  (not exists mk_([], sta)'(Stage * Stage) & mk_([], sta) = mk_(sta1, sta2) =>    (not exists mk_(sta, [])'(Stage * Stage) & mk_(sta, []) = mk_(sta1, sta2) =>      sta1 <> [])))Proof Obligation 58' (Unproved)score_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 284'56(forall sta1'Stage, sta2'Stage &  (not exists mk_([], sta)'(Stage * Stage) & mk_([], sta) = mk_(sta1, sta2) =>    (not exists mk_(sta, [])'(Stage * Stage) & mk_(sta, []) = mk_(sta1, sta2) =>      sta2 <> [])))Proof Obligation 59' (Unproved)score_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 285'36(forall sta1'Stage, sta2'Stage &  (not exists mk_([], sta)'(Stage * Stage) & mk_([], sta) = mk_(sta1, sta2) =>    (not exists mk_(sta, [])'(Stage * Stage) & mk_(sta, []) = mk_(sta1, sta2) =>      ((((hd sta1).count) >= ((hd sta2).count)) =>        sta1 <> []))))Proof Obligation 60' (Unproved)score_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 285'59(forall sta1'Stage, sta2'Stage &  (not exists mk_([], sta)'(Stage * Stage) & mk_([], sta) = mk_(sta1, sta2) =>    (not exists mk_(sta, [])'(Stage * Stage) & mk_(sta, []) = mk_(sta1, sta2) =>      ((((hd sta1).count) >= ((hd sta2).count)) =>        sta1 <> []))))Proof Obligation 61' (Unproved)score_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 287'36(forall sta1'Stage, sta2'Stage &  (not exists mk_([], sta)'(Stage * Stage) & mk_([], sta) = mk_(sta1, sta2) =>    (not exists mk_(sta, [])'(Stage * Stage) & mk_(sta, []) = mk_(sta1, sta2) =>      (not (((hd sta1).count) >= ((hd sta2).count)) =>        sta2 <> []))))Proof Obligation 62' (Unproved)score_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 287'65(forall sta1'Stage, sta2'Stage &  (not exists mk_([], sta)'(Stage * Stage) & mk_([], sta) = mk_(sta1, sta2) =>    (not exists mk_(sta, [])'(Stage * Stage) & mk_(sta, []) = mk_(sta1, sta2) =>      (not (((hd sta1).count) >= ((hd sta2).count)) =>        sta2 <> []))))Proof Obligation 63' (Unproved)score_merge' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 280'3(forall sta1'Stage, sta2'Stage &  inv_Stage((cases mk_(sta1, sta2) '  case mk_([], sta) -> sta,  case mk_(sta, []) -> staothers (if (((hd sta1).count) >= ((hd sta2).count))  then ([(hd sta1)] ^ score_merge((tl sta1), sta2))  else ([(hd sta2)] ^ score_merge(sta1, (tl sta2))))  end)) and (is_((cases mk_(sta1, sta2) '  case mk_([], sta) -> sta,  case mk_(sta, []) -> staothers (if (((hd sta1).count) >= ((hd sta2).count))  then ([(hd sta1)] ^ score_merge((tl sta1), sta2))  else ([(hd sta2)] ^ score_merge(sta1, (tl sta2))))  end), seq of (Score))))Proof Obligation 64' (Unproved)set_seq' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 293'12(forall s'set of (Score) &  (not (s = {}) =>    exists e in set s))Proof Obligation 65' (Unproved)set_seq' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 290'1(forall s'set of (Score) &  inv_Stage((if (s = {})  then []  else let e in set s in ([e] ^ set_seq((s \ {e}))))) and (is_((if (s = {})  then []  else let e in set s in ([e] ^ set_seq((s \ {e})))), seq of (Score))))Proof Obligation 66' (Unproved)construct_new_stage, unsorted_scores' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 305'39(forall old_stage'Stage, discontinuing'Candidate_names, bundle'Sub_parcel_bundle &  (let cands_with_more_votes'set of (Candidate_names) = (dom (bundle.sub_parcels)) in    (forall mk_Score(name, old_count) in set (elems old_stage) & (name in set cands_with_more_votes) =>      name in set dom (bundle.sub_parcels))))Proof Obligation 67' (Unproved)construct_new_stage, unsorted_scores' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 306'33(forall old_stage'Stage, discontinuing'Candidate_names, bundle'Sub_parcel_bundle &  (let cands_with_more_votes'set of (Candidate_names) = (dom (bundle.sub_parcels)) in    (forall mk_Score(name, old_count) in set (elems old_stage) & (name in set cands_with_more_votes) =>      name in set dom (bundle.sub_parcels))))Proof Obligation 68' (Unproved)exists_non_deferable_surplus' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 318'17(forall stages'seq of (Stage), quota'real &  stages <> [])Proof Obligation 69' (Unproved)exists_non_deferable_surplus' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 318'14(forall stages'seq of (Stage), quota'real &  (hd stages) <> [])Proof Obligation 70' (Unproved)exists_non_deferable_surplus' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 320'13(forall stages'seq of (Stage), quota'real &  ((((hd (hd stages)).count) >= quota) =>    pre_defer_transfer_of_surplus(quota, (hd stages))))Proof Obligation 71' (Unproved)exists_non_deferable_surplus' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 320'49(forall stages'seq of (Stage), quota'real &  ((((hd (hd stages)).count) >= quota) =>    stages <> []))Proof Obligation 72' (Unproved)trailing_candidate, trailing_count' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 324'31(forall name'Candidate_names, all_stages'seq1 of (Stage) &  pre_stage_bk((hd all_stages)))Proof Obligation 73' (Unproved)trailing_candidate, trailing_count' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 324'43(forall name'Candidate_names, all_stages'seq1 of (Stage) &  all_stages <> [])Proof Obligation 74' (Unproved)trailing_candidate, lowest' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 325'59(forall name'Candidate_names, all_stages'seq1 of (Stage) &  (let trailing_count'real = (stage_bk((hd all_stages)).count) in    all_stages <> []))Proof Obligation 75' (Trivial by <forall x in set s & x in set s>)trailing_candidate' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 328'25(forall name'Candidate_names, all_stages'seq1 of (Stage) &  (let trailing_count'real = (stage_bk((hd all_stages)).count) in    (let lowest'set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] & ((score.count) = trailing_count)} in      (forall i in set (inds all_stages) &        i in set inds all_stages))))Proof Obligation 76' (Unproved)trailing_candidate' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 330'35(forall name'Candidate_names, all_stages'seq1 of (Stage) &  (let trailing_count'real = (stage_bk((hd all_stages)).count) in    (let lowest'set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] & ((score.count) = trailing_count)} in      (forall i in set (inds all_stages) &        (sole_trailer(all_stages(i), name, lowest) =>          (forall j in set {(i + 1), ... ,(len all_stages)}, other in set lowest &            j in set inds all_stages))))))Proof Obligation 77' (Unproved)sole_trailer, cand' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 334'16(forall stage'Stage, name'Candidate_names, lowest'set of (Candidate_names) &  exists1 c in set (elems stage) & ((c.name) = name))Proof Obligation 78' (Unproved)number_of_remaining_vacancies' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 344'1(forall cands'set of (Candidate_names) &  (Number_of_vacancies - (card cands)) >= 0)Proof Obligation 79' (Unproved)number_of_candidates_satisfying_quota, xs_quota_scs' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 355'53(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  stages <> [])Proof Obligation 80' (Unproved)non_transferable_paper, s' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 363'35(forall paper'Voting_paper, discontinuing'Candidate_names, continuing_names'set of (Candidate_names) &  (not (((dom (paper '-> {1})) inter continuing_names) = {}) =>    discontinuing in set dom paper))Proof Obligation 81' (Unproved)non_transferable_paper, m' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 365'16(forall paper'Voting_paper, discontinuing'Candidate_names, continuing_names'set of (Candidate_names) &  (not (((dom (paper '-> {1})) inter continuing_names) = {}) =>    (let s'set of (nat1) = (rng (paper '-> {1, ... ,paper(discontinuing)})) in      (not (s = {}) =>        pre_min(s)))))Proof Obligation 82' (Unproved)min' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 372'6(forall s'set of (real) & (s <> {}) =>  exists m in set s)Proof Obligation 83' (Unproved)min, sm' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 374'16(forall s'set of (real) & (s <> {}) =>  (forall m in set s &    (not ((card s) = 1) =>      pre_min((s \ {m})))))Proof Obligation 84' (Trivial by <forall x in set s & x in set s>)last_vacancy_fillable, continuing_scores' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 381'35(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (forall i in set (inds (hd stages)) & (((hd stages)(i).name) in set continuing_names) =>      i in set inds (hd stages))))Proof Obligation 85' (Unproved)last_vacancy_fillable, continuing_scores' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 381'38(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (forall i in set (inds (hd stages)) & (((hd stages)(i).name) in set continuing_names) =>      stages <> [])))Proof Obligation 86' (Unproved)last_vacancy_fillable, continuing_scores' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 381'68(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    stages <> []))Proof Obligation 87' (Trivial by <forall x in set s & x in set s>)last_vacancy_fillable, continuing_scores' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 382'32(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (forall i in set (inds (hd stages)) &      i in set inds (hd stages))))Proof Obligation 88' (Unproved)last_vacancy_fillable, continuing_scores' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 382'35(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (forall i in set (inds (hd stages)) &      stages <> [])))Proof Obligation 89' (Trivial by <forall x in set s & x in set s>)last_vacancy_fillable, surplus_scores' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 383'32(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (forall i in set (inds (hd stages)) & (((hd stages)(i).count) > quota) =>      i in set inds (hd stages))))Proof Obligation 90' (Unproved)last_vacancy_fillable, surplus_scores' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 383'35(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (forall i in set (inds (hd stages)) & (((hd stages)(i).count) > quota) =>      stages <> [])))Proof Obligation 91' (Unproved)last_vacancy_fillable, surplus_scores' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 383'65(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    stages <> []))Proof Obligation 92' (Trivial by <forall x in set s & x in set s>)last_vacancy_fillable, surplus_scores' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 384'36(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (forall i in set (inds (hd stages)) &      i in set inds (hd stages))))Proof Obligation 93' (Unproved)last_vacancy_fillable, surplus_scores' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 384'39(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (forall i in set (inds (hd stages)) &      stages <> [])))Proof Obligation 94' (Trivial by <forall x in set s & x in set s>)last_vacancy_fillable' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 386'11(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (let continuing_scores'seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) & (((hd stages)(i).name) in set continuing_names)], surplus_scores'seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) & (((hd stages)(i).count) > quota)] in      (forall i in set (inds continuing_scores) &        i in set inds continuing_scores))))Proof Obligation 95' (Unproved)last_vacancy_fillable' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 387'18(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (let continuing_scores'seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) & (((hd stages)(i).name) in set continuing_names)], surplus_scores'seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) & (((hd stages)(i).count) > quota)] in      (forall i in set (inds continuing_scores) &        (forall j in set ((inds continuing_scores) \ {i}) &          j in set inds continuing_scores)))))Proof Obligation 96' (Trivial by <forall x in set s & x in set s>)last_vacancy_fillable' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 389'18(forall continuing'set of (Candidate), stages'seq of (Stage), quota'real &  (let continuing_names'set of (Candidate_names) = {(c.name) | [c in set continuing]} in    (let continuing_scores'seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) & (((hd stages)(i).name) in set continuing_names)], surplus_scores'seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) & (((hd stages)(i).count) > quota)] in      (forall i in set (inds continuing_scores) &        (forall j in set (inds surplus_scores) &          j in set inds surplus_scores)))))Proof Obligation 97' (Unproved)make_result_sheet, result' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 398'25(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (i + 1) in set inds stages))Proof Obligation 98' (Unproved)make_result_sheet, result' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 398'43(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    i in set inds stages))Proof Obligation 99' (Unproved)make_result_sheet, result, excluded' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 399'38(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (((len stages((i + 1))) > (len stages(i))) =>      exists1 ex in set Cand_names & (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] & (forall osc in set (elems stages(i)) & ((osc.name) <> (sc.name)))}))))Proof Obligation 100' (Unproved)make_result_sheet, result, excluded' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 401'51(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (((len stages((i + 1))) > (len stages(i))) =>      (forall ex in set Cand_names &        (i + 1) in set inds stages))))Proof Obligation 101' (Unproved)make_result_sheet, result, excluded' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 402'59(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (((len stages((i + 1))) > (len stages(i))) =>      (forall ex in set Cand_names &        (forall sc in set (elems stages((i + 1))) &          i in set inds stages)))))Proof Obligation 102' (Unproved)make_result_sheet, result' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 404'33(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (((len stages((i + 1))) > (len stages(i))) =>      (let excluded'(<Adam> | <Bill> | <Charlie> | <Donald> | <Edward> | <Frank> | <George> | <Harry> | <Ian> | <John>) = (iota ex in set Cand_names & (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] & (forall osc in set (elems stages(i)) & ((osc.name) <> (sc.name)))})) in        (i + 1) in set inds record))))Proof Obligation 103' (Unproved)make_result_sheet, result, transferred' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 405'41(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (not ((len stages((i + 1))) > (len stages(i))) =>      exists1 tf in set Cand_names & (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] & ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) > quota))}))))Proof Obligation 104' (Unproved)make_result_sheet, result, transferred' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 407'52(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (not ((len stages((i + 1))) > (len stages(i))) =>      (forall tf in set Cand_names &        (i + 1) in set inds stages))))Proof Obligation 105' (Unproved)make_result_sheet, result, transferred' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 408'68(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (not ((len stages((i + 1))) > (len stages(i))) =>      (forall tf in set Cand_names &        (forall sc in set (elems stages((i + 1))) &          i in set inds stages)))))Proof Obligation 106' (Unproved)make_result_sheet, result' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 410'33(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (forall i'nat1 &    (not ((len stages((i + 1))) > (len stages(i))) =>      (let transferred'(<Adam> | <Bill> | <Charlie> | <Donald> | <Edward> | <Frank> | <George> | <Harry> | <Ian> | <John>) = (iota tf in set Cand_names & (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] & ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) > quota))})) in        (i + 1) in set inds record))))Proof Obligation 107' (Unproved)make_result_sheet' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 411'38(forall stages'seq of (Stage), quota'real, record'seq of (Record_entry), elected'set of (Candidate_names) &  (let result' (nat1 -> Result)  	result(i) ==  (if ((len stages((i + 1))) > (len stages(i)))  then let excluded'(<Adam> | <Bill> | <Charlie> | <Donald> | <Edward> | <Frank> | <George> | <Harry> | <Ian> | <John>) = (iota ex in set Cand_names & (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] & (forall osc in set (elems stages(i)) & ((osc.name) <> (sc.name)))})) in mk_Result((record((i + 1)).scores), nil, excluded)  else let transferred'(<Adam> | <Bill> | <Charlie> | <Donald> | <Edward> | <Frank> | <George> | <Harry> | <Ian> | <John>) = (iota tf in set Cand_names & (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] & ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) > quota))})) in mk_Result((record((i + 1)).scores), transferred, nil)) in    (forall j in set {1, ... ,((len record) - 1)} &      ((len record) - j) > 0)))Proof Obligation 108' (Unproved)sp_set_seq' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 417'12(forall s'set of (Sub_parcel) &  (not (s = {}) =>    exists e in set s))Proof Obligation 109' (Unproved)sub_parcels_sort' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 424'26(forall sps'seq of (Sub_parcel) &  (not [] = sps =>    (not exists [e]'seq of (Sub_parcel) & [e] = sps =>      exists sps1 ^ sps2 in set {sps} & ((abs ((len sps1) - (len sps2))) < 2))))Proof Obligation 110' (Unproved)sub_parcels_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 435'48(forall sps1'seq of (Sub_parcel), sps2'seq of (Sub_parcel) &  (not exists mk_([], sps)'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_([], sps) = mk_(sps1, sps2) =>    (not exists mk_(sps, [])'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_(sps, []) = mk_(sps1, sps2) =>      sps1 <> [])))Proof Obligation 111' (Unproved)sub_parcels_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 435'71(forall sps1'seq of (Sub_parcel), sps2'seq of (Sub_parcel) &  (not exists mk_([], sps)'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_([], sps) = mk_(sps1, sps2) =>    (not exists mk_(sps, [])'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_(sps, []) = mk_(sps1, sps2) =>      sps2 <> [])))Proof Obligation 112' (Unproved)sub_parcels_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 436'39(forall sps1'seq of (Sub_parcel), sps2'seq of (Sub_parcel) &  (not exists mk_([], sps)'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_([], sps) = mk_(sps1, sps2) =>    (not exists mk_(sps, [])'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_(sps, []) = mk_(sps1, sps2) =>      ((total_value((hd sps1)) >= total_value((hd sps2))) =>        sps1 <> []))))Proof Obligation 113' (Unproved)sub_parcels_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 436'68(forall sps1'seq of (Sub_parcel), sps2'seq of (Sub_parcel) &  (not exists mk_([], sps)'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_([], sps) = mk_(sps1, sps2) =>    (not exists mk_(sps, [])'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_(sps, []) = mk_(sps1, sps2) =>      ((total_value((hd sps1)) >= total_value((hd sps2))) =>        sps1 <> []))))Proof Obligation 114' (Unproved)sub_parcels_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 437'39(forall sps1'seq of (Sub_parcel), sps2'seq of (Sub_parcel) &  (not exists mk_([], sps)'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_([], sps) = mk_(sps1, sps2) =>    (not exists mk_(sps, [])'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_(sps, []) = mk_(sps1, sps2) =>      (not (total_value((hd sps1)) >= total_value((hd sps2))) =>        sps2 <> []))))Proof Obligation 115' (Unproved)sub_parcels_merge' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 437'74(forall sps1'seq of (Sub_parcel), sps2'seq of (Sub_parcel) &  (not exists mk_([], sps)'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_([], sps) = mk_(sps1, sps2) =>    (not exists mk_(sps, [])'(seq of (Sub_parcel) * seq of (Sub_parcel)) & mk_(sps, []) = mk_(sps1, sps2) =>      (not (total_value((hd sps1)) >= total_value((hd sps2))) =>        sps2 <> []))))Proof Obligation 116' (Unproved)CHOOSE_SURPLUS_TO_TRANSFER, leaders' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 446'53stages <> []Proof Obligation 117' (Unproved)CHOOSE_SURPLUS_TO_TRANSFER, leaders' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 447'46(forall score in set (elems (hd stages)) &  stages <> [])Proof Obligation 118' (Unproved)CHOOSE_SURPLUS_TO_TRANSFER, leaders' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 447'43(forall score in set (elems (hd stages)) &  (hd stages) <> [])Proof Obligation 119' (Unproved)CHOOSE_SURPLUS_TO_TRANSFER' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 452'25exists1 name in set leaders & greatest_value_at_earliest_stage(name, stages)Proof Obligation 120' (Unproved)CHOOSE_CANDIDATE_TO_EXCLUDE, lowest' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 460'51stages <> []Proof Obligation 121' (Unproved)CHOOSE_CANDIDATE_TO_EXCLUDE, lowest' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 461'40(forall score in set (elems (hd stages)) &  pre_stage_bk((hd stages)))Proof Obligation 122' (Unproved)CHOOSE_CANDIDATE_TO_EXCLUDE, lowest' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 461'52(forall score in set (elems (hd stages)) &  stages <> [])Proof Obligation 123' (Unproved)CHOOSE_CANDIDATE_TO_EXCLUDE' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 465'46(forall n in set lowest &  is_(stages, seq1 of (Stage)))Proof Obligation 124' (Unproved)CHOOSE_CANDIDATE_TO_EXCLUDE' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 466'25exists1 name in set lowest & trailing_candidate(name, stages)Proof Obligation 125' (Unproved)CHOOSE_CANDIDATE_TO_EXCLUDE' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 467'46(forall name in set lowest &  is_(stages, seq1 of (Stage)))Proof Obligation 126' (Unproved)RANDOM_ELEMENT, c' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 474'32next_choice <> []Proof Obligation 127' (Unproved)RANDOM_ELEMENT' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 475'4-- After next_choice '= (tl next_choice)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 128' (Unproved)RANDOM_ELEMENT' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 475'22next_choice <> []Proof Obligation 129' (Unproved)PREPARE_ELECTION' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 481'6-- After excluded '= {}let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 130' (Unproved)PREPARE_ELECTION' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 482'6-- After continuing '= curr_contlet s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 131' (Unproved)PREPARE_ELECTION' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 483'6-- After next_choice '= rand_choicelet s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 132' (Unproved)PREPARE_ELECTION' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 484'6-- After elected '= {}let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 133' (Unproved)PREPARE_ELECTION' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 485'6-- After stages '= [build_first_stage(curr_cont)]let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 134' (Unproved)PREPARE_ELECTION' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 486'6-- After quota '= two_decimal_places((size(votes) / (Number_of_vacancies + 1)))let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 135' (Unproved)PREPARE_ELECTION' non-zero obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 486'45(Number_of_vacancies + 1) <> 0Proof Obligation 136' (Unproved)PREPARE_ELECTION' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 487'6-- After record '= [mk_Record_entry((elems (hd stages)), 0, 0)]let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 137' (Unproved)PREPARE_ELECTION' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 487'42stages <> []Proof Obligation 138' (Unproved)ELECT_ALL_REMAINING_CANDIDATES' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 497'4-- After elected '= (elected union continuing)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 139' (Unproved)ELECT_ALL_REMAINING_CANDIDATES' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 498'4-- After continuing '= {}let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 140' (Unproved)PROCESS_SUB_PARCELS, bundle' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 506'55inv_Value(0.0) and (is_real(0.0))Proof Obligation 141' (Unproved)PROCESS_SUB_PARCELS, new_stage' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 508'31stages <> []Proof Obligation 142' (Unproved)PROCESS_SUB_PARCELS' while loop termination obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 509'4while (i <> (len sub_parcels)) do ...Proof Obligation 143' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 510'11-- After i '= (i + 1)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 144' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 511'7-- After bundle '= construct_sub_parcels((sub_parcels(i).value), (sub_parcels(i).votes), ex_cand, new_candidates)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 145' (Unproved)PROCESS_SUB_PARCELS' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 512'37i in set inds sub_parcelsProof Obligation 146' (Unproved)PROCESS_SUB_PARCELS' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 512'58i in set inds sub_parcelsProof Obligation 147' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 514'11-- After non_trans_value '= (non_trans_value + (size(((bundle.non_transferable).votes)) * (sub_parcels(i).value)))let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 148' (Unproved)PROCESS_SUB_PARCELS' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 515'9i in set inds sub_parcelsProof Obligation 149' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 516'11-- After new_candidates '= redistribute_parcels(new_candidates, bundle)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 150' (Unproved)PROCESS_SUB_PARCELS' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 516'28pre_redistribute_parcels(new_candidates, bundle)Proof Obligation 151' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 517'11-- After new_stage '= construct_new_stage(new_stage, (ex_cand.name), bundle)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 152' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 526'10-- After elected '= (elected union new_elected)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 153' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 527'17-- After new_candidates '= (new_candidates \ new_elected)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 154' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 529'9-- After continuing '= new_candidateslet s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 155' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 530'9-- After excluded '= (excluded union {ex_cand})let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 156' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 531'9-- After record '= ([mk_Record_entry((((elems new_stage) union {score | [score in set ((hd record).scores)] & ((score.name) not in set {(sc.name) | [sc in set (elems new_stage)]})}) union {mk_Score((ex_cand.name), 0)}), non_trans_value, 0)] ^ record)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 157' (Unproved)PROCESS_SUB_PARCELS' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 533'59record <> []Proof Obligation 158' (Unproved)PROCESS_SUB_PARCELS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 539'9-- After stages '= ([[new_stage(i) | i in set (inds new_stage) & ((new_stage(i).name) <> (ex_cand.name))]] ^ stages)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 159' (Trivial by <forall x in set s & x in set s>)PROCESS_SUB_PARCELS' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 539'20(forall i in set (inds new_stage) & ((new_stage(i).name) <> (ex_cand.name)) =>  i in set inds new_stage)Proof Obligation 160' (Trivial by <forall x in set s & x in set s>)PROCESS_SUB_PARCELS' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 540'27(forall i in set (inds new_stage) &  i in set inds new_stage)Proof Obligation 161' (Unproved)PROCESS_SUB_PARCELS' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 540'62is_(([[new_stage(i) | i in set (inds new_stage) & ((new_stage(i).name) <> (ex_cand.name))]] ^ stages), seq of (Stage))Proof Obligation 162' (Unproved)ELECT_LAST_CANDIDATE, elected_candidate' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 545'37exists1 leader in set continuing & ((leader.name) = ((hd stages)(Number_of_vacancies).name))Proof Obligation 163' (Unproved)ELECT_LAST_CANDIDATE, elected_candidate' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 546'25(forall leader in set continuing &  Number_of_vacancies in set inds (hd stages))Proof Obligation 164' (Unproved)ELECT_LAST_CANDIDATE, elected_candidate' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 546'28(forall leader in set continuing &  stages <> [])Proof Obligation 165' (Unproved)ELECT_LAST_CANDIDATE' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 547'6-- After elected '= (elected union {elected_candidate})let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 166' (Unproved)ELECT_LAST_CANDIDATE' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 548'6-- After continuing '= (continuing \ {elected_candidate})let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 167' (Unproved)TRANSFER_SURPLUS, candidate' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 554'20exists1 c in set elected & ((c.name) = name)Proof Obligation 168' (Unproved)TRANSFER_SURPLUS, surplus' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 555'25stages <> []Proof Obligation 169' (Unproved)TRANSFER_SURPLUS, surplus' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 555'22(hd stages) <> []Proof Obligation 170' (Unproved)TRANSFER_SURPLUS, sub_parcel' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 557'65(surplus_from_original_votes(candidate) =>  inv_Value(1.0) and (is_real(1.0)))Proof Obligation 171' (Unproved)TRANSFER_SURPLUS, sub_parcel' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 558'29(not surplus_from_original_votes(candidate) =>  (candidate.transferred_votes) <> [])Proof Obligation 172' (Unproved)TRANSFER_SURPLUS, new_stage' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 563'35inv_Stage(([mk_Score(name, quota)] ^ [(hd stages)(i) | i in set (inds (hd stages)) & (((hd stages)(i).name) <> name)])) and (is_(([mk_Score(name, quota)] ^ [(hd stages)(i) | i in set (inds (hd stages)) & (((hd stages)(i).name) <> name)]), seq of (Score)))Proof Obligation 173' (Trivial by <forall x in set s & x in set s>)TRANSFER_SURPLUS, new_stage' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 564'15(forall i in set (inds (hd stages)) & (((hd stages)(i).name) <> name) =>  i in set inds (hd stages))Proof Obligation 174' (Unproved)TRANSFER_SURPLUS, new_stage' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 564'18(forall i in set (inds (hd stages)) & (((hd stages)(i).name) <> name) =>  stages <> [])Proof Obligation 175' (Unproved)TRANSFER_SURPLUS, new_stage' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 564'49stages <> []Proof Obligation 176' (Trivial by <forall x in set s & x in set s>)TRANSFER_SURPLUS, new_stage' sequence apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 564'60(forall i in set (inds (hd stages)) &  i in set inds (hd stages))Proof Obligation 177' (Unproved)TRANSFER_SURPLUS, new_stage' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 565'16(forall i in set (inds (hd stages)) &  stages <> [])Proof Obligation 178' (Unproved)TRANSFER_SURPLUS, curr_cont' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 567'19pre_redistribute_parcels((continuing \ {candidate}), sub_parcel_bundle)Proof Obligation 179' (Unproved)TRANSFER_SURPLUS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 569'6-- After stages '= ([new_stage] ^ stages)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 180' (Unproved)TRANSFER_SURPLUS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 570'6-- After record '= ([mk_Record_entry(((elems new_stage) union {score | [score in set ((hd record).scores)] & ((score.name) not in set {(sc.name) | [sc in set (elems new_stage)]})}), ((sub_parcel_bundle.non_transferable).value), (sub_parcel_bundle.loss_of_value))] ^ record)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 181' (Unproved)TRANSFER_SURPLUS' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 572'42record <> []Proof Obligation 182' (Unproved)TRANSFER_SURPLUS' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 577'5-- After continuing '= curr_contlet s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 183' (Unproved)EXCLUDE_CANDIDATE, excluded_candidate' unique existence binding obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 587'31exists1 c in set continuing & ((c.name) = name)Proof Obligation 184' (Unproved)EXCLUDE_CANDIDATE, sorted_sub_parcels' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 593'70inv_Value(1.0) and (is_real(1.0))Proof Obligation 185' (Unproved)CONDUCT_ELECTION' while loop termination obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 618'6while (((card elected) <> Number_of_vacancies) and ((card continuing) > 0)) do ...Proof Obligation 186' (Unproved)CHANGE_STATUS_OF_ELECTED_CANDIDATES, xs_quota_scs' non-empty sequence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 625'52stages <> []Proof Obligation 187' (Unproved)CHANGE_STATUS_OF_ELECTED_CANDIDATES' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 629'7-- After elected '= (candidates_satisfying_quota union elected)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))Proof Obligation 188' (Unproved)CHANGE_STATUS_OF_ELECTED_CANDIDATES' state invariant obligation in 'DEFAULT' (../../documentation/examples/VDMSL/STV/stv.vdmsl) at line 630'6-- After continuing '= (continuing \ candidates_satisfying_quota)let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) & ((cand1 = cand2) <=> ((cand1.name) = (cand2.name))))))
