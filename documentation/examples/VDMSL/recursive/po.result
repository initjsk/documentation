RESULT:result:-1:-1,-1:Proof Obligation 1' (Unproved)ASyncGraph' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 9'20(forall asyncg'Graph &  (forall id in set (dom asyncg) &    pre_TransClos(asyncg, id)))Proof Obligation 2' (Trivial by <x in set s => x in set s>)Paths, children' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 19'18(forall g'ASyncGraph, id'Id & (id in set (dom g)) =>  id in set dom g)Proof Obligation 3' (Unproved)Paths' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 23'39(forall g'ASyncGraph, id'Id & (id in set (dom g)) =>  (let children'set of (Id) = g(id) in    (not (children = {}) =>      (forall c in set children &        pre_Paths(g, c)))))Proof Obligation 4' (Unproved)Paths' recursive function obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 17'1(forall g'ASyncGraph, id'Id & (id in set (dom g)) =>  (let children'set of (Id) = g(id) in    (not (children = {}) =>      (forall c in set children &        measureTransClos(g, id) > measureTransClos(g, c)))))Proof Obligation 5' (Unproved)measureTransClos' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 30'8(forall g'ASyncGraph, id'Id &  pre_TransClos(g, id))Proof Obligation 6' (Unproved)LinearPath' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 44'19(forall g'Graph, id'Id &  ((id in set (dom g)) =>    pre_TransClos(g, id)))Proof Obligation 7' (Unproved)LinearPath, children' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 34'18(forall g'Graph, id'Id & ((id in set (dom g)) and (id not in set TransClos(g, id))) =>  id in set dom g)Proof Obligation 8' (Unproved)LinearPath' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 38'44(forall g'Graph, id'Id & ((id in set (dom g)) and (id not in set TransClos(g, id))) =>  (let children'set of (Id) = g(id) in    (not ((card children) <> 1) =>      (forall parent in set (dom g) &        ((parent <> id) =>          parent in set dom g)))))Proof Obligation 9' (Unproved)LinearPath' let be st existence obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 40'14(forall g'Graph, id'Id & ((id in set (dom g)) and (id not in set TransClos(g, id))) =>  (let children'set of (Id) = g(id) in    (not (((card children) <> 1) or (exists [parent in set (dom g)] & ((parent <> id) and (children subset g(parent))))) =>      exists child in set children)))Proof Obligation 10' (Unproved)LinearPath' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 42'19(forall g'Graph, id'Id & ((id in set (dom g)) and (id not in set TransClos(g, id))) =>  (let children'set of (Id) = g(id) in    (not (((card children) <> 1) or (exists [parent in set (dom g)] & ((parent <> id) and (children subset g(parent))))) =>      (forall child in set children &        pre_LinearPath(g, child)))))Proof Obligation 11' (Unproved)TransClos' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 48'11(forall g'Graph, id'Id & (id in set (dom g)) =>  (forall c in set g(id) &    pre_TransClosAux(g, c, {})))Proof Obligation 12' (Trivial by <x in set s => x in set s>)TransClos' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 48'42(forall g'Graph, id'Id & (id in set (dom g)) =>  id in set dom g)Proof Obligation 13' (Unproved)TransClosAux' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 56'16(forall g'Graph, id'Id, reached'set of (Id) & (id in set (dom g)) =>  (not (id in set reached) =>    (forall c in set g(id) &      pre_TransClosAux(g, c, (reached union {id})))))Proof Obligation 14' (Unproved)TransClosAux' recursive function obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 51'1(forall g'Graph, id'Id, reached'set of (Id) & (id in set (dom g)) =>  (not (id in set reached) =>    (forall c in set g(id) &      measureGraphReached(g, id, reached) > measureGraphReached(g, c, (reached union {id})))))Proof Obligation 15' (Unproved)TransClosAux' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 57'26(forall g'Graph, id'Id, reached'set of (Id) & (id in set (dom g)) =>  (not (id in set reached) =>    id in set dom g))Proof Obligation 16' (Unproved)measureGraphReached' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 61'1(forall g'Graph, reached'Id &  ((card (dom g)) - (card reached)) >= 0)Proof Obligation 17' (Unproved)AsycDescendents' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 67'22(forall g'AcyclicGraph, id'Id & (id in set (dom g)) =>  (forall c in set g(id) &    pre_AsycDescendents(g, c)))Proof Obligation 18' (Unproved)AsycDescendents' recursive function obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 65'1(forall g'AcyclicGraph, id'Id & (id in set (dom g)) =>  (forall c in set g(id) &    measureTransClos(g, id) > measureTransClos(g, c)))Proof Obligation 19' (Trivial by <x in set s => x in set s>)AsycDescendents' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 67'55(forall g'AcyclicGraph, id'Id & (id in set (dom g)) =>  id in set dom g)Proof Obligation 20' (Unproved)Descendents' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 76'16(forall g'Graph, id'Id, reached'set of (Id) & (id in set (dom g)) =>  (not (id in set reached) =>    (forall c in set g(id) &      pre_Descendents(g, c, (reached union {id})))))Proof Obligation 21' (Unproved)Descendents' recursive function obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 71'1(forall g'Graph, id'Id, reached'set of (Id) & (id in set (dom g)) =>  (not (id in set reached) =>    (forall c in set g(id) &      measureGraphReached(g, id, reached) > measureGraphReached(g, c, (reached union {id})))))Proof Obligation 22' (Unproved)Descendents' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 77'26(forall g'Graph, id'Id, reached'set of (Id) & (id in set (dom g)) =>  (not (id in set reached) =>    id in set dom g))Proof Obligation 23' (Unproved)AllDesc' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 83'11(forall g'Graph, id'Id & (id in set (dom g)) =>  (forall c in set g(id) &    pre_TransClosAux(g, c, {})))Proof Obligation 24' (Trivial by <x in set s => x in set s>)AllDesc' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 83'42(forall g'Graph, id'Id & (id in set (dom g)) =>  id in set dom g)Proof Obligation 25' (Unproved)AcyclicGraph' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 91'16(forall acg'Graph &  (forall id in set (dom acg) &    pre_AllDesc(acg, id)))Proof Obligation 26' (Unproved)graph' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 95'19forall m1, m2 in set {{1 |-> {2, 3}}, {2 |-> {4}}, {3 |-> {5}}, {4 |-> {6}}, {5 |-> {6}}, {6 |-> {}}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 27' (Unproved)graph' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/graphs.vdmsl) at line 95'19inv_Graph({1 |-> {2, 3}, 2 |-> {4}, 3 |-> {5}, 4 |-> {6}, 5 |-> {6}, 6 |-> {}})Proof Obligation 28' (Unproved)AcyclicLabGraph' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 11'16(forall acg'LabGraph &  (forall id in set (dom acg) &    pre_AllLabDesc(acg, id)))Proof Obligation 29' (Unproved)AllLabDesc' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 21'11(forall g'LabGraph, id'NodeId & (id in set (dom g)) =>  (forall c in set (rng g(id)) &    pre_LabDescendents(g, c, {})))Proof Obligation 30' (Trivial by <x in set s => x in set s>)AllLabDesc' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 21'48(forall g'LabGraph, id'NodeId & (id in set (dom g)) =>  id in set dom g)Proof Obligation 31' (Unproved)measureLabGraphReached' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 24'1(forall g'LabGraph, reached'Id &  ((card (dom g)) - (card reached)) >= 0)Proof Obligation 32' (Unproved)LabDescendents' function apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 33'16(forall g'LabGraph, id'NodeId, reached'set of (NodeId) & (id in set (dom g)) =>  (not (id in set reached) =>    (forall c in set (rng g(id)) &      pre_LabDescendents(g, c, (reached union {id})))))Proof Obligation 33' (Unproved)LabDescendents' recursive function obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 28'1(forall g'LabGraph, id'NodeId, reached'set of (NodeId) & (id in set (dom g)) =>  (not (id in set reached) =>    (forall c in set (rng g(id)) &      measureLabGraphReached(g, id, reached) > measureLabGraphReached(g, c, (reached union {id})))))Proof Obligation 34' (Unproved)LabDescendents' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 34'30(forall g'LabGraph, id'NodeId, reached'set of (NodeId) & (id in set (dom g)) =>  (not (id in set reached) =>    id in set dom g))Proof Obligation 35' (Unproved)UniqueArcIds, m' map set compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 40'11(forall g'map (NodeId) to (map (ArcId) to (NodeId)) &  forall m1, m2 in set {{nid |-> (dom g(nid))} | nid in set (dom g)} &    forall d3 in set dom m1, d4 in set dom m2 &      d3 = d4 => m1(d3) = m2(d4))Proof Obligation 36' (Trivial by <forall x in set s & x in set s>)UniqueArcIds, m' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 40'24(forall g'map (NodeId) to (map (ArcId) to (NodeId)) &  (forall nid in set (dom g) &    nid in set dom g))Proof Obligation 37' (Unproved)UniqueArcIds' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 43'24(forall g'map (NodeId) to (map (ArcId) to (NodeId)) &  (let m'map (NodeId) to (set of (ArcId)) = {nid |-> (dom g(nid)) | nid in set (dom g)} in    (forall nid1, nid2 in set (dom m) &      nid1 in set dom m)))Proof Obligation 38' (Unproved)UniqueArcIds' map apply obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 43'38(forall g'map (NodeId) to (map (ArcId) to (NodeId)) &  (let m'map (NodeId) to (set of (ArcId)) = {nid |-> (dom g(nid)) | nid in set (dom g)} in    (forall nid1, nid2 in set (dom m) &      nid2 in set dom m)))Proof Obligation 39' (Unproved)lgraph' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 47'30forall m1, m2 in set {{1 |-> 2}, {2 |-> 3}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 40' (Unproved)lgraph' map sequence compatible obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 47'23forall m1, m2 in set {{1 |-> {1 |-> 2, 2 |-> 3}}, {2 |-> {3 |-> 4}}, {3 |-> {4 |-> 5}}, {4 |-> {5 |-> 6}}, {5 |-> {6 |-> 6}}, {6 |-> {}}} &  forall d3 in set dom m1, d4 in set dom m2 &    d3 = d4 => m1(d3) = m2(d4)Proof Obligation 41' (Unproved)lgraph' subtype obligation in 'DEFAULT' (../../documentation/examples/VDMSL/recursive/labgraphs.vdmsl) at line 47'23inv_LabGraph({1 |-> {1 |-> 2, 2 |-> 3}, 2 |-> {3 |-> 4}, 3 |-> {4 |-> 5}, 4 |-> {5 |-> 6}, 5 |-> {6 |-> 6}, 6 |-> {}})
