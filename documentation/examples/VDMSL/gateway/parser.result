RESULT:result:-1:-1,-1:module DEFAULTexports alldefinitionsstatic private String = seq of (char)	inv s == (s <> [])static private Message = (unresolved DEFAULT`String)	inv m == ((len m) <= 100)static private Classification = (<HI> | <LO>)static private Category = set of ((unresolved DEFAULT`String))static private Ports = compose Ports of high'seq of ((unresolved DEFAULT`Message)), low'seq of ((unresolved DEFAULT`Message)) endOccurs' ((unresolved DEFAULT`String) * (unresolved DEFAULT`String) -> bool)	Occurs(substr, str) ==(exists [i, j in set (inds str)] & (substr = (str(i, ... ,j))))Classify' ((unresolved DEFAULT`Message) * (unresolved DEFAULT`Category) -> (unresolved DEFAULT`Classification))	Classify(m, cat) ==(if (exists [hi in set cat] & Occurs(hi, m))then <HI>else <LO>)Gateway' (seq of ((unresolved DEFAULT`Message)) * (unresolved DEFAULT`Category) -> (unresolved DEFAULT`Ports))	Gateway(ms, cat) ==(if (ms = [])then mk_Ports([], [])else let rest_p = Gateway((tl ms), cat) in ProcessMessage((hd ms), cat, rest_p))MesLen' (seq of ((unresolved DEFAULT`Message)) * (unresolved DEFAULT`Category) -> nat)	MesLen(list, -) ==(len list)ProcessMessage' ((unresolved DEFAULT`Message) * (unresolved DEFAULT`Category) * (unresolved DEFAULT`Ports) -> (unresolved DEFAULT`Ports))	ProcessMessage(m, cat, ps) ==(if (Classify(m, cat) = <HI>)then mk_Ports(([m] ^ (ps.high)), (ps.low))else mk_Ports((ps.high), ([m] ^ (ps.low))))Gateway2' (seq of ((unresolved DEFAULT`Message)) * (unresolved DEFAULT`Category) -> (unresolved DEFAULT`Ports))	Gateway2(ms, cat) ==mk_Ports([ms(i) | i in set (inds ms) & (Classify(ms(i), cat) = <HI>)], [ms(i) | i in set (inds ms) & (Classify(ms(i), cat) = <LO>)])AnyHighClass' (seq of ((unresolved DEFAULT`Message)) * (unresolved DEFAULT`Category) -> bool)	AnyHighClass(ms, cat) ==(exists [m in set (elems ms)] & (Classify(m, cat) = <HI>))Censor' (seq of ((unresolved DEFAULT`Message)) * (unresolved DEFAULT`Category) -> seq of ((unresolved DEFAULT`Message)))	Censor(ms, cat) ==[ms(i) | i in set (inds ms) & (Classify(ms(i), cat) = <LO>)]FlattenMessages' (seq of ((unresolved DEFAULT`Message)) -> (unresolved DEFAULT`Message))	FlattenMessages(ms) ==(conc ms)	pre ((len (conc ms)) <= 100)end DEFAULT
