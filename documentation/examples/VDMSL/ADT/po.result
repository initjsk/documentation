RESULT:result:-1:-1,-1:Proof Obligation 1' (Unproved)Nodes_GetData, data' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 93'15(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (is_(node, Nodes_SingleLink) =>    exists mk_Nodes_SingleLink(data, -)'Nodes_Node & mk_Nodes_SingleLink(data, -) = node))Proof Obligation 2' (Unproved)Nodes_GetData, data' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 93'46(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (is_(node, Nodes_SingleLink) =>    is_(node, Nodes_SingleLink)))Proof Obligation 3' (Unproved)Nodes_GetData, data' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 95'15(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (not is_(node, Nodes_SingleLink) =>    (is_(node, Nodes_DoubleLink) =>      exists mk_Nodes_DoubleLink(data, -, -)'Nodes_Node & mk_Nodes_DoubleLink(data, -, -) = node)))Proof Obligation 4' (Unproved)Nodes_GetData, data' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 95'49(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (not is_(node, Nodes_SingleLink) =>    (is_(node, Nodes_DoubleLink) =>      is_(node, Nodes_DoubleLink))))Proof Obligation 5' (Unproved)Nodes_GetData, data' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 97'15(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (not is_(node, Nodes_SingleLink) =>    (not is_(node, Nodes_DoubleLink) =>      exists mk_Nodes_BinaryTree(data, -, -, -)'Nodes_Node & mk_Nodes_BinaryTree(data, -, -, -) = node)))Proof Obligation 6' (Unproved)Nodes_GetData, data' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 97'52(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (not is_(node, Nodes_SingleLink) =>    (not is_(node, Nodes_DoubleLink) =>      is_(node, Nodes_BinaryTree))))Proof Obligation 7' (Unproved)Nodes_SetData, next' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 105'15(forall node'Nodes_Node, data'Nodes_Data & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (is_(node, Nodes_SingleLink) =>    exists mk_Nodes_SingleLink(-, next)'Nodes_Node & mk_Nodes_SingleLink(-, next) = node))Proof Obligation 8' (Unproved)Nodes_SetData, next' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 105'46(forall node'Nodes_Node, data'Nodes_Data & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (is_(node, Nodes_SingleLink) =>    is_(node, Nodes_SingleLink)))Proof Obligation 9' (Unproved)Nodes_SetData, next, prev' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 108'15(forall node'Nodes_Node, data'Nodes_Data & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (not is_(node, Nodes_SingleLink) =>    (is_(node, Nodes_DoubleLink) =>      exists mk_Nodes_DoubleLink(-, next, prev)'Nodes_Node & mk_Nodes_DoubleLink(-, next, prev) = node)))Proof Obligation 10' (Unproved)Nodes_SetData, next, prev' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 108'52(forall node'Nodes_Node, data'Nodes_Data & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (not is_(node, Nodes_SingleLink) =>    (is_(node, Nodes_DoubleLink) =>      is_(node, Nodes_DoubleLink))))Proof Obligation 11' (Unproved)Nodes_SetData, right, left, parent' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 112'15(forall node'Nodes_Node, data'Nodes_Data & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (not is_(node, Nodes_SingleLink) =>    (not is_(node, Nodes_DoubleLink) =>      exists mk_Nodes_BinaryTree(-, right, left, parent)'Nodes_Node & mk_Nodes_BinaryTree(-, right, left, parent) = node)))Proof Obligation 12' (Unproved)Nodes_SetData, right, left, parent' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 112'61(forall node'Nodes_Node, data'Nodes_Data & (is_(node, Nodes_SingleLink) or (is_(node, Nodes_DoubleLink) or is_(node, Nodes_BinaryTree))) =>  (not is_(node, Nodes_SingleLink) =>    (not is_(node, Nodes_DoubleLink) =>      is_(node, Nodes_BinaryTree))))Proof Obligation 13' (Unproved)Nodes_GetNext, next' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 121'15(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or is_(node, Nodes_DoubleLink)) =>  (is_(node, Nodes_SingleLink) =>    exists mk_Nodes_SingleLink(-, next)'Nodes_Node & mk_Nodes_SingleLink(-, next) = node))Proof Obligation 14' (Unproved)Nodes_GetNext, next' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 121'46(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or is_(node, Nodes_DoubleLink)) =>  (is_(node, Nodes_SingleLink) =>    is_(node, Nodes_SingleLink)))Proof Obligation 15' (Unproved)Nodes_GetNext, next' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 123'15(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or is_(node, Nodes_DoubleLink)) =>  (not is_(node, Nodes_SingleLink) =>    exists mk_Nodes_DoubleLink(-, next, -)'Nodes_Node & mk_Nodes_DoubleLink(-, next, -) = node))Proof Obligation 16' (Unproved)Nodes_GetNext, next' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 123'49(forall node'Nodes_Node & (is_(node, Nodes_SingleLink) or is_(node, Nodes_DoubleLink)) =>  (not is_(node, Nodes_SingleLink) =>    is_(node, Nodes_DoubleLink)))Proof Obligation 17' (Unproved)Nodes_SetNext, data' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 130'15(forall node'Nodes_Node, next'Nodes_NodePtr & (is_(node, Nodes_SingleLink) or is_(node, Nodes_DoubleLink)) =>  (is_(node, Nodes_SingleLink) =>    exists mk_Nodes_SingleLink(data, -)'Nodes_Node & mk_Nodes_SingleLink(data, -) = node))Proof Obligation 18' (Unproved)Nodes_SetNext, data' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 130'46(forall node'Nodes_Node, next'Nodes_NodePtr & (is_(node, Nodes_SingleLink) or is_(node, Nodes_DoubleLink)) =>  (is_(node, Nodes_SingleLink) =>    is_(node, Nodes_SingleLink)))Proof Obligation 19' (Unproved)Nodes_SetNext, data, prev' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 133'15(forall node'Nodes_Node, next'Nodes_NodePtr & (is_(node, Nodes_SingleLink) or is_(node, Nodes_DoubleLink)) =>  (not is_(node, Nodes_SingleLink) =>    exists mk_Nodes_DoubleLink(data, -, prev)'Nodes_Node & mk_Nodes_DoubleLink(data, -, prev) = node))Proof Obligation 20' (Unproved)Nodes_SetNext, data, prev' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 133'52(forall node'Nodes_Node, next'Nodes_NodePtr & (is_(node, Nodes_SingleLink) or is_(node, Nodes_DoubleLink)) =>  (not is_(node, Nodes_SingleLink) =>    is_(node, Nodes_DoubleLink)))Proof Obligation 21' (Unproved)Nodes_GetPrev, prev' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 140'10(forall node'Nodes_Node & is_(node, Nodes_DoubleLink) =>  exists mk_Nodes_DoubleLink(-, -, prev)'Nodes_Node & mk_Nodes_DoubleLink(-, -, prev) = node)Proof Obligation 22' (Unproved)Nodes_GetPrev, prev' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 140'44(forall node'Nodes_Node & is_(node, Nodes_DoubleLink) =>  is_(node, Nodes_DoubleLink))Proof Obligation 23' (Unproved)Nodes_SetPrev, data, next' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 145'10(forall node'Nodes_Node, prev'Nodes_NodePtr & is_(node, Nodes_DoubleLink) =>  exists mk_Nodes_DoubleLink(data, next, -)'Nodes_Node & mk_Nodes_DoubleLink(data, next, -) = node)Proof Obligation 24' (Unproved)Nodes_SetPrev, data, next' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 145'47(forall node'Nodes_Node, prev'Nodes_NodePtr & is_(node, Nodes_DoubleLink) =>  is_(node, Nodes_DoubleLink))Proof Obligation 25' (Unproved)Nodes_GetRight, right' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 151'10(forall node'Nodes_Node & is_(node, Nodes_BinaryTree) =>  exists mk_Nodes_BinaryTree(-, right, -, -)'Nodes_Node & mk_Nodes_BinaryTree(-, right, -, -) = node)Proof Obligation 26' (Unproved)Nodes_GetRight, right' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 151'48(forall node'Nodes_Node & is_(node, Nodes_BinaryTree) =>  is_(node, Nodes_BinaryTree))Proof Obligation 27' (Unproved)Nodes_SetRight, data, left, parent' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 157'10(forall node'Nodes_Node, right'Nodes_NodePtr & is_(node, Nodes_BinaryTree) =>  exists mk_Nodes_BinaryTree(data, -, left, parent)'Nodes_Node & mk_Nodes_BinaryTree(data, -, left, parent) = node)Proof Obligation 28' (Unproved)Nodes_SetRight, data, left, parent' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 157'55(forall node'Nodes_Node, right'Nodes_NodePtr & is_(node, Nodes_BinaryTree) =>  is_(node, Nodes_BinaryTree))Proof Obligation 29' (Unproved)Nodes_GetLeft, left' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 163'10(forall node'Nodes_Node & is_(node, Nodes_BinaryTree) =>  exists mk_Nodes_BinaryTree(-, -, left, -)'Nodes_Node & mk_Nodes_BinaryTree(-, -, left, -) = node)Proof Obligation 30' (Unproved)Nodes_GetLeft, left' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 163'47(forall node'Nodes_Node & is_(node, Nodes_BinaryTree) =>  is_(node, Nodes_BinaryTree))Proof Obligation 31' (Unproved)Nodes_SetLeft, data, right, parent' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 168'10(forall node'Nodes_Node, left'Nodes_NodePtr & is_(node, Nodes_BinaryTree) =>  exists mk_Nodes_BinaryTree(data, right, -, parent)'Nodes_Node & mk_Nodes_BinaryTree(data, right, -, parent) = node)Proof Obligation 32' (Unproved)Nodes_SetLeft, data, right, parent' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 168'56(forall node'Nodes_Node, left'Nodes_NodePtr & is_(node, Nodes_BinaryTree) =>  is_(node, Nodes_BinaryTree))Proof Obligation 33' (Unproved)Nodes_GetParent, parent' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 174'10(forall node'Nodes_Node & is_(node, Nodes_BinaryTree) =>  exists mk_Nodes_BinaryTree(-, -, -, parent)'Nodes_Node & mk_Nodes_BinaryTree(-, -, -, parent) = node)Proof Obligation 34' (Unproved)Nodes_GetParent, parent' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 174'49(forall node'Nodes_Node & is_(node, Nodes_BinaryTree) =>  is_(node, Nodes_BinaryTree))Proof Obligation 35' (Unproved)Nodes_SetParent, data, right, left' value binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 179'10(forall node'Nodes_Node, parent'Nodes_NodePtr & is_(node, Nodes_BinaryTree) =>  exists mk_Nodes_BinaryTree(data, right, left, -)'Nodes_Node & mk_Nodes_BinaryTree(data, right, left, -) = node)Proof Obligation 36' (Unproved)Nodes_SetParent, data, right, left' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 179'54(forall node'Nodes_Node, parent'Nodes_NodePtr & is_(node, Nodes_BinaryTree) =>  is_(node, Nodes_BinaryTree))Proof Obligation 37' (Unproved)Heaps_InitSequence' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 237'12(forall length'nat1 &  ((length > 1) =>    inv_Heaps_Location(mk_Heaps_Location(nil, false))))Proof Obligation 38' (Unproved)Heaps_InitSequence' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 238'43(forall length'nat1 &  ((length > 1) =>    (length - 1) > 0))Proof Obligation 39' (Unproved)Heaps_InitSequence' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 240'12(forall length'nat1 &  (not (length > 1) =>    inv_Heaps_Location(mk_Heaps_Location(nil, false))))Proof Obligation 40' (Unproved)Heaps_Init' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 247'17inv_Heaps_Heap(mk_Heaps_Heap(Heaps_InitSequence(Heaps_Size)))Proof Obligation 41' (Trivial by <forall x in set s & x in set s>)Heaps_AmountUsed' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 252'16(forall heap'Heaps_Heap &  (let store'seq of (Heaps_Location) = (heap.storage) in    (forall i in set (inds store) & ((store(i).allocated) = true) =>      i in set inds store)))Proof Obligation 42' (Trivial by <forall x in set s & x in set s>)Heaps_AmountUsed' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 253'18(forall heap'Heaps_Heap &  (let store'seq of (Heaps_Location) = (heap.storage) in    (forall i in set (inds store) &      i in set inds store)))Proof Obligation 43' (Unproved)Heaps_ModifyLoc' sequence modification obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 269'32(forall heap'Heaps_Heap, address'ADDRESS, location'Heaps_Location & (address in set (inds (heap.storage))) =>  dom {address |-> location} subset inds (heap.storage))Proof Obligation 44' (Unproved)Heaps_ModifyLoc' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 269'6(forall heap'Heaps_Heap, address'ADDRESS, location'Heaps_Location & (address in set (inds (heap.storage))) =>  inv_Heaps_Heap(mk_Heaps_Heap(((heap.storage) ++ {address |-> location}))))Proof Obligation 45' (Trivial by <x in set s => x in set s>)Heaps_Modify' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 282'10(forall heap'Heaps_Heap, address'ADDRESS, data'Heaps_Data &  (let store'seq of (Heaps_Location) = (heap.storage) in    ((address in set (inds store)) =>      address in set inds store)))Proof Obligation 46' (Unproved)Heaps_Modify' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 279'6(forall heap'Heaps_Heap, address'ADDRESS, data'Heaps_Data & let store'seq of (Heaps_Location) = (heap.storage) in ((address in set (inds store)) and ((store(address).allocated) = true)) =>  pre_Heaps_ModifyLoc(heap, address, mk_Heaps_Location(data, true)))Proof Obligation 47' (Unproved)Heaps_Modify' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 279'37(forall heap'Heaps_Heap, address'ADDRESS, data'Heaps_Data & let store'seq of (Heaps_Location) = (heap.storage) in ((address in set (inds store)) and ((store(address).allocated) = true)) =>  inv_Heaps_Location(mk_Heaps_Location(data, true)))Proof Obligation 48' (Trivial by <x in set s => x in set s>)Heaps_Retrieve' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 294'15(forall heap'Heaps_Heap, address'ADDRESS &  (let store'seq of (Heaps_Location) = (heap.storage) in    ((address in set (inds store)) =>      address in set inds store)))Proof Obligation 49' (Unproved)Heaps_Retrieve' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 290'6(forall heap'Heaps_Heap, address'ADDRESS & let store'seq of (Heaps_Location) = (heap.storage) in ((address in set (inds store)) and ((store(address).allocated) = true)) =>  address in set inds (heap.storage))Proof Obligation 50' (Trivial by <forall x in set s & x in set s>)Heaps_UnallocatedAddresses' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 303'36(forall heap'Heaps_Heap &  (let store'seq of (Heaps_Location) = (heap.storage) in    (forall i in set (inds store) &      i in set inds store)))Proof Obligation 51' (Unproved)Heaps_UnallocatedAddress' unique existence binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 311'6(forall heap'Heaps_Heap & Heaps_Available(heap) =>  exists1 new in set Heaps_UnallocatedAddresses(heap) & (forall i in set Heaps_UnallocatedAddresses(heap) & (new <= i)))Proof Obligation 52' (Unproved)NEW, newAddress' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 327'23pre_Heaps_UnallocatedAddress(heap)Proof Obligation 53' (Unproved)NEW, newLoc' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 328'19inv_Heaps_Location(mk_Heaps_Location(data, true))Proof Obligation 54' (Unproved)NEW' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 329'19pre_Heaps_ModifyLoc(heap, newAddress, newLoc)Proof Obligation 55' (Unproved)DISPOSE' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 346'40inv_Heaps_Location(mk_Heaps_Location(nil, false))Proof Obligation 56' (Unproved)DISPOSE' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 345'14pre_Heaps_ModifyLoc(heap, address, mk_Heaps_Location(nil, false))Proof Obligation 57' (Unproved)DISPOSE' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 345'45inv_Heaps_Location(mk_Heaps_Location(nil, false))Proof Obligation 58' (Unproved)SET_DATA' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 354'14pre_Heaps_Modify(heap, ptr, Nodes_SetData(Heaps_Retrieve(heap, ptr), data))Proof Obligation 59' (Unproved)SET_DATA' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 355'16pre_Nodes_SetData(Heaps_Retrieve(heap, ptr), data)Proof Obligation 60' (Unproved)SET_DATA' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 355'30((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 61' (Unproved)SET_DATA' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 355'30pre_Heaps_Retrieve(heap, ptr)Proof Obligation 62' (Unproved)SET_NEXT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 360'14pre_Heaps_Modify(heap, ptr, Nodes_SetNext(Heaps_Retrieve(heap, ptr), next))Proof Obligation 63' (Unproved)SET_NEXT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 361'16pre_Nodes_SetNext(Heaps_Retrieve(heap, ptr), next)Proof Obligation 64' (Unproved)SET_NEXT' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 361'30((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 65' (Unproved)SET_NEXT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 361'30pre_Heaps_Retrieve(heap, ptr)Proof Obligation 66' (Unproved)SET_LEFT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 365'14pre_Heaps_Modify(heap, ptr, Nodes_SetLeft(Heaps_Retrieve(heap, ptr), left))Proof Obligation 67' (Unproved)SET_LEFT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 366'16pre_Nodes_SetLeft(Heaps_Retrieve(heap, ptr), left)Proof Obligation 68' (Unproved)SET_LEFT' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 366'30((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 69' (Unproved)SET_LEFT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 366'30pre_Heaps_Retrieve(heap, ptr)Proof Obligation 70' (Unproved)SET_RIGHT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 370'14pre_Heaps_Modify(heap, ptr, Nodes_SetRight(Heaps_Retrieve(heap, ptr), right))Proof Obligation 71' (Unproved)SET_RIGHT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 371'16pre_Nodes_SetRight(Heaps_Retrieve(heap, ptr), right)Proof Obligation 72' (Unproved)SET_RIGHT' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 371'31((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 73' (Unproved)SET_RIGHT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 371'31pre_Heaps_Retrieve(heap, ptr)Proof Obligation 74' (Unproved)SET_PREV' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 375'14pre_Heaps_Modify(heap, ptr, Nodes_SetPrev(Heaps_Retrieve(heap, ptr), prev))Proof Obligation 75' (Unproved)SET_PREV' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 376'16pre_Nodes_SetPrev(Heaps_Retrieve(heap, ptr), prev)Proof Obligation 76' (Unproved)SET_PREV' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 376'30((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 77' (Unproved)SET_PREV' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 376'30pre_Heaps_Retrieve(heap, ptr)Proof Obligation 78' (Unproved)SET_PARENT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 380'14pre_Heaps_Modify(heap, ptr, Nodes_SetParent(Heaps_Retrieve(heap, ptr), parent))Proof Obligation 79' (Unproved)SET_PARENT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 381'16pre_Nodes_SetParent(Heaps_Retrieve(heap, ptr), parent)Proof Obligation 80' (Unproved)SET_PARENT' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 381'32((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 81' (Unproved)SET_PARENT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 381'32pre_Heaps_Retrieve(heap, ptr)Proof Obligation 82' (Unproved)DATA' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 385'13pre_Nodes_GetData(Heaps_Retrieve(heap, ptr))Proof Obligation 83' (Unproved)DATA' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 385'27((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 84' (Unproved)DATA' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 385'27pre_Heaps_Retrieve(heap, ptr)Proof Obligation 85' (Unproved)NEXT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 389'13pre_Nodes_GetNext(Heaps_Retrieve(heap, ptr))Proof Obligation 86' (Unproved)NEXT' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 389'27((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 87' (Unproved)NEXT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 389'27pre_Heaps_Retrieve(heap, ptr)Proof Obligation 88' (Unproved)LEFT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 393'13pre_Nodes_GetLeft(Heaps_Retrieve(heap, ptr))Proof Obligation 89' (Unproved)LEFT' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 393'27((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 90' (Unproved)LEFT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 393'27pre_Heaps_Retrieve(heap, ptr)Proof Obligation 91' (Unproved)RIGHT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 397'13pre_Nodes_GetRight(Heaps_Retrieve(heap, ptr))Proof Obligation 92' (Unproved)RIGHT' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 397'28((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 93' (Unproved)RIGHT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 397'28pre_Heaps_Retrieve(heap, ptr)Proof Obligation 94' (Unproved)PARENT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 401'13pre_Nodes_GetParent(Heaps_Retrieve(heap, ptr))Proof Obligation 95' (Unproved)PARENT' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 401'29((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or(is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))Proof Obligation 96' (Unproved)PARENT' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 401'29pre_Heaps_Retrieve(heap, ptr)Proof Obligation 97' (Unproved)SList_Seq, node' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 458'22(forall heap'Heaps_Heap, list'SList_List &  ((not SList_IsEmpty(list)) =>    pre_Heaps_Retrieve(heap, list)))Proof Obligation 98' (Unproved)SList_Seq, data' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 459'22(forall heap'Heaps_Heap, list'SList_List &  ((not SList_IsEmpty(list)) =>    (let node'[Heaps_Data] = Heaps_Retrieve(heap, list) in      pre_Nodes_GetData(node))))Proof Obligation 99' (Unproved)SList_Seq, data' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 459'36(forall heap'Heaps_Heap, list'SList_List &  ((not SList_IsEmpty(list)) =>    (let node'[Heaps_Data] = Heaps_Retrieve(heap, list) in      ((is_(node, Nodes_BinaryTree)) or      (is_(node, Nodes_DoubleLink)) or      (is_(node, Nodes_SingleLink))))))Proof Obligation 100' (Unproved)SList_Seq, tail' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 460'22(forall heap'Heaps_Heap, list'SList_List &  ((not SList_IsEmpty(list)) =>    (let node'[Heaps_Data] = Heaps_Retrieve(heap, list) in      (let data'Nodes_Data = Nodes_GetData(node) in        pre_Nodes_GetNext(node)))))Proof Obligation 101' (Unproved)SList_Seq, tail' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 460'36(forall heap'Heaps_Heap, list'SList_List &  ((not SList_IsEmpty(list)) =>    (let node'[Heaps_Data] = Heaps_Retrieve(heap, list) in      (let data'Nodes_Data = Nodes_GetData(node) in        ((is_(node, Nodes_BinaryTree)) or        (is_(node, Nodes_DoubleLink)) or        (is_(node, Nodes_SingleLink)))))))Proof Obligation 102' (Unproved)SList_Lengthf' post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 468'1(forall heap'Heaps_Heap, list'SList_List &  post_SList_Lengthf(heap, list, (if (not SList_IsEmpty(list))  then let tail'Nodes_NodePtr = Nodes_GetNext(Heaps_Retrieve(heap, list)) in (1 + SList_Lengthf(heap, tail))  else 0)))Proof Obligation 103' (Unproved)SList_Lengthf, tail' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 471'22(forall heap'Heaps_Heap, list'SList_List &  ((not SList_IsEmpty(list)) =>    pre_Nodes_GetNext(Heaps_Retrieve(heap, list))))Proof Obligation 104' (Unproved)SList_Lengthf, tail' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 471'36(forall heap'Heaps_Heap, list'SList_List &  ((not SList_IsEmpty(list)) =>    ((is_(Heaps_Retrieve(heap, list), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, list), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, list), Nodes_SingleLink)))))Proof Obligation 105' (Unproved)SList_Lengthf, tail' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 471'36(forall heap'Heaps_Heap, list'SList_List &  ((not SList_IsEmpty(list)) =>    pre_Heaps_Retrieve(heap, list)))Proof Obligation 106' (Unproved)SList_PtrToNode' post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 481'1(forall heap'Heaps_Heap, list'SList_List, position'nat1 &  pre_SList_PtrToNode(heap, list, position) => post_SList_PtrToNode(heap, list, position, let tail'Nodes_NodePtr = Nodes_GetNext(Heaps_Retrieve(heap, list)) in (if (position > 1)  then SList_PtrToNode(heap, tail, (position - 1))  else list)))Proof Obligation 107' (Unproved)SList_PtrToNode, data' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 490'17(forall heap'Heaps_Heap, list'SList_List, position'nat1 &  ((position <= SList_Lengthf(heap, list)) => let RESULT'Nodes_NodePtr = let tail'Nodes_NodePtr = Nodes_GetNext(Heaps_Retrieve(heap, list)) in (if (position > 1)  then SList_PtrToNode(heap, tail, (position - 1))  else list) in     pre_Nodes_GetData(Heaps_Retrieve(heap, RESULT))))Proof Obligation 108' (Unproved)SList_PtrToNode, data' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 490'31(forall heap'Heaps_Heap, list'SList_List, position'nat1 &  ((position <= SList_Lengthf(heap, list)) => let RESULT'Nodes_NodePtr = let tail'Nodes_NodePtr = Nodes_GetNext(Heaps_Retrieve(heap, list)) in (if (position > 1)  then SList_PtrToNode(heap, tail, (position - 1))  else list) in     ((is_(Heaps_Retrieve(heap, RESULT), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, RESULT), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, RESULT), Nodes_SingleLink)))))Proof Obligation 109' (Unproved)SList_PtrToNode, data' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 490'31(forall heap'Heaps_Heap, list'SList_List, position'nat1 &  ((position <= SList_Lengthf(heap, list)) => let RESULT'Nodes_NodePtr = let tail'Nodes_NodePtr = Nodes_GetNext(Heaps_Retrieve(heap, list)) in (if (position > 1)  then SList_PtrToNode(heap, tail, (position - 1))  else list) in     pre_Heaps_Retrieve(heap, RESULT)))Proof Obligation 110' (Unproved)SList_PtrToNode' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 492'23(forall heap'Heaps_Heap, list'SList_List, position'nat1 &  ((position <= SList_Lengthf(heap, list)) => let RESULT'Nodes_NodePtr = let tail'Nodes_NodePtr = Nodes_GetNext(Heaps_Retrieve(heap, list)) in (if (position > 1)  then SList_PtrToNode(heap, tail, (position - 1))  else list) in     (let data'Nodes_Data = Nodes_GetData(Heaps_Retrieve(heap, RESULT)), listSeq'seq of (SList_Data) = SList_Seq(heap, list) in      position in set inds listSeq)))Proof Obligation 111' (Unproved)SList_PtrToNode, tail' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 484'17(forall heap'Heaps_Heap, list'SList_List, position'nat1 & (position <= SList_Lengthf(heap, list)) =>  pre_Nodes_GetNext(Heaps_Retrieve(heap, list)))Proof Obligation 112' (Unproved)SList_PtrToNode, tail' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 484'31(forall heap'Heaps_Heap, list'SList_List, position'nat1 & (position <= SList_Lengthf(heap, list)) =>  ((is_(Heaps_Retrieve(heap, list), Nodes_BinaryTree)) or  (is_(Heaps_Retrieve(heap, list), Nodes_DoubleLink)) or  (is_(Heaps_Retrieve(heap, list), Nodes_SingleLink))))Proof Obligation 113' (Unproved)SList_PtrToNode, tail' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 484'31(forall heap'Heaps_Heap, list'SList_List, position'nat1 & (position <= SList_Lengthf(heap, list)) =>  pre_Heaps_Retrieve(heap, list))Proof Obligation 114' (Unproved)SList_PtrToNode' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 486'16(forall heap'Heaps_Heap, list'SList_List, position'nat1 & (position <= SList_Lengthf(heap, list)) =>  (let tail'Nodes_NodePtr = Nodes_GetNext(Heaps_Retrieve(heap, list)) in    ((position > 1) =>      pre_SList_PtrToNode(heap, tail, (position - 1)))))Proof Obligation 115' (Unproved)SList_PtrToNode' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 486'53(forall heap'Heaps_Heap, list'SList_List, position'nat1 & (position <= SList_Lengthf(heap, list)) =>  (let tail'Nodes_NodePtr = Nodes_GetNext(Heaps_Retrieve(heap, list)) in    ((position > 1) =>      (position - 1) > 0)))Proof Obligation 116' (Unproved)SList_InsertAtBeginning' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 507'1(([data] ^ SList_Seq(heap~, list)) = SList_Seq(heap, RESULT))Proof Obligation 117' (Unproved)SList_InsertAfter' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 524'12(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  1 in set inds old)Proof Obligation 118' (Unproved)SList_InsertAfter' non-empty sequence obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 524'30(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  old <> [])Proof Obligation 119' (Unproved)SList_InsertAfter' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 516'1let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in ((([old(1)] ^ [data]) ^ (tl old)) = SList_Seq(heap, ptr))Proof Obligation 120' (Trivial by <forall x in set s & x in set s>)SList_Insert' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 541'14(let new'seq of (SList_Data) = SList_Seq(heap, RESULT) in  (forall i in set (inds new) & (i <> position) =>    i in set inds new))Proof Obligation 121' (Unproved)SList_Insert' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 542'10(let new'seq of (SList_Data) = SList_Seq(heap, RESULT) in  ((SList_Seq(heap~, list) = [new(i) | i in set (inds new) & (i <> position)]) =>    position in set inds new))Proof Obligation 122' (Unproved)SList_Insert' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 531'1let new'seq of (SList_Data) = SList_Seq(heap, RESULT) in ((SList_Seq(heap~, list) = [new(i) | i in set (inds new) & (i <> position)]) and ((new(position) = data) and ((Heaps_AmountUsed(heap~) + 1) = Heaps_AmountUsed(heap))))Proof Obligation 123' (Unproved)SList_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 537'16pre_SList_PtrToNode(heap, list, (position - 1))Proof Obligation 124' (Unproved)SList_Insert' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 537'53(position - 1) > 0Proof Obligation 125' (Unproved)SList_Append' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 549'1(((SList_Seq(heap~, list) ^ [data]) = SList_Seq(heap, RESULT)) and ((Heaps_AmountUsed(heap~) + 1) = Heaps_AmountUsed(heap)))Proof Obligation 126' (Unproved)SList_Append' while loop termination obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 555'11while (NEXT(ptr) <> NIL) do ...Proof Obligation 127' (Unproved)SList_Update' sequence modification obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 574'28dom {position |-> data} subset inds SList_Seq(heap~, list)Proof Obligation 128' (Unproved)SList_Update' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 567'1(((SList_Seq(heap~, list) ++ {position |-> data}) = SList_Seq(heap, RESULT)) and (Heaps_AmountUsed(heap~) = Heaps_AmountUsed(heap)))Proof Obligation 129' (Unproved)SList_Update, ptr' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 569'32pre_SList_PtrToNode(heap, list, position)Proof Obligation 130' (Unproved)SList_DeleteAtBeginning' non-empty sequence obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 588'9SList_Seq(heap~, list) <> []Proof Obligation 131' (Unproved)SList_DeleteAtBeginning' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 581'1((tl SList_Seq(heap~, list)) = SList_Seq(heap, RESULT))Proof Obligation 132' (Unproved)SList_DeleteAfter' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 602'7(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  1 in set inds old)Proof Obligation 133' (Unproved)SList_DeleteAfter' non-empty sequence obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 602'22(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  old <> [])Proof Obligation 134' (Unproved)SList_DeleteAfter' non-empty sequence obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 602'19(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  (tl old) <> [])Proof Obligation 135' (Unproved)SList_DeleteAfter' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 593'1let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in (([old(1)] ^ (tl (tl old))) = SList_Seq(heap, ptr))Proof Obligation 136' (Trivial by <forall x in set s & x in set s>)SList_Delete' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 616'7(let old'seq of (SList_Data) = SList_Seq(heap~, list) in  (forall i in set (inds old) & (i <> position) =>    i in set inds old))Proof Obligation 137' (Unproved)SList_Delete' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 607'1let old'seq of (SList_Data) = SList_Seq(heap~, list) in (([old(i) | i in set (inds old) & (i <> position)] = SList_Seq(heap, RESULT)) and (Heaps_AmountUsed(heap~) = (Heaps_AmountUsed(heap) + 1)))Proof Obligation 138' (Unproved)SList_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 612'21pre_SList_PtrToNode(heap, list, (position - 1))Proof Obligation 139' (Unproved)SList_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 612'58(position - 1) > 0Proof Obligation 140' (Unproved)SList_Traverse' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 636'25(let old'seq of (SList_Data) = SList_Seq(heap~, list) in  (forall i in set (inds old) &    pre_(traversal, old(i))))Proof Obligation 141' (Trivial by <forall x in set s & x in set s>)SList_Traverse' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 636'35(let old'seq of (SList_Data) = SList_Seq(heap~, list) in  (forall i in set (inds old) &    i in set inds old))Proof Obligation 142' (Unproved)SList_Traverse' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 625'1let old'seq of (SList_Data) = SList_Seq(heap~, list) in ((old <> []) => ([traversal(old(i)) | i in set (inds old)] = SList_Seq(heap, RESULT)))Proof Obligation 143' (Unproved)SList_Traverse' while loop termination obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 628'6while (ptr <> NIL) do ...Proof Obligation 144' (Unproved)SList_Traverse' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 629'25pre_(traversal, DATA(ptr))Proof Obligation 145' (Unproved)SList_Element' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 650'39pre_SList_PtrToNode(heap, list, position)Proof Obligation 146' (Unproved)DList_LastNode, next' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 694'17(forall heap'Heaps_Heap, list'DList_List &  pre_Nodes_GetNext(Heaps_Retrieve(heap, list)))Proof Obligation 147' (Unproved)DList_LastNode, next' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 694'31(forall heap'Heaps_Heap, list'DList_List &  ((is_(Heaps_Retrieve(heap, list), Nodes_BinaryTree)) or  (is_(Heaps_Retrieve(heap, list), Nodes_DoubleLink)) or  (is_(Heaps_Retrieve(heap, list), Nodes_SingleLink))))Proof Obligation 148' (Unproved)DList_LastNode, next' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 694'31(forall heap'Heaps_Heap, list'DList_List &  pre_Heaps_Retrieve(heap, list))Proof Obligation 149' (Unproved)DList_Backward, prev' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 714'22(forall heap'Heaps_Heap, list'DList_List &  ((list <> NIL) =>    pre_Nodes_GetPrev(Heaps_Retrieve(heap, list))))Proof Obligation 150' (Unproved)DList_Backward, prev' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 714'36(forall heap'Heaps_Heap, list'DList_List &  ((list <> NIL) =>    ((is_(Heaps_Retrieve(heap, list), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, list), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, list), Nodes_SingleLink)))))Proof Obligation 151' (Unproved)DList_Backward, prev' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 714'36(forall heap'Heaps_Heap, list'DList_List &  ((list <> NIL) =>    pre_Heaps_Retrieve(heap, list)))Proof Obligation 152' (Unproved)DList_Backward, data' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 715'22(forall heap'Heaps_Heap, list'DList_List &  ((list <> NIL) =>    (let prev'Nodes_NodePtr = Nodes_GetPrev(Heaps_Retrieve(heap, list)) in      pre_Nodes_GetData(Heaps_Retrieve(heap, list)))))Proof Obligation 153' (Unproved)DList_Backward, data' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 715'36(forall heap'Heaps_Heap, list'DList_List &  ((list <> NIL) =>    (let prev'Nodes_NodePtr = Nodes_GetPrev(Heaps_Retrieve(heap, list)) in      ((is_(Heaps_Retrieve(heap, list), Nodes_BinaryTree)) or      (is_(Heaps_Retrieve(heap, list), Nodes_DoubleLink)) or      (is_(Heaps_Retrieve(heap, list), Nodes_SingleLink))))))Proof Obligation 154' (Unproved)DList_Backward, data' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 715'36(forall heap'Heaps_Heap, list'DList_List &  ((list <> NIL) =>    (let prev'Nodes_NodePtr = Nodes_GetPrev(Heaps_Retrieve(heap, list)) in      pre_Heaps_Retrieve(heap, list))))Proof Obligation 155' (Unproved)DList_InsertAtBeginning' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 739'1(([data] ^ SList_Seq(heap~, list)) = SList_Seq(heap, RESULT))Proof Obligation 156' (Unproved)DList_InsertAfter' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 757'12(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  1 in set inds old)Proof Obligation 157' (Unproved)DList_InsertAfter' non-empty sequence obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 757'30(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  old <> [])Proof Obligation 158' (Unproved)DList_InsertAfter' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 747'1let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in ((([old(1)] ^ [data]) ^ (tl old)) = SList_Seq(heap, ptr))Proof Obligation 159' (Unproved)DList_Insert' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 771'19(DList_IsList(heap, RESULT) =>  (let new'seq of (SList_Data) = SList_Seq(heap, RESULT) in    (forall i in set (inds new) & (i <> position) =>      i in set inds new)))Proof Obligation 160' (Unproved)DList_Insert' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 772'15(DList_IsList(heap, RESULT) =>  (let new'seq of (SList_Data) = SList_Seq(heap, RESULT) in    ((SList_Seq(heap~, list) = [new(i) | i in set (inds new) & (i <> position)]) =>      position in set inds new)))Proof Obligation 161' (Unproved)DList_Insert' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 759'1(DList_IsList(heap, RESULT) and let new'seq of (SList_Data) = SList_Seq(heap, RESULT) in ((SList_Seq(heap~, list) = [new(i) | i in set (inds new) & (i <> position)]) and (new(position) = data)))Proof Obligation 162' (Unproved)DList_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 765'21pre_SList_PtrToNode(heap, list, (position - 1))Proof Obligation 163' (Unproved)DList_Insert' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 765'58(position - 1) > 0Proof Obligation 164' (Unproved)DList_DeleteAtBeginning' non-empty sequence obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 782'9SList_Seq(heap~, list) <> []Proof Obligation 165' (Unproved)DList_DeleteAtBeginning' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 774'1((tl SList_Seq(heap~, list)) = SList_Seq(heap, RESULT))Proof Obligation 166' (Unproved)DList_DeleteAfter' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 795'7(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  1 in set inds old)Proof Obligation 167' (Unproved)DList_DeleteAfter' non-empty sequence obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 795'22(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  old <> [])Proof Obligation 168' (Unproved)DList_DeleteAfter' non-empty sequence obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 795'19(let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in  (tl old) <> [])Proof Obligation 169' (Unproved)DList_DeleteAfter' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 784'1let old'seq of (SList_Data) = SList_Seq(heap~, ptr) in (([old(1)] ^ (tl (tl old))) = SList_Seq(heap, ptr))Proof Obligation 170' (Unproved)DList_Delete' sequence apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 807'12(DList_IsList(heap, RESULT) =>  (let old'seq of (SList_Data) = SList_Seq(heap~, list) in    (forall i in set (inds old) & (i <> position) =>      i in set inds old)))Proof Obligation 171' (Unproved)DList_Delete' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 797'1(DList_IsList(heap, RESULT) and let old'seq of (SList_Data) = SList_Seq(heap~, list) in (([old(i) | i in set (inds old) & (i <> position)] = SList_Seq(heap, RESULT)) and (Heaps_AmountUsed(heap~) = (Heaps_AmountUsed(heap) + 1))))Proof Obligation 172' (Unproved)DList_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 802'16pre_SList_PtrToNode(heap, list, (position - 1))Proof Obligation 173' (Unproved)DList_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 802'53(position - 1) > 0Proof Obligation 174' (Unproved)DList_Append' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 811'1(((SList_Seq(heap~, list) ^ [data]) = SList_Seq(heap, RESULT)) and (((Heaps_AmountUsed(heap~) + 1) = Heaps_AmountUsed(heap)) and DList_IsList(heap, RESULT)))Proof Obligation 175' (Unproved)DList_Append' while loop termination obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 817'11while (NEXT(ptr) <> NIL) do ...Proof Obligation 176' (Unproved)Queues_Dequeue' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 867'1is_(RESULT, (Queues_Queue * Queues_Data))Proof Obligation 177' (Unproved)Stacks_Pop' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 911'1is_(RESULT, (Stacks_Stack * Stacks_Data))Proof Obligation 178' (Unproved)STrees_Tree' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1009'15(forall tree'set of (STrees_Node) &  (forall node in set tree &    pre_STrees_IsRoot(tree, node)))Proof Obligation 179' (Unproved)STrees_Tree' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1009'45(forall tree'set of (STrees_Node) &  (forall node in set tree &    pre_STrees_IsChild(tree, node)))Proof Obligation 180' (Unproved)STrees_Tree' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1012'34(forall tree'set of (STrees_Node) &  ((forall node in set tree & ((not STrees_IsRoot(tree, node)) <=> (STrees_IsChild(tree, node) and STrees_IsUnique(tree, node)))) =>    (forall node in set tree &      pre_STrees_IsRoot(tree, node))))Proof Obligation 181' (Unproved)STrees_Info, r' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1023'44(forall mk_STrees_Info(t, c)'STrees_Info &  (((c = nil) <=> (t = {})) =>    ((c in set t) =>      pre_STrees_Root(t))))Proof Obligation 182' (Unproved)STrees_MkTree' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1043'1(forall tree'set of (STrees_Node) & inv_STrees_Tree(tree) =>  inv_STrees_Tree(tree) and (is_(tree, set of (STrees_Node))))Proof Obligation 183' (Unproved)STrees_MkInfo' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1050'21(forall tree'STrees_Tree, current'STrees_Node &  inv_STrees_Info(mk_STrees_Info(tree, current)))Proof Obligation 184' (Unproved)STrees_MkInfo' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1049'6(forall tree'STrees_Tree, current'STrees_Node & inv_STrees_Info(mk_STrees_Info(tree, current)) =>  inv_STrees_Info(mk_STrees_Info(tree, current)))Proof Obligation 185' (Unproved)STrees_Init' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1057'33inv_STrees_Tree({}) and (and is_({}, set of (STrees_Node)))Proof Obligation 186' (Unproved)STrees_Init' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1057'18inv_STrees_Info(mk_STrees_Info({}, nil)) and (inv_STrees_Tree({}) and (and is_({}, set of (STrees_Node))))Proof Obligation 187' (Unproved)STrees_IsRoot' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1065'10(forall tree'set of (STrees_Node), mk_STrees_Node(dr, pr)'STrees_Node & (mk_STrees_Node(dr, pr) in set tree) =>  pre_STrees_IsChild(tree, mk_STrees_Node(dr, pr)))Proof Obligation 188' (Unproved)STrees_IsParent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1074'33(forall tree'STrees_Tree, node'STrees_Node & (node in set tree) =>  (forall child in set tree &    pre_STrees_IsParentOf(tree, node, child)))Proof Obligation 189' (Unproved)STrees_IsChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1079'35(forall tree'set of (STrees_Node), node'STrees_Node & (node in set tree) =>  (forall parent in set tree &    pre_STrees_IsParentOf(tree, parent, node)))Proof Obligation 190' (Unproved)STrees_IsChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1080'40(forall tree'set of (STrees_Node), node'STrees_Node & (node in set tree) =>  ((exists [parent in set tree] & STrees_IsParentOf(tree, parent, node)) =>    (forall parent in set tree &      pre_STrees_IsParentOf(tree, parent, node))))Proof Obligation 191' (Unproved)STrees_IsParentOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1094'6(forall tree'set of (STrees_Node), node1'STrees_Node, node2'STrees_Node & ((node1 in set tree) and (node2 in set tree)) =>  pre_STrees_IsRightChildOf(tree, node2, node1))Proof Obligation 192' (Unproved)STrees_IsParentOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1095'14(forall tree'set of (STrees_Node), node1'STrees_Node, node2'STrees_Node & ((node1 in set tree) and (node2 in set tree)) =>  (not STrees_IsRightChildOf(tree, node2, node1) =>    pre_STrees_IsLeftChildOf(tree, node2, node1)))Proof Obligation 193' (Unproved)STrees_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1126'35(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction &  (((direction = <ToRoot>) => (tree = {})) =>    pre_STrees_HasLeftChild(tree, current)))Proof Obligation 194' (Unproved)STrees_Insert' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1126'61(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction &  (((direction = <ToRoot>) => (tree = {})) =>    is_(current, STrees_Node)))Proof Obligation 195' (Unproved)STrees_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1127'36(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction &  (((direction = <ToRoot>) => (tree = {})) =>    (((direction = <ToLeft>) => (not STrees_HasLeftChild(tree, current))) =>      pre_STrees_HasRightChild(tree, current))))Proof Obligation 196' (Unproved)STrees_Insert' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1127'63(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction &  (((direction = <ToRoot>) => (tree = {})) =>    (((direction = <ToLeft>) => (not STrees_HasLeftChild(tree, current))) =>      is_(current, STrees_Node))))Proof Obligation 197' (Unproved)STrees_Insert' post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1116'1(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction &  pre_STrees_Insert(mk_STrees_Info(tree, current), data, direction) => post_STrees_Insert(mk_STrees_Info(tree, current), data, direction, (cases mk_(current, direction) '  case mk_(nil, <ToRoot>) -> STrees_InsertRoot(data),  case mk_(-, <ToLeft>) -> STrees_InsertLeft(tree, current, data),  case mk_(-, <ToRight>) -> STrees_InsertRight(tree, current, data)  end)))Proof Obligation 198' (Unproved)STrees_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1120'34(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction & (((direction = <ToRoot>) => (tree = {})) and (((direction = <ToLeft>) => (not STrees_HasLeftChild(tree, current))) and ((direction = <ToRight>) => (not STrees_HasRightChild(tree, current))))) =>  (not mk_(nil, <ToRoot>) = mk_(current, direction) =>    (mk_(-, <ToLeft>) = mk_(current, direction) =>       pre_STrees_InsertLeft(tree, current, data))))Proof Obligation 199' (Unproved)STrees_Insert' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1120'58(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction & (((direction = <ToRoot>) => (tree = {})) and (((direction = <ToLeft>) => (not STrees_HasLeftChild(tree, current))) and ((direction = <ToRight>) => (not STrees_HasRightChild(tree, current))))) =>  (not mk_(nil, <ToRoot>) = mk_(current, direction) =>    (mk_(-, <ToLeft>) = mk_(current, direction) =>       is_(current, STrees_Node))))Proof Obligation 200' (Unproved)STrees_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1122'34(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction & (((direction = <ToRoot>) => (tree = {})) and (((direction = <ToLeft>) => (not STrees_HasLeftChild(tree, current))) and ((direction = <ToRight>) => (not STrees_HasRightChild(tree, current))))) =>  (not mk_(nil, <ToRoot>) = mk_(current, direction) =>    (not mk_(-, <ToLeft>) = mk_(current, direction) =>      (mk_(-, <ToRight>) = mk_(current, direction) =>         pre_STrees_InsertRight(tree, current, data)))))Proof Obligation 201' (Unproved)STrees_Insert' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1122'59(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction & (((direction = <ToRoot>) => (tree = {})) and (((direction = <ToLeft>) => (not STrees_HasLeftChild(tree, current))) and ((direction = <ToRight>) => (not STrees_HasRightChild(tree, current))))) =>  (not mk_(nil, <ToRoot>) = mk_(current, direction) =>    (not mk_(-, <ToLeft>) = mk_(current, direction) =>      (mk_(-, <ToRight>) = mk_(current, direction) =>         is_(current, STrees_Node)))))Proof Obligation 202' (Unproved)STrees_Insert' cases exhaustive obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1118'6(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data, direction'STrees_Direction & (((direction = <ToRoot>) => (tree = {})) and (((direction = <ToLeft>) => (not STrees_HasLeftChild(tree, current))) and ((direction = <ToRight>) => (not STrees_HasRightChild(tree, current))))) =>  mk_(current, direction) = mk_(nil, <ToRoot>) or mk_(current, direction) = mk_(-, <ToLeft>) or mk_(current, direction) = mk_(-, <ToRight>))Proof Obligation 203' (Unproved)STrees_InsertRoot' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1137'26(forall data'STrees_Data &  (let root'STrees_Node = mk_STrees_Node(data, 1) in    inv_STrees_Tree({root}) and (    and is_({root}, set of (STrees_Node)))))Proof Obligation 204' (Unproved)STrees_InsertRoot' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1137'11(forall data'STrees_Data &  (let root'STrees_Node = mk_STrees_Node(data, 1) in    inv_STrees_Info(mk_STrees_Info({root}, root)) and (inv_STrees_Tree({root}) and (    and is_({root}, set of (STrees_Node))))))Proof Obligation 205' (Unproved)STrees_InsertLeft' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1144'9(forall tree'STrees_Tree, current'STrees_Node, data'STrees_Data &  pre_STrees_HasLeftChild(tree, current))Proof Obligation 206' (Unproved)STrees_InsertLeft' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1143'31(forall tree'STrees_Tree, current'STrees_Node, data'STrees_Data & (not STrees_HasLeftChild(tree, current)) =>  (let mk_STrees_Node(-, position)'STrees_Node = current in    (let new'STrees_Node = mk_STrees_Node(data, (2 * position)) in      inv_STrees_Tree((tree union {new})) and (is_((tree union {new}), set of (STrees_Node))))))Proof Obligation 207' (Unproved)STrees_InsertLeft' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1143'11(forall tree'STrees_Tree, current'STrees_Node, data'STrees_Data & (not STrees_HasLeftChild(tree, current)) =>  (let mk_STrees_Node(-, position)'STrees_Node = current in    (let new'STrees_Node = mk_STrees_Node(data, (2 * position)) in      inv_STrees_Info(mk_STrees_Info((tree union {new}), new)) and (inv_STrees_Tree((tree union {new})) and (is_((tree union {new}), set of (STrees_Node)))))))Proof Obligation 208' (Unproved)STrees_InsertRight' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1151'9(forall tree'STrees_Tree, current'STrees_Node, data'STrees_Data &  pre_STrees_HasRightChild(tree, current))Proof Obligation 209' (Unproved)STrees_InsertRight' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1150'31(forall tree'STrees_Tree, current'STrees_Node, data'STrees_Data & (not STrees_HasRightChild(tree, current)) =>  (let mk_STrees_Node(-, position)'STrees_Node = current in    (let new'STrees_Node = mk_STrees_Node(data, ((2 * position) + 1)) in      inv_STrees_Tree((tree union {new})) and (is_((tree union {new}), set of (STrees_Node))))))Proof Obligation 210' (Unproved)STrees_InsertRight' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1150'11(forall tree'STrees_Tree, current'STrees_Node, data'STrees_Data & (not STrees_HasRightChild(tree, current)) =>  (let mk_STrees_Node(-, position)'STrees_Node = current in    (let new'STrees_Node = mk_STrees_Node(data, ((2 * position) + 1)) in      inv_STrees_Info(mk_STrees_Info((tree union {new}), new)) and (inv_STrees_Tree((tree union {new})) and (is_((tree union {new}), set of (STrees_Node)))))))Proof Obligation 211' (Unproved)STrees_Traverse, newtree' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1158'46(forall treeinfo'STrees_Info, traversal'(STrees_Data -> STrees_Data) &  (let mk_STrees_Info(tree, current)'STrees_Info = treeinfo in    ((current <> nil) =>      (let mk_STrees_Node(data, position)'[STrees_Node] = current in        (forall mk_STrees_Node(data, position) in set tree &          pre_(traversal, data))))))Proof Obligation 212' (Unproved)STrees_Traverse' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1161'41(forall treeinfo'STrees_Info, traversal'(STrees_Data -> STrees_Data) &  (let mk_STrees_Info(tree, current)'STrees_Info = treeinfo in    ((current <> nil) =>      (let mk_STrees_Node(data, position)'[STrees_Node] = current in        (let newtree'set of (STrees_Node) = {mk_STrees_Node(traversal(data), position) | [mk_STrees_Node(data, position) in set tree]} in          pre_(traversal, data))))))Proof Obligation 213' (Unproved)STrees_Traverse' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1160'36(forall treeinfo'STrees_Info, traversal'(STrees_Data -> STrees_Data) &  (let mk_STrees_Info(tree, current)'STrees_Info = treeinfo in    ((current <> nil) =>      (let mk_STrees_Node(data, position)'[STrees_Node] = current in        (let newtree'set of (STrees_Node) = {mk_STrees_Node(traversal(data), position) | [mk_STrees_Node(data, position) in set tree]} in          inv_STrees_Tree(newtree) and (is_(newtree, set of (STrees_Node))))))))Proof Obligation 214' (Unproved)STrees_Traverse' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1160'21(forall treeinfo'STrees_Info, traversal'(STrees_Data -> STrees_Data) &  (let mk_STrees_Info(tree, current)'STrees_Info = treeinfo in    ((current <> nil) =>      (let mk_STrees_Node(data, position)'[STrees_Node] = current in        (let newtree'set of (STrees_Node) = {mk_STrees_Node(traversal(data), position) | [mk_STrees_Node(data, position) in set tree]} in          inv_STrees_Info(mk_STrees_Info(newtree, mk_STrees_Node(traversal(data), position))) and (inv_STrees_Tree(newtree) and (is_(newtree, set of (STrees_Node)))))))))Proof Obligation 215' (Unproved)STrees_MoveInDir' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1175'28(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction &  inv_STrees_Info(mk_STrees_Info(tree, current)))Proof Obligation 216' (Unproved)STrees_MoveInDir' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1171'45(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  (<ToRoot> = direction =>     pre_STrees_Root(tree)))Proof Obligation 217' (Unproved)STrees_MoveInDir' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1171'24(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  (<ToRoot> = direction =>     inv_STrees_Info(mk_STrees_Info(tree, STrees_Root(tree)))))Proof Obligation 218' (Unproved)STrees_MoveInDir' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1172'45(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  (not <ToRoot> = direction =>    (<ToLeft> = direction =>       pre_STrees_LeftChild(tree, current))))Proof Obligation 219' (Unproved)STrees_MoveInDir' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1172'68(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  (not <ToRoot> = direction =>    (<ToLeft> = direction =>       is_(current, STrees_Node))))Proof Obligation 220' (Unproved)STrees_MoveInDir' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1172'24(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  (not <ToRoot> = direction =>    (<ToLeft> = direction =>       inv_STrees_Info(mk_STrees_Info(tree, STrees_LeftChild(tree, current))))))Proof Obligation 221' (Unproved)STrees_MoveInDir' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1173'46(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  (not <ToRoot> = direction =>    (not <ToLeft> = direction =>      (<ToRight> = direction =>         pre_STrees_RightChild(tree, current)))))Proof Obligation 222' (Unproved)STrees_MoveInDir' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1173'70(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  (not <ToRoot> = direction =>    (not <ToLeft> = direction =>      (<ToRight> = direction =>         is_(current, STrees_Node)))))Proof Obligation 223' (Unproved)STrees_MoveInDir' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1173'25(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  (not <ToRoot> = direction =>    (not <ToLeft> = direction =>      (<ToRight> = direction =>         inv_STrees_Info(mk_STrees_Info(tree, STrees_RightChild(tree, current)))))))Proof Obligation 224' (Unproved)STrees_MoveInDir' cases exhaustive obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1170'6(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction & STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) =>  direction = <ToRoot> or direction = <ToLeft> or direction = <ToRight>)Proof Obligation 225' (Unproved)STrees_MoveToNode' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1184'23(forall mk_STrees_Info(tree, current)'STrees_Info, position'nat1 &  inv_STrees_Info(mk_STrees_Info(tree, current)))Proof Obligation 226' (Unproved)STrees_MoveToNode' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1183'27(forall mk_STrees_Info(tree, current)'STrees_Info, position'nat1 & STrees_ExistsNode(mk_STrees_Info(tree, current), position) =>  pre_STrees_GetNode(tree, position))Proof Obligation 227' (Unproved)STrees_MoveToNode' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1183'6(forall mk_STrees_Info(tree, current)'STrees_Info, position'nat1 & STrees_ExistsNode(mk_STrees_Info(tree, current), position) =>  inv_STrees_Info(mk_STrees_Info(tree, STrees_GetNode(tree, position))))Proof Obligation 228' (Unproved)STrees_MoveToParent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1193'9(forall mk_STrees_Info(tree, current)'STrees_Info &  pre_STrees_IsRoot(tree, current))Proof Obligation 229' (Unproved)STrees_MoveToParent' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1193'29(forall mk_STrees_Info(tree, current)'STrees_Info &  is_(current, STrees_Node))Proof Obligation 230' (Unproved)STrees_MoveToParent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1192'27(forall mk_STrees_Info(tree, current)'STrees_Info & (not STrees_IsRoot(tree, current)) =>  pre_STrees_Parent(tree, current))Proof Obligation 231' (Unproved)STrees_MoveToParent' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1192'47(forall mk_STrees_Info(tree, current)'STrees_Info & (not STrees_IsRoot(tree, current)) =>  is_(current, STrees_Node))Proof Obligation 232' (Unproved)STrees_MoveToParent' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1192'6(forall mk_STrees_Info(tree, current)'STrees_Info & (not STrees_IsRoot(tree, current)) =>  inv_STrees_Info(mk_STrees_Info(tree, STrees_Parent(tree, current))))Proof Obligation 233' (Unproved)STrees_MoveToAnscestor' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1202'8(forall treeinfo'STrees_Info, pathlength'nat1 & pre_STrees_MoveToParent(treeinfo) =>  ((pathlength > 1) =>    pre_STrees_MoveToAnscestor(STrees_MoveToParent(treeinfo), (pathlength - 1))))Proof Obligation 234' (Unproved)STrees_MoveToAnscestor' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1202'73(forall treeinfo'STrees_Info, pathlength'nat1 & pre_STrees_MoveToParent(treeinfo) =>  ((pathlength > 1) =>    (pathlength - 1) > 0))Proof Obligation 235' (Unproved)STrees_MoveToAnscestor' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1202'31(forall treeinfo'STrees_Info, pathlength'nat1 & pre_STrees_MoveToParent(treeinfo) =>  ((pathlength > 1) =>    pre_STrees_MoveToParent(treeinfo)))Proof Obligation 236' (Unproved)STrees_MoveToAnscestor' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1203'8(forall treeinfo'STrees_Info, pathlength'nat1 & pre_STrees_MoveToParent(treeinfo) =>  (not (pathlength > 1) =>    pre_STrees_MoveToParent(treeinfo)))Proof Obligation 237' (Unproved)STrees_Root' unique existence binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1213'3(forall tree'STrees_Tree & (tree <> {}) =>  exists1 root in set tree & STrees_IsRoot(tree, root))Proof Obligation 238' (Unproved)STrees_Root' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1213'27(forall tree'STrees_Tree & (tree <> {}) =>  (forall root in set tree &    pre_STrees_IsRoot(tree, root)))Proof Obligation 239' (Unproved)STrees_Parent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1220'30(forall tree'STrees_Tree, node'STrees_Node &  ((node in set tree) =>    pre_STrees_IsRoot(tree, node)))Proof Obligation 240' (Unproved)STrees_Parent' unique existence binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1218'3(forall tree'STrees_Tree, node'STrees_Node & ((node in set tree) and (not STrees_IsRoot(tree, node))) =>  exists1 parent in set tree & STrees_IsParentOf(tree, parent, node))Proof Obligation 241' (Unproved)STrees_Parent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1219'10(forall tree'STrees_Tree, node'STrees_Node & ((node in set tree) and (not STrees_IsRoot(tree, node))) =>  (forall parent in set tree &    pre_STrees_IsParentOf(tree, parent, node)))Proof Obligation 242' (Unproved)STrees_LeftChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1226'28(forall tree'STrees_Tree, parent'STrees_Node &  ((parent in set tree) =>    pre_STrees_HasLeftChild(tree, parent)))Proof Obligation 243' (Unproved)STrees_LeftChild' unique existence binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1224'3(forall tree'STrees_Tree, parent'STrees_Node & ((parent in set tree) and STrees_HasLeftChild(tree, parent)) =>  exists1 leftchild in set tree & STrees_IsLeftChildOf(tree, leftchild, parent))Proof Obligation 244' (Unproved)STrees_LeftChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1225'8(forall tree'STrees_Tree, parent'STrees_Node & ((parent in set tree) and STrees_HasLeftChild(tree, parent)) =>  (forall leftchild in set tree &    pre_STrees_IsLeftChildOf(tree, leftchild, parent)))Proof Obligation 245' (Unproved)STrees_RightChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1232'28(forall tree'STrees_Tree, parent'STrees_Node &  ((parent in set tree) =>    pre_STrees_HasRightChild(tree, parent)))Proof Obligation 246' (Unproved)STrees_RightChild' unique existence binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1230'3(forall tree'STrees_Tree, parent'STrees_Node & ((parent in set tree) and STrees_HasRightChild(tree, parent)) =>  exists1 rightchild in set tree & STrees_IsRightChildOf(tree, rightchild, parent))Proof Obligation 247' (Unproved)STrees_RightChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1231'8(forall tree'STrees_Tree, parent'STrees_Node & ((parent in set tree) and STrees_HasRightChild(tree, parent)) =>  (forall rightchild in set tree &    pre_STrees_IsRightChildOf(tree, rightchild, parent)))Proof Obligation 248' (Unproved)STrees_GetNode' unique existence binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1236'3(forall tree'STrees_Tree, position'nat1 & (exists [node in set tree] & ((node.position) = position)) =>  exists1 node in set tree & ((node.position) = position))Proof Obligation 249' (Unproved)STrees_GetData' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1247'23(forall mk_STrees_Info(tree, current)'STrees_Info, position'nat1 &  inv_STrees_Info(mk_STrees_Info(tree, current)))Proof Obligation 250' (Unproved)STrees_GetData, data' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1245'36(forall mk_STrees_Info(tree, current)'STrees_Info, position'nat1 & STrees_ExistsNode(mk_STrees_Info(tree, current), position) =>  pre_STrees_GetNode(tree, position))Proof Obligation 251' (Unproved)STrees_StoreCurrentData' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1258'43(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data & (current <> nil) =>  (let mk_STrees_Node(-, position)'[STrees_Node] = current in    (let newcurrent'STrees_Node = mk_STrees_Node(data, position) in      inv_STrees_Tree(((tree \ {current}) union {newcurrent})) and (is_(((tree \ {current}) union {newcurrent}), set of (STrees_Node))))))Proof Obligation 252' (Unproved)STrees_StoreCurrentData' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1258'11(forall mk_STrees_Info(tree, current)'STrees_Info, data'STrees_Data & (current <> nil) =>  (let mk_STrees_Node(-, position)'[STrees_Node] = current in    (let newcurrent'STrees_Node = mk_STrees_Node(data, position) in      inv_STrees_Info(mk_STrees_Info(((tree \ {current}) union {newcurrent}), newcurrent)) and (inv_STrees_Tree(((tree \ {current}) union {newcurrent})) and (is_(((tree \ {current}) union {newcurrent}), set of (STrees_Node)))))))Proof Obligation 253' (Unproved)STrees_GetCurrentNode' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1280'1(forall mk_STrees_Info(-, current)'STrees_Info &  is_(current, STrees_Node))Proof Obligation 254' (Unproved)STrees_SetCurrentNode' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1285'6(forall mk_STrees_Info(tree, -)'STrees_Info, newcurrent'STrees_Node & (newcurrent in set tree) =>  inv_STrees_Info(mk_STrees_Info(tree, newcurrent)))Proof Obligation 255' (Unproved)STrees_HasLeftChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1295'13(forall tree'STrees_Tree, parent'STrees_Node & (parent in set tree) =>  (forall child in set tree &    pre_STrees_IsLeftChildOf(tree, child, parent)))Proof Obligation 256' (Unproved)STrees_HasRightChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1302'13(forall tree'STrees_Tree, parent'STrees_Node & (parent in set tree) =>  (forall child in set tree &    pre_STrees_IsRightChildOf(tree, child, parent)))Proof Obligation 257' (Unproved)STrees_InOrderPredecessor' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1319'26(forall tree'STrees_Tree, node'STrees_Node &  ((node in set tree) =>    pre_STrees_HasLeftChild(tree, node)))Proof Obligation 258' (Unproved)STrees_InOrderPredecessor, leftchild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1311'22(forall tree'STrees_Tree, node'STrees_Node & ((node in set tree) and STrees_HasLeftChild(tree, node)) =>  pre_STrees_LeftChild(tree, node))Proof Obligation 259' (Unproved)STrees_InOrderPredecessor, left' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1312'17(forall tree'STrees_Tree, node'STrees_Node & ((node in set tree) and STrees_HasLeftChild(tree, node)) =>  (let leftchild'STrees_Node = STrees_LeftChild(tree, node) in    pre_STrees_Subtree(tree, leftchild)))Proof Obligation 260' (Unproved)STrees_InOrderPredecessor' unique existence binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1317'11(forall tree'STrees_Tree, node'STrees_Node & ((node in set tree) and STrees_HasLeftChild(tree, node)) =>  (let leftchild'STrees_Node = STrees_LeftChild(tree, node) in    (let left'STrees_Tree = STrees_Subtree(tree, leftchild) in      (let rightpath'set of (STrees_Node) = {n | [n in set left] & (exists [p in set {0, ... ,(card left)}] & ((n.position) = ((((leftchild.position) + 1) * (2 ** p)) - 1)))} in        exists1 pred in set rightpath & (forall n in set rightpath & ((n.position) <= (pred.position)))))))Proof Obligation 261' (Unproved)STrees_Delete' post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1325'1(forall mk_STrees_Info(tree, current)'STrees_Info &  pre_STrees_Delete(mk_STrees_Info(tree, current)) => post_STrees_Delete(mk_STrees_Info(tree, current), let old'STrees_Tree = STrees_Subtree(tree, current) in (if (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current))  then let leftchild'STrees_Node = STrees_LeftChild(tree, current), rightchild'STrees_Node = STrees_RightChild(tree, current), left'STrees_Tree = STrees_Subtree(old, leftchild), mk_STrees_Node(-, position)'STrees_Node = STrees_InOrderPredecessor(old, current), newright'STrees_Tree = STrees_MoveSubtree(old, rightchild, ((2 * position) + 1)), newleft'STrees_Tree = (left union newright), new'STrees_Tree = STrees_MoveSubtree(newleft, STrees_Root(newleft), (current.position)) in mk_STrees_Info(((tree \ old) union new), STrees_Root(new))  elseif STrees_HasLeftChild(tree, current)  then let leftchild'STrees_Node = STrees_LeftChild(tree, current), new'STrees_Tree = STrees_MoveSubtree(old, leftchild, (current.position)) in mk_STrees_Info(((tree \ old) union new), STrees_Root(new))  elseif STrees_HasRightChild(tree, current)  then let rightchild'STrees_Node = STrees_RightChild(tree, current), new'STrees_Tree = STrees_MoveSubtree(old, rightchild, (current.position)) in mk_STrees_Info(((tree \ old) union new), STrees_Root(new))  else mk_STrees_Info((tree \ {current}), STrees_Parent(tree, current)))))Proof Obligation 262' (Unproved)STrees_Delete, old' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1327'13(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  pre_STrees_Subtree(tree, current))Proof Obligation 263' (Unproved)STrees_Delete, old' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1327'34(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  is_(current, STrees_Node))Proof Obligation 264' (Unproved)STrees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1329'7(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    pre_STrees_HasRightChild(tree, current)))Proof Obligation 265' (Unproved)STrees_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1329'34(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    is_(current, STrees_Node)))Proof Obligation 266' (Unproved)STrees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1330'7(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (STrees_HasRightChild(tree, current) =>      pre_STrees_HasLeftChild(tree, current))))Proof Obligation 267' (Unproved)STrees_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1330'33(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (STrees_HasRightChild(tree, current) =>      is_(current, STrees_Node))))Proof Obligation 268' (Unproved)STrees_Delete, leftchild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1331'25(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      pre_STrees_LeftChild(tree, current))))Proof Obligation 269' (Unproved)STrees_Delete, leftchild' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1331'48(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      is_(current, STrees_Node))))Proof Obligation 270' (Unproved)STrees_Delete, rightchild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1332'26(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      pre_STrees_RightChild(tree, current))))Proof Obligation 271' (Unproved)STrees_Delete, rightchild' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1332'50(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      is_(current, STrees_Node))))Proof Obligation 272' (Unproved)STrees_Delete, left' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1333'20(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      pre_STrees_Subtree(old, leftchild))))Proof Obligation 273' (Unproved)STrees_Delete, position' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1335'17(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      pre_STrees_InOrderPredecessor(old, current))))Proof Obligation 274' (Unproved)STrees_Delete, position' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1335'48(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      is_(current, STrees_Node))))Proof Obligation 275' (Unproved)STrees_Delete, newright' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1336'24(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      pre_STrees_MoveSubtree(old, rightchild, ((2 * position) + 1)))))Proof Obligation 276' (Unproved)STrees_Delete, new' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1339'19(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      pre_STrees_MoveSubtree(newleft, STrees_Root(newleft), (current.position)))))Proof Obligation 277' (Unproved)STrees_Delete, new' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1339'47(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      pre_STrees_Root(newleft))))Proof Obligation 278' (Unproved)STrees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1342'50(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (let leftchild'STrees_Node = STrees_LeftChild(tree, current), rightchild'STrees_Node = STrees_RightChild(tree, current), left'STrees_Tree = STrees_Subtree(old, leftchild), mk_STrees_Node(-, position)'STrees_Node = STrees_InOrderPredecessor(old, current), newright'STrees_Tree = STrees_MoveSubtree(old, rightchild, ((2 * position) + 1)), newleft'STrees_Tree = (left union newright), new'STrees_Tree = STrees_MoveSubtree(newleft, STrees_Root(newleft), (current.position)) in        pre_STrees_Root(new)))))Proof Obligation 279' (Unproved)STrees_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1342'11(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    ((STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (let leftchild'STrees_Node = STrees_LeftChild(tree, current), rightchild'STrees_Node = STrees_RightChild(tree, current), left'STrees_Tree = STrees_Subtree(old, leftchild), mk_STrees_Node(-, position)'STrees_Node = STrees_InOrderPredecessor(old, current), newright'STrees_Tree = STrees_MoveSubtree(old, rightchild, ((2 * position) + 1)), newleft'STrees_Tree = (left union newright), new'STrees_Tree = STrees_MoveSubtree(newleft, STrees_Root(newleft), (current.position)) in        inv_STrees_Info(mk_STrees_Info(((tree \ old) union new), STrees_Root(new)))))))Proof Obligation 280' (Unproved)STrees_Delete, leftchild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1344'25(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (STrees_HasLeftChild(tree, current) =>        pre_STrees_LeftChild(tree, current)))))Proof Obligation 281' (Unproved)STrees_Delete, leftchild' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1344'48(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (STrees_HasLeftChild(tree, current) =>        is_(current, STrees_Node)))))Proof Obligation 282' (Unproved)STrees_Delete, new' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1345'19(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (STrees_HasLeftChild(tree, current) =>        pre_STrees_MoveSubtree(old, leftchild, (current.position))))))Proof Obligation 283' (Unproved)STrees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1347'50(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (STrees_HasLeftChild(tree, current) =>        (let leftchild'STrees_Node = STrees_LeftChild(tree, current), new'STrees_Tree = STrees_MoveSubtree(old, leftchild, (current.position)) in          pre_STrees_Root(new))))))Proof Obligation 284' (Unproved)STrees_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1347'11(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (STrees_HasLeftChild(tree, current) =>        (let leftchild'STrees_Node = STrees_LeftChild(tree, current), new'STrees_Tree = STrees_MoveSubtree(old, leftchild, (current.position)) in          inv_STrees_Info(mk_STrees_Info(((tree \ old) union new), STrees_Root(new))))))))Proof Obligation 285' (Unproved)STrees_Delete, rightchild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1349'26(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (not STrees_HasLeftChild(tree, current) =>        (STrees_HasRightChild(tree, current) =>          pre_STrees_RightChild(tree, current))))))Proof Obligation 286' (Unproved)STrees_Delete, rightchild' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1349'50(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (not STrees_HasLeftChild(tree, current) =>        (STrees_HasRightChild(tree, current) =>          is_(current, STrees_Node))))))Proof Obligation 287' (Unproved)STrees_Delete, new' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1350'19(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (not STrees_HasLeftChild(tree, current) =>        (STrees_HasRightChild(tree, current) =>          pre_STrees_MoveSubtree(old, rightchild, (current.position)))))))Proof Obligation 288' (Unproved)STrees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1352'50(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (not STrees_HasLeftChild(tree, current) =>        (STrees_HasRightChild(tree, current) =>          (let rightchild'STrees_Node = STrees_RightChild(tree, current), new'STrees_Tree = STrees_MoveSubtree(old, rightchild, (current.position)) in            pre_STrees_Root(new)))))))Proof Obligation 289' (Unproved)STrees_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1352'11(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (not STrees_HasLeftChild(tree, current) =>        (STrees_HasRightChild(tree, current) =>          (let rightchild'STrees_Node = STrees_RightChild(tree, current), new'STrees_Tree = STrees_MoveSubtree(old, rightchild, (current.position)) in            inv_STrees_Info(mk_STrees_Info(((tree \ old) union new), STrees_Root(new)))))))))Proof Obligation 290' (Unproved)STrees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1355'44(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (not STrees_HasLeftChild(tree, current) =>        (not STrees_HasRightChild(tree, current) =>          pre_STrees_Parent(tree, current))))))Proof Obligation 291' (Unproved)STrees_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1355'64(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (not STrees_HasLeftChild(tree, current) =>        (not STrees_HasRightChild(tree, current) =>          is_(current, STrees_Node))))))Proof Obligation 292' (Unproved)STrees_Delete' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1355'11(forall mk_STrees_Info(tree, current)'STrees_Info & (current <> nil) =>  (let old'STrees_Tree = STrees_Subtree(tree, current) in    (not (STrees_HasRightChild(tree, current) and STrees_HasLeftChild(tree, current)) =>      (not STrees_HasLeftChild(tree, current) =>        (not STrees_HasRightChild(tree, current) =>          inv_STrees_Info(mk_STrees_Info((tree \ {current}), STrees_Parent(tree, current))))))))Proof Obligation 293' (Unproved)STrees_Subtree' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1363'1(forall tree'STrees_Tree, mk_STrees_Node(rootdata, rootpos)'STrees_Node & (mk_STrees_Node(rootdata, rootpos) in set tree) =>  inv_STrees_Tree({mk_STrees_Node(d, p) | [mk_STrees_Node(d, p) in set tree] & (exists1 n in set {0, ... ,(card tree)} & ((p >= (rootpos * (2 ** n))) and (p < ((rootpos + 1) * (2 ** n)))))}) and (is_({mk_STrees_Node(d, p) | [mk_STrees_Node(d, p) in set tree] & (exists1 n in set {0, ... ,(card tree)} & ((p >= (rootpos * (2 ** n))) and (p < ((rootpos + 1) * (2 ** n)))))}, set of (STrees_Node))))Proof Obligation 294' (Unproved)STrees_MoveSubtree, subtree' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1376'20(forall tree'STrees_Tree, subtreeRoot'STrees_Node, newRootPos'nat1 & (subtreeRoot in set tree) =>  pre_STrees_Subtree(tree, subtreeRoot))Proof Obligation 295' (Unproved)STrees_MoveSubtree' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1374'1(forall tree'STrees_Tree, subtreeRoot'STrees_Node, newRootPos'nat1 & (subtreeRoot in set tree) =>  inv_STrees_Tree(let subtree'STrees_Tree = STrees_Subtree(tree, subtreeRoot), mk_STrees_Node(-, oldRootPos)'STrees_Node = subtreeRoot in {STrees_MoveNode(tree, node, oldRootPos, newRootPos) | [node in set subtree]}) and (is_(let subtree'STrees_Tree = STrees_Subtree(tree, subtreeRoot), mk_STrees_Node(-, oldRootPos)'STrees_Node = subtreeRoot in {STrees_MoveNode(tree, node, oldRootPos, newRootPos) | [node in set subtree]}, set of (STrees_Node))))Proof Obligation 296' (Unproved)STrees_MoveNode, n' unique existence binding obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1390'15(forall tree'STrees_Tree, mk_STrees_Node(d, p)'STrees_Node, oldRootPos'nat1, newRootPos'nat1 &  exists1 n in set {0, ... ,(card tree)} & ((p >= (oldRootPos * (2 ** n))) and (p < ((oldRootPos + 1) * (2 ** n)))))Proof Obligation 297' (Unproved)STrees_MoveNode' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1392'49(forall tree'STrees_Tree, mk_STrees_Node(d, p)'STrees_Node, oldRootPos'nat1, newRootPos'nat1 &  (let n'int = (iota n in set {0, ... ,(card tree)} & ((p >= (oldRootPos * (2 ** n))) and (p < ((oldRootPos + 1) * (2 ** n))))) in    (((newRootPos * (2 ** n)) + p) - (oldRootPos * (2 ** n))) > 0))Proof Obligation 298' (Unproved)STrees_ExistsDirection' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1420'21(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction &  (not <ToRoot> = direction =>    (<ToLeft> = direction =>       ((current <> nil) =>        pre_STrees_HasLeftChild(tree, current)))))Proof Obligation 299' (Unproved)STrees_ExistsDirection' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1420'47(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction &  (not <ToRoot> = direction =>    (<ToLeft> = direction =>       ((current <> nil) =>        is_(current, STrees_Node)))))Proof Obligation 300' (Unproved)STrees_ExistsDirection' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1424'21(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction &  (not <ToRoot> = direction =>    (not <ToLeft> = direction =>      (<ToRight> = direction =>         ((current <> nil) =>          pre_STrees_HasRightChild(tree, current))))))Proof Obligation 301' (Unproved)STrees_ExistsDirection' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1424'48(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction &  (not <ToRoot> = direction =>    (not <ToLeft> = direction =>      (<ToRight> = direction =>         ((current <> nil) =>          is_(current, STrees_Node))))))Proof Obligation 302' (Unproved)STrees_ExistsDirection' cases exhaustive obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1416'6(forall mk_STrees_Info(tree, current)'STrees_Info, direction'STrees_Direction &  direction = <ToRoot> or direction = <ToLeft> or direction = <ToRight>)Proof Obligation 303' (Unproved)Trees_Position, parent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1480'19(forall heap'Heaps_Heap, child'Nodes_NodePtr & (child <> NIL) =>  pre_Nodes_GetParent(Heaps_Retrieve(heap, child)))Proof Obligation 304' (Unproved)Trees_Position, parent' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1480'35(forall heap'Heaps_Heap, child'Nodes_NodePtr & (child <> NIL) =>  ((is_(Heaps_Retrieve(heap, child), Nodes_BinaryTree)) or  (is_(Heaps_Retrieve(heap, child), Nodes_DoubleLink)) or  (is_(Heaps_Retrieve(heap, child), Nodes_SingleLink))))Proof Obligation 305' (Unproved)Trees_Position, parent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1480'35(forall heap'Heaps_Heap, child'Nodes_NodePtr & (child <> NIL) =>  pre_Heaps_Retrieve(heap, child))Proof Obligation 306' (Unproved)Trees_Position' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1484'18(forall heap'Heaps_Heap, child'Nodes_NodePtr & (child <> NIL) =>  (let parent'Nodes_NodePtr = Nodes_GetParent(Heaps_Retrieve(heap, child)) in    (not (parent = NIL) =>      (Trees_IsRightChildOf(heap, child, parent) =>        pre_Trees_Position(heap, parent)))))Proof Obligation 307' (Unproved)Trees_Position' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1486'18(forall heap'Heaps_Heap, child'Nodes_NodePtr & (child <> NIL) =>  (let parent'Nodes_NodePtr = Nodes_GetParent(Heaps_Retrieve(heap, child)) in    (not (parent = NIL) =>      (not Trees_IsRightChildOf(heap, child, parent) =>        pre_Trees_Position(heap, parent)))))Proof Obligation 308' (Unproved)Trees_Set, treeset' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1497'25(forall heap'Heaps_Heap, mk_Trees_Tree(treePtr, current)'Trees_Tree &  ((treePtr <> NIL) =>    pre_STrees_MkTree(Trees_SubtreeToSet(heap, treePtr, 1))))Proof Obligation 309' (Unproved)Trees_Set, data' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1498'22(forall heap'Heaps_Heap, mk_Trees_Tree(treePtr, current)'Trees_Tree &  ((treePtr <> NIL) =>    (let treeset'STrees_Tree = STrees_MkTree(Trees_SubtreeToSet(heap, treePtr, 1)) in      pre_Nodes_GetData(Heaps_Retrieve(heap, current)))))Proof Obligation 310' (Unproved)Trees_Set, data' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1498'36(forall heap'Heaps_Heap, mk_Trees_Tree(treePtr, current)'Trees_Tree &  ((treePtr <> NIL) =>    (let treeset'STrees_Tree = STrees_MkTree(Trees_SubtreeToSet(heap, treePtr, 1)) in      ((is_(Heaps_Retrieve(heap, current), Nodes_BinaryTree)) or      (is_(Heaps_Retrieve(heap, current), Nodes_DoubleLink)) or      (is_(Heaps_Retrieve(heap, current), Nodes_SingleLink))))))Proof Obligation 311' (Unproved)Trees_Set, data' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1498'36(forall heap'Heaps_Heap, mk_Trees_Tree(treePtr, current)'Trees_Tree &  ((treePtr <> NIL) =>    (let treeset'STrees_Tree = STrees_MkTree(Trees_SubtreeToSet(heap, treePtr, 1)) in      pre_Heaps_Retrieve(heap, current))))Proof Obligation 312' (Unproved)Trees_Set, position' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1499'26(forall heap'Heaps_Heap, mk_Trees_Tree(treePtr, current)'Trees_Tree &  ((treePtr <> NIL) =>    (let treeset'STrees_Tree = STrees_MkTree(Trees_SubtreeToSet(heap, treePtr, 1)) in      (let data'Nodes_Data = Nodes_GetData(Heaps_Retrieve(heap, current)) in        pre_Trees_Position(heap, current)))))Proof Obligation 313' (Unproved)Trees_Set' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1501'11(forall heap'Heaps_Heap, mk_Trees_Tree(treePtr, current)'Trees_Tree &  ((treePtr <> NIL) =>    (let treeset'STrees_Tree = STrees_MkTree(Trees_SubtreeToSet(heap, treePtr, 1)) in      (let data'Nodes_Data = Nodes_GetData(Heaps_Retrieve(heap, current)) in        (let position'nat1 = Trees_Position(heap, current) in          (let currentnode'STrees_Node = STrees_MkNode(data, position) in            pre_STrees_MkInfo(treeset, currentnode)))))))Proof Obligation 314' (Unproved)Trees_SubtreeToSet' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1513'23(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    pre_Nodes_GetData(Heaps_Retrieve(heap, subtree))))Proof Obligation 315' (Unproved)Trees_SubtreeToSet' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1513'37(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    ((is_(Heaps_Retrieve(heap, subtree), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, subtree), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, subtree), Nodes_SingleLink)))))Proof Obligation 316' (Unproved)Trees_SubtreeToSet' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1513'37(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    pre_Heaps_Retrieve(heap, subtree)))Proof Obligation 317' (Unproved)Trees_SubtreeToSet' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1515'8(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    pre_Nodes_GetLeft(Heaps_Retrieve(heap, subtree))))Proof Obligation 318' (Unproved)Trees_SubtreeToSet' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1516'13(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    ((is_(Heaps_Retrieve(heap, subtree), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, subtree), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, subtree), Nodes_SingleLink)))))Proof Obligation 319' (Unproved)Trees_SubtreeToSet' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1516'13(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    pre_Heaps_Retrieve(heap, subtree)))Proof Obligation 320' (Unproved)Trees_SubtreeToSet' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1518'16(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    pre_Nodes_GetRight(Heaps_Retrieve(heap, subtree))))Proof Obligation 321' (Unproved)Trees_SubtreeToSet' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1519'19(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    ((is_(Heaps_Retrieve(heap, subtree), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, subtree), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, subtree), Nodes_SingleLink)))))Proof Obligation 322' (Unproved)Trees_SubtreeToSet' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1519'19(forall heap'Heaps_Heap, subtree'Nodes_NodePtr, position'nat1 &  ((subtree <> NIL) =>    pre_Heaps_Retrieve(heap, subtree)))Proof Obligation 323' (Unproved)Trees_HasLeftChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1529'11(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & ((ptr <> NIL) => pre_Heaps_Retrieve(heap, ptr)) =>  ((ptr <> NIL) =>    pre_Nodes_GetLeft(Heaps_Retrieve(heap, ptr))))Proof Obligation 324' (Unproved)Trees_HasLeftChild' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1529'25(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & ((ptr <> NIL) => pre_Heaps_Retrieve(heap, ptr)) =>  ((ptr <> NIL) =>    ((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))))Proof Obligation 325' (Unproved)Trees_HasLeftChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1529'25(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & ((ptr <> NIL) => pre_Heaps_Retrieve(heap, ptr)) =>  ((ptr <> NIL) =>    pre_Heaps_Retrieve(heap, ptr)))Proof Obligation 326' (Unproved)Trees_HasRightChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1536'11(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & ((ptr <> NIL) => pre_Heaps_Retrieve(heap, ptr)) =>  ((ptr <> NIL) =>    pre_Nodes_GetRight(Heaps_Retrieve(heap, ptr))))Proof Obligation 327' (Unproved)Trees_HasRightChild' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1536'26(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & ((ptr <> NIL) => pre_Heaps_Retrieve(heap, ptr)) =>  ((ptr <> NIL) =>    ((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink)))))Proof Obligation 328' (Unproved)Trees_HasRightChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1536'26(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & ((ptr <> NIL) => pre_Heaps_Retrieve(heap, ptr)) =>  ((ptr <> NIL) =>    pre_Heaps_Retrieve(heap, ptr)))Proof Obligation 329' (Unproved)Trees_IsRightChildOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1543'14(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  pre_Nodes_GetRight(Heaps_Retrieve(heap, parent)))Proof Obligation 330' (Unproved)Trees_IsRightChildOf' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1543'29(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  ((is_(Heaps_Retrieve(heap, parent), Nodes_BinaryTree)) or  (is_(Heaps_Retrieve(heap, parent), Nodes_DoubleLink)) or  (is_(Heaps_Retrieve(heap, parent), Nodes_SingleLink))))Proof Obligation 331' (Unproved)Trees_IsRightChildOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1543'29(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  pre_Heaps_Retrieve(heap, parent))Proof Obligation 332' (Unproved)Trees_IsRightChildOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1544'19(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  ((child = Nodes_GetRight(Heaps_Retrieve(heap, parent))) =>    pre_Nodes_GetParent(Heaps_Retrieve(heap, child))))Proof Obligation 333' (Unproved)Trees_IsRightChildOf' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1544'35(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  ((child = Nodes_GetRight(Heaps_Retrieve(heap, parent))) =>    ((is_(Heaps_Retrieve(heap, child), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, child), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, child), Nodes_SingleLink)))))Proof Obligation 334' (Unproved)Trees_IsRightChildOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1544'35(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  ((child = Nodes_GetRight(Heaps_Retrieve(heap, parent))) =>    pre_Heaps_Retrieve(heap, child)))Proof Obligation 335' (Unproved)Trees_IsLeftChildOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1550'14(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  pre_Nodes_GetLeft(Heaps_Retrieve(heap, parent)))Proof Obligation 336' (Unproved)Trees_IsLeftChildOf' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1550'28(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  ((is_(Heaps_Retrieve(heap, parent), Nodes_BinaryTree)) or  (is_(Heaps_Retrieve(heap, parent), Nodes_DoubleLink)) or  (is_(Heaps_Retrieve(heap, parent), Nodes_SingleLink))))Proof Obligation 337' (Unproved)Trees_IsLeftChildOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1550'28(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  pre_Heaps_Retrieve(heap, parent))Proof Obligation 338' (Unproved)Trees_IsLeftChildOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1551'19(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  ((child = Nodes_GetLeft(Heaps_Retrieve(heap, parent))) =>    pre_Nodes_GetParent(Heaps_Retrieve(heap, child))))Proof Obligation 339' (Unproved)Trees_IsLeftChildOf' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1551'35(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  ((child = Nodes_GetLeft(Heaps_Retrieve(heap, parent))) =>    ((is_(Heaps_Retrieve(heap, child), Nodes_BinaryTree)) or    (is_(Heaps_Retrieve(heap, child), Nodes_DoubleLink)) or    (is_(Heaps_Retrieve(heap, child), Nodes_SingleLink)))))Proof Obligation 340' (Unproved)Trees_IsLeftChildOf' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1551'35(forall heap'Heaps_Heap, child'Nodes_NodePtr, parent'Nodes_NodePtr & (pre_Heaps_Retrieve(heap, parent) and pre_Heaps_Retrieve(heap, child)) =>  ((child = Nodes_GetLeft(Heaps_Retrieve(heap, parent))) =>    pre_Heaps_Retrieve(heap, child)))Proof Obligation 341' (Unproved)Trees_IsRoot' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1556'28(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & (ptr <> NIL) =>  pre_Nodes_GetParent(Heaps_Retrieve(heap, ptr)))Proof Obligation 342' (Unproved)Trees_IsRoot' subtype obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1556'44(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & (ptr <> NIL) =>  ((is_(Heaps_Retrieve(heap, ptr), Nodes_BinaryTree)) or  (is_(Heaps_Retrieve(heap, ptr), Nodes_DoubleLink)) or  (is_(Heaps_Retrieve(heap, ptr), Nodes_SingleLink))))Proof Obligation 343' (Unproved)Trees_IsRoot' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1556'44(forall heap'Heaps_Heap, ptr'Nodes_NodePtr & (ptr <> NIL) =>  pre_Heaps_Retrieve(heap, ptr))Proof Obligation 344' (Unproved)Trees_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1575'37(Heaps_Available(heap) =>  (let mk_Trees_Tree(treePtr, current)'Trees_Tree = tree in    (((direction = <ToRoot>) => (treePtr = NIL)) =>      pre_Trees_HasRightChild(heap, current))))Proof Obligation 345' (Unproved)Trees_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1576'36(Heaps_Available(heap) =>  (let mk_Trees_Tree(treePtr, current)'Trees_Tree = tree in    (((direction = <ToRoot>) => (treePtr = NIL)) =>      (((direction = <ToRight>) => (not Trees_HasRightChild(heap, current))) =>        pre_Trees_HasLeftChild(heap, current)))))Proof Obligation 346' (Unproved)Trees_Insert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1579'9(((Heaps_AmountUsed(heap~) + 1) = Heaps_AmountUsed(heap)) =>  (let old'STrees_Info = Trees_Set(heap~, tree) in    pre_STrees_Insert(old, data, direction)))Proof Obligation 347' (Unproved)Trees_Insert' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1563'1(((Heaps_AmountUsed(heap~) + 1) = Heaps_AmountUsed(heap)) and let old'STrees_Info = Trees_Set(heap~, tree) in (STrees_Insert(old, data, direction) = Trees_Set(heap, RESULT)))Proof Obligation 348' (Unproved)Trees_InOrderPredecessor' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1608'5pre_Trees_HasLeftChild(heap, ptr)Proof Obligation 349' (Unproved)Trees_InOrderPredecessor' while loop termination obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1604'2while Trees_HasRightChild(heap, pred) do ...Proof Obligation 350' (Unproved)Trees_InOrderPredecessor' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1604'8pre_Trees_HasRightChild(heap, pred)Proof Obligation 351' (Unproved)Trees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1653'11((Heaps_AmountUsed(heap~) = (Heaps_AmountUsed(heap) + 1)) =>  (let old'STrees_Info = Trees_Set(heap~, mk_Trees_Tree(treePtr, current)) in    pre_STrees_Delete(old)))Proof Obligation 352' (Unproved)Trees_Delete' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1610'1((Heaps_AmountUsed(heap~) = (Heaps_AmountUsed(heap) + 1)) and let old'STrees_Info = Trees_Set(heap~, mk_Trees_Tree(treePtr, current)) in (STrees_Delete(old) = Trees_Set(heap, RESULT)))Proof Obligation 353' (Unproved)Trees_Delete, hasLeftChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1612'33pre_Trees_HasLeftChild(heap, current)Proof Obligation 354' (Unproved)Trees_Delete, hasRightChild' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1613'34pre_Trees_HasRightChild(heap, current)Proof Obligation 355' (Unproved)Trees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1640'9pre_Trees_IsRoot(heap, current)Proof Obligation 356' (Unproved)Trees_Delete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1642'13pre_Trees_IsRightChildOf(heap, current, parent)Proof Obligation 357' (Unproved)Trees_ExistsData' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1678'1(STrees_ExistsData(Trees_Set(heap, tree), data) = RESULT)Proof Obligation 358' (Unproved)Trees_ExistsDirection' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1682'1(STrees_ExistsDirection(Trees_Set(heap, tree), direction) = RESULT)Proof Obligation 359' (Unproved)Trees_ExistsDirection' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1688'25(((tree.current) <> NIL) =>  pre_Trees_HasLeftChild(heap, (tree.current)))Proof Obligation 360' (Unproved)Trees_ExistsDirection' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1691'25(((tree.current) <> NIL) =>  pre_Trees_HasRightChild(heap, (tree.current)))Proof Obligation 361' (Unproved)Trees_GetCurrentData' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1701'6pre_STrees_GetCurrentData(Trees_Set(heap, tree))Proof Obligation 362' (Unproved)Trees_GetCurrentData' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1698'1(STrees_GetCurrentData(Trees_Set(heap, tree)) = RESULT)Proof Obligation 363' (Unproved)Trees_StoreCurrentData' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1709'6pre_STrees_StoreCurrentData(Trees_Set(heap~, tree), data)Proof Obligation 364' (Unproved)Trees_StoreCurrentData' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1703'1(STrees_StoreCurrentData(Trees_Set(heap~, tree), data) = Trees_Set(heap, RESULT))Proof Obligation 365' (Unproved)Trees_MoveInDir' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1721'35(((tree.treePtr) <> NIL) =>  pre_Trees_HasLeftChild(heap, (tree.current)))Proof Obligation 366' (Unproved)Trees_MoveInDir' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1722'36(((tree.treePtr) <> NIL) =>  (((direction = <ToLeft>) => Trees_HasLeftChild(heap, (tree.current))) =>    pre_Trees_HasRightChild(heap, (tree.current))))Proof Obligation 367' (Unproved)Trees_MoveInDir' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1723'6pre_STrees_MoveInDir(Trees_Set(heap~, tree), direction)Proof Obligation 368' (Unproved)Trees_MoveInDir' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1712'1(STrees_MoveInDir(Trees_Set(heap~, tree), direction) = Trees_Set(heap, RESULT))Proof Obligation 369' (Unproved)Trees_MoveToParent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1730'9pre_Trees_IsRoot(heap, (tree.current))Proof Obligation 370' (Unproved)Trees_MoveToParent' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1731'6pre_STrees_MoveToParent(Trees_Set(heap~, tree))Proof Obligation 371' (Unproved)Trees_MoveToParent' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1727'1(STrees_MoveToParent(Trees_Set(heap~, tree)) = Trees_Set(heap, RESULT))Proof Obligation 372' (Unproved)Trees_Size' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1734'1(STrees_Size(Trees_Set(heap~, tree)) = RESULT)Proof Obligation 373' (Unproved)Trees_Traverse' operation post condition obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1752'1(STrees_Traverse(Trees_Set(heap~, tree), traversal) = Trees_Set(heap, RESULT))Proof Obligation 374' (Unproved)Trees_TraverseSubtree' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1763'29pre_(traversal, DATA(subtree))Proof Obligation 375' (Unproved)InsertResult' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1884'16pre_STrees_MkTree({STrees_MkNode('a', 1), STrees_MkNode('b', 2), STrees_MkNode('c', 3), STrees_MkNode('d', 4), STrees_MkNode('e', 5), STrees_MkNode('f', 6), STrees_MkNode('g', 7), STrees_MkNode('h', 8), STrees_MkNode('i', 9), STrees_MkNode('j', 10), STrees_MkNode('k', 11), STrees_MkNode('l', 12), STrees_MkNode('m', 13), STrees_MkNode('n', 14), STrees_MkNode('o', 15), STrees_MkNode('p', 16), STrees_MkNode('q', 17), STrees_MkNode('r', 18), STrees_MkNode('s', 19), STrees_MkNode('t', 20), STrees_MkNode('u', 21), STrees_MkNode('v', 22), STrees_MkNode('w', 23), STrees_MkNode('x', 24), STrees_MkNode('y', 25), STrees_MkNode('z', 26)})Proof Obligation 376' (Unproved)DeleteResult' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1915'16pre_STrees_MkTree({STrees_MkNode('a', 1), STrees_MkNode('d', 2), STrees_MkNode('c', 3), STrees_MkNode('h', 4), STrees_MkNode('i', 5), STrees_MkNode('f', 6), STrees_MkNode('o', 7), STrees_MkNode('p', 8), STrees_MkNode('r', 10), STrees_MkNode('s', 11), STrees_MkNode('l', 12), STrees_MkNode('z', 13), STrees_MkNode('j', 23), STrees_MkNode('x', 24), STrees_MkNode('y', 25), STrees_MkNode('t', 46), STrees_MkNode('u', 47), STrees_MkNode('k', 95), STrees_MkNode('v', 190), STrees_MkNode('w', 191)})Proof Obligation 377' (Unproved)TraverseResult' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1939'18pre_STrees_MkTree({STrees_MkNode('a', 1), STrees_MkNode('a', 2), STrees_MkNode('a', 3), STrees_MkNode('a', 4), STrees_MkNode('a', 5), STrees_MkNode('a', 6), STrees_MkNode('b', 7), STrees_MkNode('b', 8), STrees_MkNode('b', 10), STrees_MkNode('b', 11), STrees_MkNode('b', 12), STrees_MkNode('b', 13), STrees_MkNode('a', 23), STrees_MkNode('b', 24), STrees_MkNode('b', 25), STrees_MkNode('b', 46), STrees_MkNode('b', 47), STrees_MkNode('b', 95), STrees_MkNode('b', 190), STrees_MkNode('b', 191)})Proof Obligation 378' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1984'15pre_STrees_Insert(stree, 'a', <ToRoot>)Proof Obligation 379' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1986'15pre_STrees_Insert(stree, 'b', <ToLeft>)Proof Obligation 380' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1989'15pre_STrees_MoveToParent(stree)Proof Obligation 381' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1990'15pre_STrees_Insert(stree, 'c', <ToRight>)Proof Obligation 382' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1992'15pre_STrees_MoveToParent(stree)Proof Obligation 383' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1993'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 384' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1994'15pre_STrees_Insert(stree, 'd', <ToLeft>)Proof Obligation 385' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1996'15pre_STrees_MoveToParent(stree)Proof Obligation 386' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1997'15pre_STrees_Insert(stree, 'e', <ToRight>)Proof Obligation 387' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 1999'15pre_STrees_MoveInDir(stree, <ToRoot>)Proof Obligation 388' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2000'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 389' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2001'15pre_STrees_Insert(stree, 'f', <ToLeft>)Proof Obligation 390' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2003'15pre_STrees_MoveToParent(stree)Proof Obligation 391' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2004'15pre_STrees_Insert(stree, 'g', <ToRight>)Proof Obligation 392' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2006'15pre_STrees_MoveInDir(stree, <ToRoot>)Proof Obligation 393' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2007'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 394' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2008'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 395' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2009'15pre_STrees_Insert(stree, 'h', <ToLeft>)Proof Obligation 396' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2011'15pre_STrees_MoveToParent(stree)Proof Obligation 397' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2012'15pre_STrees_Insert(stree, 'i', <ToRight>)Proof Obligation 398' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2014'15pre_STrees_MoveToAnscestor(stree, 2)Proof Obligation 399' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2015'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 400' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2016'15pre_STrees_Insert(stree, 'j', <ToLeft>)Proof Obligation 401' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2018'15pre_STrees_MoveToParent(stree)Proof Obligation 402' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2019'15pre_STrees_Insert(stree, 'k', <ToRight>)Proof Obligation 403' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2021'15pre_STrees_MoveInDir(stree, <ToRoot>)Proof Obligation 404' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2022'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 405' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2023'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 406' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2024'15pre_STrees_Insert(stree, 'l', <ToLeft>)Proof Obligation 407' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2026'15pre_STrees_MoveToParent(stree)Proof Obligation 408' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2027'15pre_STrees_Insert(stree, 'm', <ToRight>)Proof Obligation 409' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2029'15pre_STrees_MoveToAnscestor(stree, 2)Proof Obligation 410' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2030'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 411' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2031'15pre_STrees_Insert(stree, 'n', <ToLeft>)Proof Obligation 412' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2033'15pre_STrees_MoveToParent(stree)Proof Obligation 413' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2035'15pre_STrees_Insert(stree, 'o', <ToRight>)Proof Obligation 414' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2037'15pre_STrees_MoveInDir(stree, <ToRoot>)Proof Obligation 415' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2038'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 416' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2039'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 417' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2040'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 418' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2041'15pre_STrees_Insert(stree, 'p', <ToLeft>)Proof Obligation 419' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2043'15pre_STrees_MoveToParent(stree)Proof Obligation 420' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2044'15pre_STrees_Insert(stree, 'q', <ToRight>)Proof Obligation 421' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2046'15pre_STrees_MoveToAnscestor(stree, 2)Proof Obligation 422' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2047'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 423' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2048'15pre_STrees_Insert(stree, 'r', <ToLeft>)Proof Obligation 424' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2050'15pre_STrees_MoveToParent(stree)Proof Obligation 425' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2051'15pre_STrees_Insert(stree, 's', <ToRight>)Proof Obligation 426' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2053'15pre_STrees_MoveToAnscestor(stree, 3)Proof Obligation 427' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2054'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 428' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2055'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 429' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2056'15pre_STrees_Insert(stree, 't', <ToLeft>)Proof Obligation 430' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2058'15pre_STrees_MoveToParent(stree)Proof Obligation 431' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2059'15pre_STrees_Insert(stree, 'u', <ToRight>)Proof Obligation 432' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2061'15pre_STrees_MoveToAnscestor(stree, 2)Proof Obligation 433' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2062'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 434' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2063'15pre_STrees_Insert(stree, 'v', <ToLeft>)Proof Obligation 435' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2065'15pre_STrees_MoveToParent(stree)Proof Obligation 436' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2066'15pre_STrees_Insert(stree, 'w', <ToRight>)Proof Obligation 437' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2068'15pre_STrees_MoveInDir(stree, <ToRoot>)Proof Obligation 438' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2069'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 439' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2070'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 440' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2071'15pre_STrees_MoveInDir(stree, <ToLeft>)Proof Obligation 441' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2072'15pre_STrees_Insert(stree, 'x', <ToLeft>)Proof Obligation 442' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2074'15pre_STrees_MoveToParent(stree)Proof Obligation 443' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2075'15pre_STrees_Insert(stree, 'y', <ToRight>)Proof Obligation 444' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2077'15pre_STrees_MoveToAnscestor(stree, 2)Proof Obligation 445' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2078'15pre_STrees_MoveInDir(stree, <ToRight>)Proof Obligation 446' (Unproved)TestSTreesInsert' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2079'15pre_STrees_Insert(stree, 'z', <ToLeft>)Proof Obligation 447' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2088'15pre_STrees_MoveToNode(stree, 14)Proof Obligation 448' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2089'15pre_STrees_Delete(stree)Proof Obligation 449' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2091'15pre_STrees_MoveToNode(stree, 17)Proof Obligation 450' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2092'15pre_STrees_Delete(stree)Proof Obligation 451' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2094'15pre_STrees_MoveToNode(stree, 13)Proof Obligation 452' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2095'15pre_STrees_Delete(stree)Proof Obligation 453' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2097'15pre_STrees_MoveToNode(stree, 7)Proof Obligation 454' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2098'15pre_STrees_Delete(stree)Proof Obligation 455' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2100'15pre_STrees_MoveToNode(stree, 5)Proof Obligation 456' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2101'15pre_STrees_Delete(stree)Proof Obligation 457' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2103'15pre_STrees_MoveToNode(stree, 2)Proof Obligation 458' (Unproved)TestSTreesDelete' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2104'15pre_STrees_Delete(stree)Proof Obligation 459' (Unproved)TestSTrees' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2128'15pre_STrees_MoveToNode(stree, 3)Proof Obligation 460' (Unproved)TestSTrees' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2135'16pre_STrees_GetData(stree, 13)Proof Obligation 461' (Unproved)TestSTrees' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2137'15pre_STrees_SetCurrentNode(stree, STrees_MkNode('z', 13))Proof Obligation 462' (Unproved)TestSTrees' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2142'15pre_STrees_StoreCurrentData(stree, 'Z')Proof Obligation 463' (Unproved)TestSTrees' function apply obligation in 'DEFAULT' (..\..\documentation\examples\VDMSL\ADT\adt.vdmsl) at line 2143'16pre_STrees_GetCurrentData(stree)
