\begin{vdm_al}
class TimeStamp is subclass of WaitNotify

values

public stepLength : nat = 10;

instance variables

currentTime : nat := 0;
wakeUpMap : map nat to nat := {|->};

operations

public WaitRelative : nat ==> ()
WaitRelative(val) ==
( AddToWakeUpMap(threadid, currentTime + val);
    Wait();
);

public WaitAbsolute : nat ==> ()
WaitAbsolute(val) ==
( AddToWakeUpMap(threadid, val);
    Wait();
);

AddToWakeUpMap : nat * nat ==> ()
AddToWakeUpMap(tId, val) ==
    wakeUpMap := wakeUpMap ++ { tId |-> val };
    
public NotifyThread : nat ==> ()
NotifyThread(tId) ==
( wakeUpMap := {tId} <-: wakeUpMap;
    NotifyThread(tId)
);

public Notify : () ==> ()
Notify() ==
    let tId in set dom wakeUpMap in
        NotifyThread(tId);
        
public NotifyAll : () ==> ()
NotifyAll() ==
( wakeUpMap := {|->};
    NotifyAll()
);

public NotifyAndIncTime : () ==> ()
NotifyAndIncTime() ==
( currentTime := currentTime + stepLength;
    for all t in set dom (wakeUpMap :> {1,...,currentTime}) do
        NotifyThread(t)
);

public GetTime : () ==> nat
GetTime() ==
    return currentTime;
    
sync

    mutex(AddToWakeUpMap, Notify, NotifyThread, NotifyAll);
    
end TimeStamp

\end{vdm_al}

