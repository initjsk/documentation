class Transmitter is subclass of GLOBAL

instance variables

private prioritizedBuffer : seq of Message :=[];
private cpr : CprNr;
private battery : BatteryMonitor;
private busy : bool:=false;

thread
    while true do
        (
        --NewWorld`timerRef.WaitRelative(TimeStamp`stepLength);
        --Printer`Out("TX: thread hello");
        sendMessage();
        );

operations

public Transmitter: CprNr ==> Transmitter
Transmitter(cprnr) == 
(
    cpr:=cprnr
);

sortByPriority: Message * seq of Message ==> seq of Message
sortByPriority(val, sorted) == 
(
    cases true:
        (sorted = []) -> return [val],
        (val.priority <= (hd sorted).priority) -> return [val] ^ sorted,
        others -> return [hd sorted] ^ sortByPriority(val, tl sorted)
    end
);

public transmit: Message ==> ()
transmit(message) ==
(   Printer`Out("TX: Message received for transmission");
    prioritizedBuffer := sortByPriority(message, prioritizedBuffer);
    busy:= true;
    
    --if len buffer > 0 then
    --Printer`Out("Buffer not empty")
    --Printer`Out("TX: Sorting done") 
);

private sendMessage: () ==> ()
sendMessage() ==
(
        --dcl msg : Message := hd prioritizedBuffer;
        --prioritizedBuffer := tl prioritizedBuffer;
        
        dcl msg: Message := getData();
        NewWorld`env.handleEvent(time, msg);
        
        battery.drain(drainVolume(msg.priority));
        busy:=len prioritizedBuffer > 0;
        if(not busy) then
            Printer`Out("TX not busy no more!");
);

private getData: () ==> Message
getData() ==
(
    dcl msg : Message := hd prioritizedBuffer;
    prioritizedBuffer := tl prioritizedBuffer;
    return msg;
);

public attachBattery: BatteryMonitor ==> ()
attachBattery(theBattery) == 
    battery:= theBattery;

public isFinished: () ==> ()
isFinished() == 
(
    Printer`Out("TX is done");
);


sync

mutex(transmit, getData);
per getData => prioritizedBuffer <> []; 
per isFinished => not busy;

end Transmitter
