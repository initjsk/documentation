\section{Station}
\begin{vdm_al}
class Station
instance variables
private passengers : set of TransportPlan := {};
private stationId : nat;
private static stationList : set of Station := {};
private name : TPC`String;
operations

public Station : nat * TPC`String ==> Station
Station(id, sname) == (
stationId := id;
name := sname;
);

public addPassenger : TransportPlan ==> ()
addPassenger(tp) == (

	if tp.sectionsRemaining() > 0 then(
		passengers := passengers union {tp};
	);
)
pre tp.getNextSection().departureLocation = name;

public getName : () ==> TPC`String
getName() == return name;

public getPassengers : Train ==> set of TransportPlan
getPassengers(t) == (
	(
		dcl rtnPassengers : set of TransportPlan := {};
		for all p in set passengers	do (
			if p.getNextSection().arrivalLocation = t.getCurrentSection().arrivalLocation then 
			(
				rtnPassengers := rtnPassengers union {p};
				passengers := passengers \ {p};
				Logger`write2("Station adding passenger",t.getTrainId(),time); 
			);
		);
		return rtnPassengers;
	);
);

public getPas : () ==> set of TransportPlan
getPas() == return passengers;

public static getStation : TPC`String ==> [Station]
getStation(sname) ==( 
for all x in set stationList do(
	if x.getName() = sname then(
		return x;
	);
	
);
return nil;
);

public static getList : () ==> set of Station
getList() == return stationList;

public static addStation : Station ==> ()
addStation(s) == stationList := stationList union {s};

sync
--mutex(addPassenger);
--mutex(addPassenger, getPassengers);
--mutex(getPassengers);
--per  getPassengers => #act(getPassengers) = #fin(getPassengers);
end Station
\end{vdm_al}
