\section{TokenDevice class}

\begin{vdm_al}

class TokenDevice

instance variables

  private id_token : nat := 1;
  private transportPlan : [TransportPlan] := nil;
  --private test : bool := false;
  private tpc : TPC; 
  private q_APM_out : ActivePlanManager;
  private q_Env_out : Environment;



operations
 
 public TokenDevice : nat ==> TokenDevice	
  TokenDevice(id) == (
  	id_token := id;
  	tpc := new TPC();	
  );

    
public requestTransportPlan : TPC`NavigationInput ==> ()
requestTransportPlan(navi) ==
(
	dcl status : set of nat := {0};
	while card status > 0 do
	(
		transportPlan := new TransportPlan(mk_TransportPlan`DTO(navi.id_token,tpc.calculateTransportPlan(navi), navi.transportChoice, navi.departureTime));
		status := q_APM_out.startJourney(transportPlan.getSectionIds(), self);
		Logger`write(transportPlan.getByValue());	
		if card status > 0 then
		(
			tpc.inactiveSections(status);
		);	
		
	);	
	Station`getStation(transportPlan.getNextSection().departureLocation).addPassenger(transportPlan);
);

public notify : nat ==> ()
notify(sectionId)==
(
	Logger`write("Token device notified");
	tpc.inactiveSection(sectionId);	
	if isAffected(sectionId) then
	(
		Logger`write("Token device affected");
		let navi = transportPlan.getPlanAsNaviInput() in
		(
			transportPlan.assignNewPlan(mk_TransportPlan`DTO(navi.id_token,tpc.calculateTransportPlan(navi), navi.transportChoice, navi.departureTime));		
			q_APM_out.updateJourney(transportPlan.getSectionIds(), self);
			Logger`write(transportPlan.getByValue());	
		);
	);
	return;
);

private sectionTraveled : () ==> ()
sectionTraveled() == 
(
  transportPlan.sectionTraveled();
  if transportPlan.sectionsRemaining() <= 0 then 
  (
  	q_APM_out.stopJourney(self);
  ); 	
)
pre transportPlan.sectionsRemaining() > 0;

public getTokenId : () ==> nat
  getTokenId() == return id_token;

public isAffected : nat ==> bool
isAffected(section_id) ==
(
	if transportPlan.containsSection(section_id)
	then ( return true; )
	else ( return false; )
);

public setEnv : Environment ==> ()
setEnv(env) == q_Env_out := env;

public setAPM : ActivePlanManager ==> ()
setAPM(apm) == q_APM_out := apm;


--public isFinished : () ==> ()
--isFinished() == skip;

--public isFin : () ==> ()
--isFin() == skip;


sync

--per isFin => (#fin(notifyPassenger) > 0);

--mutex(notifyPassenger);
--mutex(requestTransportPlan);

end TokenDevice

\end{vdm_al}


