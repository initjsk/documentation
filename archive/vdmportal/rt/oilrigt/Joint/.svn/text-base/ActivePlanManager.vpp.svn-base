	
\section{ActivePlanManager class}
\begin{vdm_al}

class ActivePlanManager 


instance variables

private activeTokens : inmap TokenDevice to set of nat := {|->};
inv forall x,y in set dom activeTokens &
 x = y =>  activeTokens(x) = activeTokens(y);
--Ensure only uniqu TokenDevice reside in the map.
--Tests if 2 elements from domain is equal then (implication) they point
--to the same entity. 

private busy : bool := false;
-- private filler : Types`String;
--private CR: TPC; 
private io : IO := new IO();
private smsGateway : SMSGateway;
private inactiveSectionIds : set of nat := {};

operations

 public setSMSGateway : SMSGateway ==> ()
 setSMSGateway(gw) == smsGateway := gw;

public ActivePlanManager : ()  ==> ActivePlanManager
  ActivePlanManager() == (
	skip;
);
  



private addTransportPlan : set of nat * TokenDevice ==> ()
addTransportPlan(sectionIds,tokenDevice) ==
(	
   activeTokens := activeTokens ++ {tokenDevice|-> sectionIds};	
);	

private removeTransportPlan : TokenDevice ==> ()
removeTransportPlan(tokenDevice) ==
  (
  activeTokens := {tokenDevice} <-: activeTokens;  
  --Restrict map to not contain a mapplet containing tokenDevice
 );


async public inactiveSection : nat ==> ()
inactiveSection(id_section) ==
(	
	inactiveSectionIds := inactiveSectionIds union {id_section};
	duration(50)
	(
		Logger`write("APM Inactive Route called");
		for all ids in set rng activeTokens do
		(
			if id_section in set ids
			then
			(
				let p = inverse activeTokens in (
				smsGateway.send(p(ids), mk_SMSGateway`SMSMessage(<setInactive>, [id_section]), time);
				Logger`write2("APM->SMSGateway.send ", time, time );
				);
			)
 	 	);
   	);
);
						


public startJourney : set of nat * TokenDevice ==> set of nat
startJourney(transportPlan, tokenDevice)==
(
	Logger`write("startJourney Called!");
	if isOperationalRoute(transportPlan) then (
		addTransportPlan(transportPlan, tokenDevice);
		return {};
	)
	else
	( 
		return inactiveSectionIds;
	);
);

public updateJourney : set of nat * TokenDevice ==> ()
updateJourney(newplan, tokenDevice) ==
(
	Logger`write("updateJourney Called!");
	if tokenDevice in set dom activeTokens then (
 		activeTokens(tokenDevice) := newplan; 				
 	);
);

public stopJourney : TokenDevice ==> ()
stopJourney(tokenDevice) ==
(
	 Logger`write("stopJourney Called!");
	 removeTransportPlan(tokenDevice);	
);

public isOperationalRoute : set of nat ==> bool
isOperationalRoute(ids)==
(
	if card (ids inter inactiveSectionIds) > 0 then
	(
		return false;
	);
	
	return true;
);

public isFinished : () ==> ()
isFinished () == skip;

sync
--mutex(returnTransportPlan);
--mutex(inactiveSection)

end ActivePlanManager

\end{vdm_al}
