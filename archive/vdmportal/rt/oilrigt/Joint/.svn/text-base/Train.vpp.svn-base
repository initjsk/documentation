\section{Train}

\begin{vdm_al}
class Train

instance variables
private passengers : set of TransportPlan := {};
private trainId : nat;
public currentRoute : Route;
private arrivalTime : nat := 0;
private done : bool := false;
private tmp : bool := true;
private test : nat := 0;
private state : Types`State := <PreJourney>;
private controller : Controller;
private curStation : Types`String;
private curSection : TransportPlan`Section;



types

operations

public Train : nat * Route * Controller==> Train
Train(tId, r, ctrl) == (trainId := tId;
	currentRoute := r;
	arrivalTime := r.getDepartureTime();
	controller := ctrl;
);

--public setTPC : TPC ==> ()
--setTPC(t) == tpc := t;

public addPassenger : TokenDevice ==> ()
addPassenger(passenger) ==(
	passengers := passengers union {passenger};
);

public setRoute : Route ==> ()
setRoute(r) == (
	currentRoute := r;
);

public removePassenger : TransportPlan ==> ()
removePassenger(passenger) == (
	passengers := passengers \ {passenger};
	Logger`write2("Train Removing passenger",trainId,time);
);

public getTrainId : () ==> nat
getTrainId() == return trainId;

public getCurrentSection : () ==> TransportPlan`Section
getCurrentSection() == return currentRoute.getSection();

public passengerTravel : () ==> () 
passengerTravel() == (
	for all p in set passengers do
		p.sectionTraveled();
);

private travel : () ==> ()
travel() == (
	duration(0)(
	if not done then (
	if state = <PreJourney> then(
		if currentRoute.getDepartureTime() <= time then (
			passengers := passengers union Station`getStation(currentRoute.departureLocation).getPassengers(self);
			state := <Journey>;
			arrivalTime := currentRoute.getNextArrivalTime();
			passengerTravel();
		);
	)
	else(
	if arrivalTime <> -1 and arrivalTime < time then(
		curStation := currentRoute.getArrivalLocation();
		currentRoute.sectionTraveled();
		arrivalTime := currentRoute.getNextArrivalTime();
		curSection := currentRoute.getSection();
		
		if not (arrivalTime = -1 ) and controller.isSectionActive(curSection.id_section) then(
			passengers := passengers union Station`getStation(curStation).getPassengers(self);
		);
	
		for all p in set passengers do (

			if p.sectionsRemaining() = 0 then (
				removePassenger(p);
			)
			else if ((arrivalTime = -1) or not (p.getNextSection().arrivalLocation = curSection.arrivalLocation) ) then (
				removePassenger(p);
				Station`getStation(curStation).addPassenger(p);
			);
		);
		passengerTravel();
		);
		
	);
		if(arrivalTime = -1 or not (controller.isSectionActive(currentRoute.getSection().id_section))) then(
			done := true;
			--Logger`write2(card passengers,trainId,time);
		);
	);
);
);

public isFinished : () ==> ()
isFinished() == skip;

sync
per isFinished => (done = true);
--mutex(travel);

thread
--	while true do(
--		travel();
--	);

periodic(50000,100000,40000,0)(travel);

end Train
\end{vdm_al}