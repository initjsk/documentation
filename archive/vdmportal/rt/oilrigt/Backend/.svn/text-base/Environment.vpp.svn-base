\section{Customer}

\begin{vdm_al}
class Environment

types 

public outline = [TransportPlan] * [nat] * nat;
public inline = [TPC`NavigationInput] * [nat] * [nat] * nat;

instance variables
  public static tokenDevices : map nat to TokenDevice := {|->};
private controller : Controller;
private io : IO := new IO();
  private outfileName : seq of char := "";
  protected  outlines : seq of outline := [];
  protected  inlines : seq of inline := [];
  protected  busy : bool := true;
  private runtime : nat := 0;

operations

public Environment : () ==> Environment
Environment()==(
	tokenDevices :=  {0|-> new TokenDevice(0)};
);

public Environment : seq of char ==> Environment
  Environment(fname) ==(
     def mk_ (-,input) = io.freadval[seq of inline](fname) in
   inlines := input;
	outfileName := fname ^ ".result";
);

public addController : Controller ==> ()
addController (cr) == controller := cr;

public addTokenDevice : TokenDevice ==> ()
addTokenDevice(td) ==
	--tokenDevices := td;
	tokenDevices := tokenDevices munion { td.getTokenId() |-> td};

public isFinished : () ==> ()
		isFinished () == skip;

public test : () ==> map nat to TokenDevice
	test () == return tokenDevices;


public stimulate : () ==> ()
  stimulate() ==
  (
  	
		duration(1) (
	
		if len inlines > 0
		then( 
				dcl curtime : nat := time,
				done : bool := false; 
				(
				while not done do(
					def mk_(nav,tid,route_id,t) = hd inlines in
						if (t < time)
						then (
							Logger`write2("ENV Stimulating",threadid,time);
							if ( route_id = nil )
							then (
									tokenDevices(tid).requestTransportPlan(nav);)
							else( controller.inactiveSection(route_id); );
								
							reduceInline();
							done := len inlines = 0;
						)
						else(
							done :=  true;
						)	
					)
				);
			)
			else(
				busy := false;
				)
	);
  );

private isDone : () ==> ()
isDone() == skip;	

private reduceInline : () ==> ()
reduceInline () == 
	(if(len inlines > 0) then
		inlines := tl inlines;
	)
	pre len inlines > 0;

private inputStimuli : () ==> ()
inputStimuli() == 
	(
		duration(1) (
		runtime := runtime + 5000;
		if len inlines > 0
		then (
			stimulate()
			)
		else (
				busy := false;
		);
	);
);

 public respons : [TransportPlan] * [TransportPlan`Route] * nat ==> ()
  respons(plan, route, t) ==
  	(outlines := outlines ^ [mk_(plan,route,t)]);

  public showResults : () ==> ()
  showResults() ==
  def - = io.fwriteval[seq of outline](outfileName,outlines,<start>) in skip;

thread
--while busy do
--(
--	inputStimuli()
--);

periodic(10000,1000,9000,0)(inputStimuli);

sync
--mutex(addTokenDevice);
--mutex(stimulate);
--mutex(reduceInline);
--mutex(respons);
--mutex(showResults);
per isFinished => not busy; --Ensure interleaving in World
--per inputStimuli => runtime < time;

end Environment

\end{vdm_al}
