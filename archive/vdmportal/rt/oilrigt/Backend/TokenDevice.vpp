\section{TokenDevice class}

\begin{vdm_al}

class TokenDevice

instance variables

  private id_token : nat := 1;
  private transportPlan : [TransportPlan] := nil;
  private q_Env_out : Environment;
  private q_APM_out : ActivePlanManager;
  private test : bool := false;


operations
 
 public TokenDevice : nat ==> TokenDevice
  TokenDevice(id) == (id_token := id;);


async public notifyPassenger : TransportPlan * Types`String ==> ()
notifyPassenger(TransPlan, Filler) ==
(
	transportPlan := TransPlan;
	RTLog`RTWrite("TD Notify Passenger",time);
	Logger`write2(transportPlan,id_token,time);
	q_Env_out.respons( transportPlan, nil,time);
	test := true;
);
    

public requestTransportPlan : TPC`NavigationInput ==> ()
  requestTransportPlan(NavInput) ==
(
	RTLog`RTWrite("TDRequestPlan",time);
  	q_APM_out.requestTransportPlan( mk_MessageTypes`REQUESTPLAN(NavInput, self));
);

public getTokenId : () ==> nat
  getTokenId() == return id_token;

private sectionTraveled : () ==> ()
  sectionTraveled() == (transportPlan.sectionTraveled();
)
pre transportPlan.sectionsRemaining() > 0;


public travel : () ==> ()
travel () == skip;
--(
--		onTheRoad();
--		if( transportPlan <> nil and transportPlan.routesRemaining() > 0 ) then(
		--dcl t : TransportPlan`Route := (transportPlan.getNextRoute());
--	routeTraveled();
--	)
--);

public onTheRoad : () ==> ()
onTheRoad () == skip;

public isFinished : () ==> ()
isFinished() == skip;

public setEnv : Environment ==> ()
setEnv(env) == q_Env_out := env;

public setAPM : ActivePlanManager ==> ()
setAPM(apm) == q_APM_out := apm;

public isFin : () ==> ()
isFin() == skip;


sync

--per isFin => (#fin(notifyPassenger) > 0);

--mutex(notifyPassenger);
--mutex(requestTransportPlan);

end TokenDevice

\end{vdm_al}


