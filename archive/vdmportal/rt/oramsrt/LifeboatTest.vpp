\begin{vdm_al}
class LifeboatTest is subclass of TestCase

operations
  protected SetUp: () ==> ()
  SetUp () == skip;

  protected RunTest: () ==> ()
  RunTest () == 
    (
    dcl l1 : Lifeboat := new Lifeboat(2, mk_token(<testboat>));
    AssertTrue(l1.getId() = mk_token(<testboat>));
    AssertTrue(l1.getRemainingCap() = 2);
    l1.disable();
    AssertFalse(l1.getRemainingCap() = 2);
    l1.enable();
    
    l1.addArea(ORAMS`a1.getId());
    AssertTrue(l1.isDedicated());
    l1.addArea(ORAMS`a2.getId());
    AssertFalse(l1.isDedicated());
    AssertTrue(l1.getAreas() = {ORAMS`a1.getId(), ORAMS`a2.getId()});
    l1.removeArea(ORAMS`a1.getId());
    AssertTrue(l1.isDedicated());
    
    l1.addPerson(ORAMS`p1.getId());
    l1.addPerson(ORAMS`p2.getId());
    AssertTrue(l1.getCrew() = {ORAMS`p1.getId(), ORAMS`p2.getId()});
    AssertTrue(l1.getInterCrew({ORAMS`p1.getId()}) = {ORAMS`p1.getId()});
    AssertFalse(l1.getInterCrew({ORAMS`p3.getId()}) = {ORAMS`p1.getId()});
    AssertTrue(l1.getRemainingCap() = 0);
    l1.removePerson(ORAMS`p1.getId());
    AssertTrue(l1.getRemainingCap() = 1);
    AssertFalse(l1.getInterCrew({ORAMS`p1.getId()}) = {ORAMS`p1.getId()});

    );

  protected TearDown: () ==> ()
  TearDown () == skip

end LifeboatTest
\end{vdm_al}