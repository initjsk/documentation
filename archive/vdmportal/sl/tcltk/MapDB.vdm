\begin{vdm_al}
module MapDB

  exports 
    types 
      struct key;
      struct data;
      struct mapdb
    
    functions
      Insert : key * data * mapdb -> mapdb;
      LookUp : key * mapdb -> data;
      Defined : key * mapdb -> bool;
      Remove : key * mapdb -> mapdb

definitions

types
  key = int;
  data = int;
  mapdb = map key to data
 
values 
  init_db : mapdb = {|->}   -- initialize db to an empty map

functions

  Insert : key * data * mapdb -> mapdb
  Insert(k, d, db) == db ++ {k |-> d}
  pre not k in set dom db;
 
  LookUp : key * mapdb -> data
  LookUp(k, db) == db(k)
  pre k in set dom db;

  Defined : key * mapdb -> bool
  Defined(k, db) == k in set dom db;

  Remove : key * mapdb -> mapdb
  Remove(k, db) == {k} <-: db
  pre Defined(k, db)
end MapDB
 
\end{vdm_al}
