\section{Adding operations to the boiler}\label{PHYSICAL_BOILER2}

In this section, the behaviour of the boiler will be further modeled as a state machine.
The state variables are the same as in the module {\it BOILER\_STATE}
but operations are added to that state. 

\subsection{Pumps and Valve change}

Before defining this state machine, functions must be provided for the evolution of the pump and valve states.
In the physical boiler every possible evolution of the state variables is
allowed, in particular the pumps may be switched on or off and 
the valve state
may be modified. These evolutions may both result from actions from 
the controller or defects of the units.


\vspace{0.5cm}

\begin{vdm_al}
module REACHABLE_STATES

imports from BOILER_TYPES all

definitions
\end{vdm_al}


The behaviour of the pumps is constrained. As shown in figure
\ref{pump_modes_picture}, a pump may only be in one of
three states: $Stopped$, $Starting$, and $Pumping$. The allowed transitions
are  $Stopped$ to $Starting$, $Starting$ to $Pumping$, $Starting$ to
$Stopped$ and $Pumping$ to $Stopped$. The transition from $Starting$ to
$Pumping$ may take up to 5 seconds ($Pump-starting-time$). Actually, nothing
prevents the pump from instantaneously reaching state $Pumping$. For example,
it is reasonable to think that a "stop and pump" sequence, where the pump is
only stopped for a very small amount of time will not allow the pressure to
diminish in the pump and that it will restart instantaneously. Our
interpretation of the original statement is thus that the pump is guaranteed to
reach state $pumping$ within 5 seconds, but may reach it before this time is
elapsed. 
\begin{figure}[htb]
\hspace{4cm}{\epsfbox{../pictures/pump_modes_picture.eps}}
\caption{The state diagram for the pumps}\label{pump_modes_picture}
\end{figure}

Function
$reachable-pump-states$ computes the set of
states that can be reached in $dt$ from state $p$:     

\begin{vdm_al}
functions

reachable_pump_states : BOILER_TYPES`pump_state * BOILER_TYPES`duration 
	+> set of BOILER_TYPES`pump_state
reachable_pump_states(p,dt) ==
   {<Stopped>,<Starting>,<Pumping>}
 ;
\end{vdm_al}

All states  may always be reached instantaneously. 
Although the transition from $Starting$ to $Pumping$
may take some time, if the pump is $Starting$ and no information is available
about the time it went into this state, it may reach $Pumping$ at any time!

The valve may be opened or closed at arbitrary times, so its behaviour
is not constrained. 



\begin{vdm_al}

reachable_valve_states : BOILER_TYPES`valve_state  * BOILER_TYPES`duration 
-> set of BOILER_TYPES`valve_state

reachable_valve_states(ve, dt) == {<Opened>, <Closed>} 

end REACHABLE_STATES

\end{vdm_al}

\vspace{0.5cm}

It may be checked easily that these functions verify the assumptions stated in module $PHYSICAL-LAWS$. 


\subsection{The Physical Boiler}
The boiler state machine imports the types defined up to now and instantiates
the physical laws with the functions of $REACHABLE-STATES$.

\vspace{0.5cm}

\begin{vdm_al}
module PHYSICAL_BOILER

imports from BOILER_TYPES all,
        from REACHABLE_STATES 
		functions
reachable_pump_states renamed reachable_pump_states ;
reachable_valve_states renamed reachable_valve_states

instantiations

NON_CONTROLLED 
as 
PHYSICAL_LAWS

   	(

reachable_pump_states 

	-> reachable_pump_states

	,

    reachable_valve_states 

		->  reachable_valve_states

) 

   all

definitions
\end{vdm_al}



\subsubsection{The state variables}

Since the modular constructs of VDM do not allow to export variables, but only constants, types, or functions, we need
to redeclare the variables of $BOILER-STATE$.

\begin{vdm_al}

state BOILER of
	qe : BOILER_TYPES`water_level
	se : BOILER_TYPES`steam_outcome
	pe : BOILER_TYPES`pump_to_state_map
	ve : BOILER_TYPES`valve_state
	he : BOILER_TYPES`watts
	te : BOILER_TYPES`seconds
	mode : BOILER_TYPES`boiler_mode
inv mk_BOILER(qe, se, pe, ve, he, te, mode) == 
mode=<Running> or mode=<Init> 
=> 
( qe > BOILER_TYPES`M1 and qe < BOILER_TYPES`M2)
end	
\end{vdm_al}


\subsubsection{Mode evolution}

Before stating the operations on these state variables, it is necessary to
express the logical laws that rule the evolution of the mode.
The evolution of the mode is not arbitrary but must correspond to figure
\ref{phys_mode_picture}. For example, $Explosion$ is a
mode that
can be reached from any other mode but may never be left.

Several assumptions are made here:
\begin{enumerate}
\item We do not consider  the possibility to restart the boiler. Once in
$Stopped$ mode, it is not possible to go back to $Init$ mode. This is justified
by the fact that this process is not specified in the problem statement.
Another view of this choice is to consider that the specification corresponds
to one complete round in the life of the boiler; restarting the boiler is thus
to restart the whole system.
\item $Explosion$ can be reached in $Stopped$ mode: 
the engineers in charge of saving the boiler while in $Stopped$ mode may fail.
\end{enumerate}


\begin{figure}[htb]
\hspace{4cm}{\epsfbox{../pictures/phys_mode_picture.eps}}
\caption{The evolution of the mode}\label{phys_mode_picture}
\end{figure}

This evolution is captured in the following function which expresses the set of
modes that can be reached from an initial configuration of the state variables:

\begin{vdm_al}
functions
reachable_modes : BOILER_TYPES`boiler_mode  *
                BOILER_TYPES`duration *
                BOILER_TYPES`water_level *
                BOILER_TYPES`steam_outcome *
                BOILER_TYPES`pump_to_state_map *
                BOILER_TYPES`valve_state
                +> set of BOILER_TYPES`boiler_mode
reachable_modes(m, dt, qe, se, pe, ve) ==
 cases m :
        <Init> -> {<Init>, <Running>, <Stopped>, <Explosion>} ,
        <Running> -> {<Running>, <Stopped>, <Explosion>},
        <Stopped> -> {<Stopped>, <Explosion>},
        <Explosion> -> {<Explosion>}
  end ;


\end{vdm_al}

This $reachable-modes$ function is then combined with $NON-CONTROLLED`evolution$ to state
that:

\begin{itemize}
\item the new physical mode is one of the reachable modes;
\item the physical variables are bounded according to the physical and logical laws.
\end{itemize}

\begin{vdm_al}
boiler_evolution   :
          BOILER_TYPES`water_level*
         BOILER_TYPES`steam_outcome*
         BOILER_TYPES`pump_to_state_map*
         BOILER_TYPES`valve_state*
	BOILER_TYPES`boiler_mode*
         BOILER_TYPES`duration*
         BOILER_TYPES`water_level *
         BOILER_TYPES`steam_outcome *
        BOILER_TYPES`pump_to_state_map *
        BOILER_TYPES`valve_state*
        BOILER_TYPES`boiler_mode  +> bool

boiler_evolution (qe , se,  pe,  ve,  mode, dt,  qn,  sn,  pn,  vn, mn) ==
 mn in set reachable_modes(mode, dt, qe, se, pe, ve)
        and (mn = <Init> or mn = <Running>
        => NON_CONTROLLED`evolution(qe, se, pe , ve,dt, qn, sn, pn, vn))

\end{vdm_al}

\subsubsection{Operations}

A single operation is provided which specifies the evolution of the system over
a duration $dt$. This specification corresponds thus to an abstract machine
with a single button (operation). Each time the button is pressed, the time
evolves by an arbitrary duration $dt$ and the state variables are updated,
according to the physical laws.
\begin{vdm_al}
operations

Advance_time ()
ext wr  qe : BOILER_TYPES`water_level
   wr  se : BOILER_TYPES`steam_outcome
   wr  pe : BOILER_TYPES`pump_to_state_map
   wr  ve : BOILER_TYPES`valve_state
   wr  he : BOILER_TYPES`watts
   wr  te : BOILER_TYPES`seconds
   wr  mode : BOILER_TYPES`boiler_mode
pre true
post    let dt : BOILER_TYPES`duration in
	te=te~+dt and boiler_evolution(qe~, se~, pe~ , ve~,   mode~, dt, qe, se, pe, ve, mode)

end PHYSICAL_BOILER
\end{vdm_al}

\vspace{0.5cm}

The post-condition of the {\it Advance\_time} operation  states that
the real time has increased by an arbitrary $dt$  and that the boiler variables
have evolved. 
VDM does not allow to specify what happens during the action, only  the initial
and final states are described by the pre- and post-conditions. But since $dt$
is arbitrary, this provides a good approximation of the behaviour of the
steamboiler. 

\vspace{0.5cm}

Nevertheless this model of the boiler includes several behaviours that the
actual boiler does not exhibit. In particular, the transitions from $Init$ or
$Running$ to 
$Explosion$ may not take place arbitrarily. It is even guaranteed that no
explosion may take place if the water level is between $M1$ and
$M2$.\footnote{At least, the developer of the controller for the boiler may
rely on this assumption!}.




