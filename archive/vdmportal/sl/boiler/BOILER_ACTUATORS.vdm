\subsection{Combining the boiler with actuators}\label{BOILER_ACTUATORS}

$BOILER-ACTUATORS$ expresses the result of actions on the actuators on the
state of the boiler. The functions which appear in this module mainly express
state machines which model the response of the boiler to the actions.


\begin{vdm_al}
module  BOILER_ACTUATORS
imports 	from BOILER_TYPES all, 
		from ACTUATORS_TYPES all 

exports all

definitions

functions

\end{vdm_al}
\subsubsection{Emergency stop action}

The emergency stop action usually switches the boiler to $Stopped$ mode, except
if it already was in $Explosion$ mode. The $Nothing$ action leaves the mode as
it is.

\begin{vdm_al}

action_on_mode :  ACTUATORS_TYPES`emergency_action *
		BOILER_TYPES`boiler_mode
                        -> BOILER_TYPES`boiler_mode

action_on_mode (ea, mode) == 
cases mk_(mode, ea) :
	mk_(<Init>, <Stop>) -> <Stopped>,
	mk_(<Running>, <Stop>) -> <Stopped>,
	mk_(<Stopped>, <Stop>) -> <Stopped>,
	mk_(<Explosion>, <Stop>) -> <Explosion>,
	mk_(<Init>, <Nothing>) -> <Init>,
	mk_(<Running>, <Nothing>) -> <Running>,
	mk_(<Stopped>, <Nothing>) -> <Stopped>,
	mk_(<Explosion>, <Nothing>) -> <Explosion>
end ; 

\end{vdm_al}
\subsubsection{Valve actions}

The $Open$ action always opens the valve; the $Close$ action always closes the
valve; the $Nothing$ action leaves the valve as it is.
\begin{vdm_al}

action_on_valve :  ACTUATORS_TYPES`open_close_action *
			BOILER_TYPES`valve_state
 		->  BOILER_TYPES`valve_state

action_on_valve(va, ve) ==
cases mk_(ve, va) :
        mk_(<Closed>, <Open>) -> <Opened>,
        mk_(<Opened>, <Open>) -> <Opened>,
	mk_(<Closed>, <Close>) -> <Closed>,
        mk_(<Opened>, <Close>) -> <Closed>,
        mk_(<Closed>, <Nothing>) -> <Closed>,
        mk_(<Opened>, <Nothing>) -> <Opened>
end ;

\end{vdm_al}
\subsubsection{Pump actions}

The result of actions on pumps is first expressed for a single pump, then for
the set of pumps.

The $Close$ action always leads the pump to state $Stopped$; the $Open$ action
leads the pump to state $Starting$, except if it was already pumping (in this
case the state is unchanged)
the $Nothing$ action leaves the pump as it is.
\begin{vdm_al}
action_on_one_pump :   ACTUATORS_TYPES`open_close_action *
		      BOILER_TYPES`pump_state 
	->  BOILER_TYPES`pump_state

action_on_one_pump (pa, pe) ==
cases mk_(pe, pa) :
   mk_(<Stopped>, <Close>) -> <Stopped>,
   mk_(<Starting>, <Close>) -> <Stopped>,
   mk_(<Pumping>, <Close>) -> <Stopped>,
   mk_(<Stopped>, <Open>) -> <Starting>,
   mk_(<Starting>, <Open>) -> <Starting>,
   mk_(<Pumping>, <Open>) -> <Pumping>,
   mk_(<Stopped>, <Nothing>) -> <Stopped>,
   mk_(<Starting>, <Nothing>) -> <Starting>,
   mk_(<Pumping>, <Nothing>) -> <Pumping>
end ;

action_on_pumps :  ACTUATORS_TYPES` pump_to_action_map *
		BOILER_TYPES`pump_to_state_map 
-> BOILER_TYPES`pump_to_state_map

action_on_pumps (pa, pe) ==
{ i |-> s |  i : BOILER_TYPES`pump_nb, s :BOILER_TYPES`pump_state
& s=action_on_one_pump (pa(i), pe(i))} ;

\end{vdm_al}
\subsubsection{Consistency between the boiler and the actuators}


$boiler-actuators$ is a Boolean function that establishes the consistency
between some initial state of the boiler, 
the actions performed on the actuators and the resulting boiler state, at the
time when the action was performed.


\begin{vdm_al}

boiler_actuators :	BOILER_TYPES`pump_to_state_map *
			BOILER_TYPES`valve_state *
			BOILER_TYPES`boiler_mode *
 			ACTUATORS_TYPES` pump_to_action_map *
        		ACTUATORS_TYPES`open_close_action *
			ACTUATORS_TYPES`emergency_action *
			 BOILER_TYPES`pump_to_state_map *
			BOILER_TYPES`valve_state *
			BOILER_TYPES`boiler_mode
			-> bool

boiler_actuators(pi,vi,mi,pa, va, ea, pe, ve, mode)
==
pe=action_on_pumps(pa, pi) and ve=action_on_valve(va, vi) and mode=action_on_mode(ea, mi)

end   BOILER_ACTUATORS
\end{vdm_al}
