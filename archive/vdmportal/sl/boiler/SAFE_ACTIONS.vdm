\section{A controller specification}\label{CONTROLLER}

Now that actuators and captors have been modeled, a new specification of the
controller will be presented. An important characteristic of the controller is
that it runs every five seconds and computes  actions for the actuators to be
executed before the next cycle takes place. It thus relies on the assumption
that the whole reaction is ended before the next cycle. The next module
introduces elements of a sampling period. 


\subsection{The sampling clock}\label{TIME}

\begin{vdm_al}
module TIME
imports from BOILER_TYPES all
exports all

definitions
\end{vdm_al}

Two constants are defined in this module:

\begin{itemize}
\item $Sampling-period$ defines the periodicity of the controller, i.e.\ five
seconds;
\item $Reaction-time$ defines an upper bound on the time needed by the
controller to get the captor values, compute a reaction, and transmit this
reaction through the actuators; here, we do not have any estimation on this
time and it has been {\it arbitrarily} defined as 0.1 seconds, which
corresponds to an order of magnitude under the sampling period; it is obvious
that in a realistic application, this value should be the result of a
preliminary study.
\end{itemize}

An important hypothesis is that the $Reaction-time$ is always smaller than the $Sampling-period$. 
\begin{vdm_al}
types

time_const :: sp : BOILER_TYPES`duration
		  rt : BOILER_TYPES`duration
inv mk_time_const(sp,rt) == rt < sp
\end{vdm_al}

%\begin{itemize}
%\item The controller is invocated every sampling date.
%\item Change of the pumps states, the valve state and mode  state will
% be now controlled. Deciding changes take some time (Reaction time).
%Thus a precondition will be needed : we have the time to decide.
%\item change of the pumps states, the valve state and mode  state take place
%only every $[ts .. ts + Reaction_time]$, where $ts$ is a sampling time. 
%\end{itemize}

\begin{vdm_al}
values 
	mk_time_const(Sampling_period,Reaction_time) : time_const
	= mk_time_const(5,0.1)

\end{vdm_al}


Based on these constants, several functions are defined on the real time.
$Latest-sampling-time$ returns for a given instant of time the previous instant
where the sampling activity took place. Actually, the origin of time has been
conveniently defined to be one of the sampling instants, so that sampling
instants are multiples of the sampling period.
\begin{vdm_al}

functions

  Latest_sampling_time : BOILER_TYPES`seconds +> BOILER_TYPES`seconds
  Latest_sampling_time (r) ==
    if r >= 0 then floor(r / Sampling_period) * Sampling_period
    else floor((r / Sampling_period) - 1) * Sampling_period
  ;
\end{vdm_al}

A boolean function is then defined to test if an instant of time is a sampling
instant. 
\begin{vdm_al}

 Is_a_sampling_time : BOILER_TYPES`seconds +> bool
  Is_a_sampling_time (t) ==
   Latest_sampling_time(t)=t ;
\end{vdm_al}

Finally, a function of time provides the next sampling instant.

\begin{vdm_al}


 Next_sampling_time : BOILER_TYPES`seconds +> BOILER_TYPES`seconds

 Next_sampling_time(t) ==
 Latest_sampling_time(t) + Sampling_period

end TIME
\end{vdm_al}

\subsection{Pumps and valve evolution}

One of the characteristics of the controller is that it spends most of its time
doing nothing. Actually, it may act on the boiler once every five seconds. It
is therefore interesting to instantiate the $PHYSICAL-LAWS$ module to this kind
of behaviour. The $NO-CHANGE$ module restricts the evolutions of the pump and
valve state taking into a context where no action is performed on these
actuators.


\vspace{0.5cm}

\begin{vdm_al}
module NO_CHANGE

imports from BOILER_TYPES all

definitions

\end{vdm_al}

\vspace{0.5cm}

%$reachable-pump-states$ is a refinement of the function defined in
%$REACHABLE-STATES$. 
Figure \ref{pump_modes2_picture} shows the possible
transitions in this context. Actually, the only possible transition is
$Starting$ to $Pumping$.


\begin{figure}[htb]
\hspace{4cm}{\epsfbox{../pictures/pump_modes2_picture.eps}}
\caption{The state diagram for the pumps, when no action takes place}\label{pump_modes2_picture}
\end{figure}

\vspace{0.5cm}

\begin{vdm_al}
functions

reachable_pump_states : BOILER_TYPES`pump_state * BOILER_TYPES`duration
 +> set of BOILER_TYPES`pump_state
reachable_pump_states(s,dt) ==
   if s=<Starting> then  if dt > BOILER_TYPES`Pump_starting_time 
			then {<Pumping>} else {<Starting>,<Pumping>}
   else {s} ;
\end{vdm_al}
This function is a refinement of the one presented in $REACHABLE-STATES$
because the sets of resulting states are always included in the ones of the
abstract function.

\vspace{0.5cm}

The next function  corresponds to the behaviour of the valve. Obviously, when
no action is performed, the state of the valve does not change. 
\begin{vdm_al}
reachable_valve_states : BOILER_TYPES`valve_state * BOILER_TYPES`duration
                +> set of BOILER_TYPES`valve_state

reachable_valve_states(ve, dt) == {ve} 


end NO_CHANGE

\end{vdm_al}

\vspace{0.5cm}

Once again, this function is a refinement of the corresponding function in
$REACHABLE-STATES$.

\subsection{Safe actions}\label{SAFE-ACTIONS}

The next module will specify the notion of ``safe action''. A safe action is a
configuration of the actuators such that the boiler will remain safe for the
next sampling period.
First, the necessary information is imported. It includes the instantiation of
the physical laws to the $NO-CHANGE$ module and the subsequent instantiation of
$SAFE-TIME$ to this evolution without actions.

\begin{vdm_al}
module SAFE_ACTIONS
imports 	from BOILER_TYPES all,
		from TIME all,
		from CAPTORS_TYPES all,
		from ACTUATORS_TYPES all,
		from BOILER_ACTUATORS all ,
		from NO_CHANGE functions
	reachable_pump_states renamed nc_reachable_pump_states;
	reachable_valve_states renamed nc_reachable_valve_states


instantiations

CONTROLLED as PHYSICAL_LAWS
   (reachable_pump_states -> nc_reachable_pump_states,
    reachable_valve_states -> nc_reachable_valve_states) 
functions evolution renamed evolution_without_action ,

SAFE_TIME as SAFE_TIME
   (evolution -> evolution_without_action) all


exports all

definitions


-- types
-- observable_values = BOILER_TYPES`water_level * BOILER_TYPES`steam_outcome *
-- BOILER_TYPES`pump_to_state_map  
-- state SAFE_ACTIONS of
   -- ve : BOILER_TYPES`valve_state
   -- mode : BOILER_TYPES`boiler_mode
-- end

functions 

\end{vdm_al}
First, new definitions are introduced for the notion of safe time. They
correspond to the notion of safe time when an action takes place before the 
reaction time  elapsed. 
\begin{vdm_al}

unsafe_time_with_action :
         BOILER_TYPES`water_level 
*
         BOILER_TYPES`pump_to_state_map 
*
         BOILER_TYPES`steam_outcome 
*
         BOILER_TYPES`valve_state
*
         ACTUATORS_TYPES`pump_to_action_map 
*
         ACTUATORS_TYPES`open_close_action 
*
         BOILER_TYPES`duration +>  bool

unsafe_time_with_action ( qe , pe,  se,  ve,  pa,  va,  dt)  
== 
exists date : BOILER_TYPES`duration & date <= TIME`Reaction_time and date <= dt
and
(SAFE_TIME`unsafe_time(qe, pe, se, ve, date) or
exists
        qn : BOILER_TYPES`water_level ,
        sn : BOILER_TYPES`steam_outcome ,
        pn : BOILER_TYPES`pump_to_state_map,
        vn : BOILER_TYPES`valve_state,
        pi : BOILER_TYPES`pump_to_state_map,
        vi : BOILER_TYPES`valve_state

&
   evolution_without_action(qe, se, pe, ve, date,qn, sn, pn, vn)
  and pi=BOILER_ACTUATORS`action_on_pumps(pa, pn) and
 vi=BOILER_ACTUATORS`action_on_valve(va, vn) and
   SAFE_TIME`unsafe_time(qn, pi, sn, vi, dt-date)  )
;
\end{vdm_al}
The function takes three kinds of arguments:

\begin{itemize}
\item some values for the initial state of the boiler ($qe$, $pe$, $se$, $ve$);
\item the actions on the actuators ($pa$, $va$);
\item a duration $dt$.
\end{itemize}

This definition involves three instants in time:

\begin{itemize}
\item the initial time which corresponds to the values $qe$, $pe$, $se$, $ve$
of the boiler variables;
\item some intermediate time $date$ where the actions take place; 
this intermediate time is less than the reaction time and less than $dt$.
\item the final time, $dt$ after the initial time.
\end{itemize}

The underlying assumption is that there is some uncertainty on the time where
the reaction takes place: it must be between 0 and $Reaction-time$.

\vspace{0.5cm}


Two states correspond to time $date$. The state before the actions take place
($qn$, $sn$, $pn$, $vn$)
and the state after ($qn$, $sn$, $pi$, $vi$). They differ by the new state of
the pumps  and the valve and are linked by the $action-on-pumps$ and
$action-on-valve$ functions to the values of the actuators ($pa$, $va$). 
The state before the actions took place must be consistent with the initial
state and the $date$ through the $evolution$ function.
The final instant $dt$ is an unsafe time if either the time ($date$) when the actions took place was
already unsafe, or if the time ($dt \; \-- \; date$) elapsed since the action took place is unsafe. 
It is interesting to notice that no action takes place within both periods of
time ($date$ and $dt \; \-- \; date$).

\vspace{0.5cm}

The next function is a copy of the $first-unsafe-time$ function where the
actions are taken into account into the computation of the safe time.
\begin{vdm_al}

first_unsafe_time_with_action (
    	qe : BOILER_TYPES`water_level 
,
        se : BOILER_TYPES`steam_outcome 
,
        pe : BOILER_TYPES`pump_to_state_map 
,
        ve : BOILER_TYPES`valve_state
,
	pa : ACTUATORS_TYPES`pump_to_action_map 
,
	va : ACTUATORS_TYPES`open_close_action )
	dt :  BOILER_TYPES`duration

pre true

 post         
(unsafe_time_with_action(qe,pe, se,ve,pa, va, dt) or 
dt = SAFE_TIME`Nearly_infinite_time)
         and (forall t : BOILER_TYPES`duration & t < dt => not unsafe_time_with_action(qe,pe,se, ve, pa, va, t))
;
\end{vdm_al}

Finally, the notion of safe action may be defined. 
\begin{itemize}
\item
Emergency stop is always a safe action. 
\item Otherwise,
a safe action is a configuration of the actuators (pumps and valve) that
ensures a safe time larger than the sampling 
period added to the reaction time. In other words, a safe action is an action
that allows to reach  the next cycle. 
\end{itemize}

A pre-condition for the action to be safe is that the current safe time is
larger than the reaction time; otherwise the action could take place too late.

\begin{vdm_al}
safe_actions :  	BOILER_TYPES`water_level  *
            	 	BOILER_TYPES`steam_outcome  *
       	    		BOILER_TYPES`pump_to_state_map *
 BOILER_TYPES`valve_state *
 BOILER_TYPES`boiler_mode *

	    	 ACTUATORS_TYPES`pump_to_action_map *
        	 	ACTUATORS_TYPES`emergency_action *
        	 	ACTUATORS_TYPES`open_close_action
+> bool

safe_actions (qe,se,pe,  ve, mode, pa, ea, va) ==

 (BOILER_ACTUATORS`action_on_mode(ea, mode) = <Stopped>
  or
  first_unsafe_time_with_action(qe, se, pe, ve,  pa, va)
       > TIME`Sampling_period + TIME`Reaction_time)

pre
(mode=<Running> or mode=<Init>)
and
SAFE_TIME`first_unsafe_time(qe, pe, se, ve) > TIME`Reaction_time


end SAFE_ACTIONS
\end{vdm_al}


