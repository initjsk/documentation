\section { Enforcing the access constraints on captors and actuators }

$CONTROLLED-BOILER$ does not enforce the access discipline to the variables of
the boiler, the captors and actuators. An implementation of $React$ which
directly accesses the variables of the boiler (e.g.\ $qe := N1$) is a valid
refinement of the specification. Therefore, the next module will enforce the
access modes to the variables by a decomposition of $React$ into three actions.
This module is a refinement of $CONTROLLED-BOILER$ if the specifications of
$Wait$, $Safe-advance-time$, $Unsafe-advance-time$, and $Advance-time$ are
added to it without modification.

The principle of the refinement is to split the $React$ activity into a
sequence of three operations: $Get-captors$, $Compute-reaction$, and
$Put-actuators$. Each of these operations will enforce the mode of access of
the controller to its interface:

\begin{itemize}
\item $Get-captors$  returns the values of the captors: it is the only way
for the controller to access the captors;
\item $Put-actuators$  takes the reaction of the controller as input values
and subsequently modify the actuator variables; as a result the controller 
has no read access to the actuators;
\item $Compute-reaction$ is the actual controller operation; its access is
restricted to its internal variables; its communication with the captors and
the actuators must take place through its input/output variables.
\end{itemize}

Finally,  the evolution of the boiler during the computation of the
reaction is modeled by the $Evolve$ function.
The list of imported modules is the same  as for $CONTROLLED-BOILER$. Moreover,
the $boiler-evolution-without-action$ is imported from $CONTROLLED-BOILER$.

\vspace{0.5cm}

\begin{vdm_al}
module REACTION

imports from BOILER_TYPES all ,
	from CAPTORS_TYPES all ,
	from ACTUATORS_TYPES all ,
	from TIME all,
-- Invariants :
	from BOILER_CAPTORS all,
	from BOILER_ACTUATORS all,
-- Operations :
	from SAFE_ACTIONS all,
	from SAFER_BOILER functions reachable_modes,
	from NO_CHANGE functions
reachable_pump_states renamed nc_reachable_pump_states;
reachable_valve_states renamed nc_reachable_valve_states,
	from CONTROLLED_BOILER
	 functions boiler_evolution_without_action renamed 
		boiler_evolution_without_action
instantiations

CONTROLLED as PHYSICAL_LAWS
   (reachable_pump_states -> nc_reachable_pump_states,
    reachable_valve_states -> nc_reachable_valve_states) 
functions evolution renamed evolution_without_action,

SAFE_TIME as SAFE_TIME
   (evolution -> evolution_without_action) 
functions first_unsafe_time renamed first_unsafe_time_without_action


exports all

definitions
\end{vdm_al}

\vspace{0.5cm}

Several type definitions are introduced to shorten the signature of functions
in the rest of the module.

\vspace{0.5cm}

\begin{vdm_al}
types

observable_values = BOILER_TYPES`water_level *
        BOILER_TYPES`steam_outcome * BOILER_TYPES`pump_to_state_map ;

modifiable_values =   BOILER_TYPES`pump_to_state_map
        *  BOILER_TYPES`boiler_mode
	* BOILER_TYPES`valve_state
;


captors_type =   BOILER_TYPES`water_level *
          BOILER_TYPES`steam_outcome *
         CAPTORS_TYPES`pump_to_mode_map *
         CAPTORS_TYPES`pump_to_flow_map ;

actions_type =   ACTUATORS_TYPES`pump_to_action_map *
        ACTUATORS_TYPES`emergency_action *  ACTUATORS_TYPES`open_close_action ;

\end{vdm_al}
\subsection{Splitting the reaction time}

Since three operations are performed during the reaction, there should be an
allocation of the reaction time between these operations. Type $split-time$
defines a tuple of three durations, corresponding to these three activities.
The associated invariant states that this tuple satisfies the $Reaction-time$
constraint in the sense that the sum of its components is less than the
constant.
\begin{vdm_al}

split_time :: t1 :BOILER_TYPES`duration
	      t2 :BOILER_TYPES`duration
	      t3: BOILER_TYPES`duration 
inv mk_split_time(t1, t2, t3) ==  t1+t2+t3 <= TIME`Reaction_time
\end{vdm_al}

Three  constants are then defined and linked by this type: $Acquisition-time$,
$Computation-time$, and $Action-time$. Since the reaction time was  arbitrary,
these constants have been defined similarly and should be considered more
carefully by experts.
\begin{vdm_al}

values

mk_split_time(Acquisition_time, Computation_time, Action_time) : split_time
 = mk_split_time(0.033, 0.033, 0.033)
\end{vdm_al}
\subsection{The state variables}

The state variables of this module include the variables of $CONTROLLED-BOIlER$
but also add two internal variables of the controller: $local-ve$ and
$local-mode$. Actually, it appears that the controller has no captor to report
on the valve status and on the current physical mode of the boiler. The only
way for the controller to get access to this information is to assume some
initial values (the valve is closed and the mode is $Init$), to store these
into these internal variables, and to update these variables when actions are
performed.

The invariant and init conditions are not modified, except for the
specification of the assumed initial values of the internal variables.

%The invariant and init conditions are modified to take these internal
%variables into account:
%
%\begin{itemize}
%\item The invariant constrains the $local=ve$ to store the state of the valve.
%FAUX a ce niveau de granularite

\begin{vdm_al}
  

state REACTION of
-- The physical boiler state
        qe : BOILER_TYPES`water_level
        se : BOILER_TYPES`steam_outcome
        pe :  BOILER_TYPES`pump_to_state_map
        ve : BOILER_TYPES`valve_state
        he : BOILER_TYPES`watts
        te : BOILER_TYPES`seconds
        mode :  BOILER_TYPES`boiler_mode
-- Captors state
	qc :   BOILER_TYPES`water_level
        sc :   BOILER_TYPES`steam_outcome
        p_mode : CAPTORS_TYPES`pump_to_mode_map
        p_flow :  CAPTORS_TYPES`pump_to_flow_map
-- Actuators state
     	pa :  ACTUATORS_TYPES`pump_to_action_map
        ea : ACTUATORS_TYPES`emergency_action
        va : ACTUATORS_TYPES`open_close_action
-- Controller state 
	local_ve : BOILER_TYPES`valve_state
	local_mode : BOILER_TYPES`boiler_mode
inv mk_REACTION(qe, se, pe, ve, he, te, mode, qc,  sc,  p_mode,  p_flow, pa, ea,
va, local_ve, local_mode) == 
(mode=<Running> or mode=<Init> => 
(qe>BOILER_TYPES`M1 and qe<BOILER_TYPES`M2)
and
(TIME`Is_a_sampling_time(te) 
=>
BOILER_CAPTORS`boiler_captors(qe,qc,se,sc,pe,p_mode, p_flow))
and
(exists pi :  BOILER_TYPES`pump_to_state_map,
vi : BOILER_TYPES`valve_state,
mi : BOILER_TYPES`boiler_mode
&
BOILER_ACTUATORS`boiler_actuators(pi, vi, mi,pa, va, ea, pe, ve, mode)))
-- and ((local_mode=<Init> or local_mode=<Running>) and local_ve=ve)



init
mk_REACTION(qe, se, pe, ve, he, te, mode, qc,  sc,  p_mode,  p_flow, pa , ea, 
va, local_ve, local_mode) ==
local_mode = mode and local_ve = <Closed> and 
(mode=<Running> or mode=<Init> =>
 TIME`Is_a_sampling_time(te) and
first_unsafe_time_without_action(qe, pe,se,ve) > TIME`Reaction_time)
end
\end{vdm_al}
\subsection{Functions}

The $safe-actions$ function defined in module $SAFE-ACTIONS$ states whether several
actions on the actuators are safe with respect to some initial state of the
boiler. Here, the controller will no longer have access to the state of the
boiler, but only to the captors information. Therefore,
$safe-actions-from-captors$ states the relation between captor values and
actuator values to ensure safe actions. It first deduces the state of the
boiler from the captors and then calls $SAFE-ACTIONS$ from this reconstructed
state.

\vspace{0.5cm}

\begin{vdm_al}

functions

safe_actions_from_captors :
 BOILER_TYPES`water_level*
 BOILER_TYPES`steam_outcome*
 CAPTORS_TYPES`pump_to_mode_map*
  CAPTORS_TYPES`pump_to_flow_map *
 BOILER_TYPES`valve_state*
 BOILER_TYPES`boiler_mode*
 ACTUATORS_TYPES`pump_to_action_map *
      ACTUATORS_TYPES`emergency_action *
         ACTUATORS_TYPES`open_close_action

+> bool


safe_actions_from_captors (qc,  sc,  p_mode,  p_flow , local_ve, local_mode, pa, ea, va) == 

let mk_(qe, se, pe) : observable_values
be st BOILER_CAPTORS`boiler_captors(qe,qc,se,sc,pe,p_mode,p_flow)
   in
SAFE_ACTIONS`safe_actions(qe, se, pe, local_ve, local_mode, pa, ea, va)

pre true
\end{vdm_al}
Actually, this function relies on the implicit assumption that there is a one
to one correspondence between captors and boiler state, which is the case here.
When failures are considered, the captor values correspond to a set of possible
boiler states and the actions should be safe for every element of this set.


\subsection{Operations}


The operations presented in this module only refine $React$. Four operations
are proposed:

\begin{itemize}
\item $Get-captors$ and $Put-actuators$ model the interface between the
controller and the boiler;
\item $Compute-reaction$ is the specification of the controller under
development; 
\item $Evolve$ models the evolution of the boiler while the computation of the
reaction takes place.
\end{itemize}

Finally, these operations are grouped in $React$ which provides a
refinement of the corresponding operation in $CONTROLLED-BOILER$.

\paragraph{Captors.}
The $Get-captors$ operation returns the information stored in the captors
variables. 
Since it takes some $Acquisition-time$ to perform the operation, the operation
also affects the boiler state. This operation models its evolution while the operation takes place.
\begin{vdm_al}

operations


Get_captors  ()  r :  captors_type

ext
wr qe : BOILER_TYPES`water_level
wr        se : BOILER_TYPES`steam_outcome
wr        pe :  BOILER_TYPES`pump_to_state_map
wr        ve : BOILER_TYPES`valve_state
wr        he : BOILER_TYPES`watts
wr        te : BOILER_TYPES`seconds
wr        mode :  BOILER_TYPES`boiler_mode
-- Captors state
rd        qc :   BOILER_TYPES`water_level
rd        sc :   BOILER_TYPES`steam_outcome
rd        p_mode : CAPTORS_TYPES`pump_to_mode_map
rd        p_flow :  CAPTORS_TYPES`pump_to_flow_map

pre 
(mode=<Running> or mode=<Init>) 
-- Pourquoi? c'est garanti plus bas -- and TIME`Is_a_sampling_time(te) 
and first_unsafe_time_without_action(qe, pe, se, ve) > Acquisition_time
post
r=mk_(qc, sc, p_mode,p_flow)
and
let dt : BOILER_TYPES`duration be st dt <= Acquisition_time and dt >0
in
te=te~+ dt and
boiler_evolution_without_action(qe~, se~, pe~ , ve~, mode~, dt, qe, se, pe, ve, mode)

; 
\end{vdm_al}
The pre-condition ensures that the operation takes place in mode $Init$ or
$Running$, since nothing is guaranteed about the access to the captors in the
other modes. It also ensures that the boiler is safe during the operation.
%%Finally, it states that this operation is only performed at the sampling
%instants, which is an assumption of $CONTROLLED-BOILER$.

The post-condition states that the result is equal to the captors values, and
that the boiler has evolved, without action, during the operation. It also
states that $Acquisition-time$ is a maximal bound on the duration of the
action.


\paragraph{Actuators.} $Put-actuators$ is the dual operation to $Get-captors$.
It modifies the actuators variables according to its input parameters. The
evolution of the boiler takes place during the operation. The
action of the actuators on the state is supposed to take place at
the final instant of the operation.

\begin{vdm_al}
Put_actuators(actions : actions_type)
ext
wr qe : BOILER_TYPES`water_level
wr        se : BOILER_TYPES`steam_outcome
wr        pe :  BOILER_TYPES`pump_to_state_map
wr        ve : BOILER_TYPES`valve_state
wr        he : BOILER_TYPES`watts
wr        te : BOILER_TYPES`seconds
wr        mode :  BOILER_TYPES`boiler_mode
-- Actuators state
wr        pa :  ACTUATORS_TYPES`pump_to_action_map
wr        ea : ACTUATORS_TYPES`emergency_action
wr        va : ACTUATORS_TYPES`open_close_action


pre
(mode=<Running> or mode=<Init>) and 
first_unsafe_time_without_action(qe, pe, se, ve) > Action_time
post
mk_(pa, ea, va)=actions and
let dt : BOILER_TYPES`duration be st dt <= Action_time and dt > 0
in
 te=te~+ dt
and 
let mk_(pi, mi, vi) : modifiable_values
be st 
boiler_evolution_without_action(qe~, se~, pe~ , ve~, mode, dt, qe, se, pi, vi, mi)
in
BOILER_ACTUATORS`boiler_actuators(pi, vi, mi, pa, va, ea, pe, ve, mode)

-- pa=a1 and ea=a2 and va=a3 and te=te~+ dt and

;
\end{vdm_al}
The pre-condition ensures that the operation is attempted in mode $Init$ or
$Running$ and that the boiler is safe during the operation. 
The post-condition states the new values of the actuators, the maximal bound on
the duration of the operation, and the evolution of
the boiler during the operation. This evolution is a slightly more complex than
for $Get-captors$. It includes an intermediate state which corresponds to the
state reached  after $dt$ but before the actions are applied.
Then, $boiler-actuators$ express the instantaneous effect of the actuators on
the boiler at the last instant of the operation.

\paragraph{Controlling the boiler.} The control part of $React$ is an operation
that has no access to either the boiler state or the captors/actuators.
Actually, the interactions with the interface take place through its
input/output parameters. It may only modify its internal variables $local-ve$
and $local-mode$.

\begin{vdm_al}

Compute_reaction  ( captors : captors_type)
actions : actions_type
  
ext
wr        local_ve : BOILER_TYPES`valve_state
wr        local_mode :  BOILER_TYPES`boiler_mode

 pre
 local_mode=<Running> or local_mode=<Init>

post 

let 
mk_(qc, sc, p_mode, p_flow)=captors , mk_(pa, ma, va)= actions in
safe_actions_from_captors(qc, sc, p_mode, p_flow, local_ve, local_mode, pa, ma, va) 
and local_ve=BOILER_ACTUATORS`action_on_valve(va, local_ve~)
and local_mode=BOILER_ACTUATORS`action_on_mode(ma, local_mode~)
;

\end{vdm_al}
The pre-condition of this operation is not absolutely necessary, it reminds the
fact that the notion of safe action only makes sense in modes $Init$ and
$Running$. Therefore, it is reasonable to assume that the operation will be
started with these values for $local-mode$.

\vspace{0.5cm}

The post-condition splits the input and output parameters, using the pattern
matching facilities of VDM. It then expresses that the computed actions are
safe with respect to the captors values and that the local variables should be
updated with respect to these actions.

\vspace{0.5cm}

As such, The $Compute-Reaction$ operation takes no time, because it may not
access the real-time variable $te$. To model this duration,  $Evolve$
is defined. It expresses the evolution of the boiler during the computation of
the reaction.

\begin{vdm_al}

Evolve ()
ext
wr qe : BOILER_TYPES`water_level
wr        se : BOILER_TYPES`steam_outcome
wr        pe :  BOILER_TYPES`pump_to_state_map
wr        ve : BOILER_TYPES`valve_state
wr        he : BOILER_TYPES`watts
wr        te : BOILER_TYPES`seconds
wr        mode :  BOILER_TYPES`boiler_mode

pre 
(mode=<Running> or mode=<Init>) 
and first_unsafe_time_without_action(qe, pe, se, ve) > Computation_time

post let dt : BOILER_TYPES`duration be st 
dt <= Computation_time and dt > 0 in
te = te~+dt 
 and
boiler_evolution_without_action(qe~, se~, pe~ , ve~, mode~, dt, qe, se, pe, ve, mode)
;
\end{vdm_al}
The  pre- and post-conditions are similar to the ones of $Get-captors$ as far
as the boiler variables are concerned.

Finally, the $Control$ operation performs these operations ``in parallel''.
Actually, the parallelism provided here by VDM-SL is very limited: it expresses
the non-deterministic sequence of instructions.
\begin{vdm_al}

Control :   captors_type ==>  actions_type

Control (  captors) ==

(dcl actions : actions_type;
||( actions := Compute_reaction(captors), Evolve());
return(actions))

pre (mode=<Running> or mode=<Init>) and
first_unsafe_time_without_action(qe, pe, se, ve) > Computation_time
;
\end{vdm_al}

\paragraph{A refinement of $CONTROLLED-BOILER`React$. }

$React$ expresses the decomposition of this operation in terms of
$Get-captors$, $Control$, and $Put-actuators$.
Its pre-condition is the same as
for $CONTROLLED-BOILER`React$. 

\begin{vdm_al}


React  : ()  ==> ()

React  ()  ==

(dcl captors : captors_type ,
     actions : actions_type ;
captors := Get_captors();
if mode=<Running> or mode=<Init> 
	then actions := Control(captors) 
	else skip;
if mode=<Running> or mode=<Init> 
	then Put_actuators(actions)
	else skip
)
pre
(mode=<Running> or mode=<Init>) and TIME`Is_a_sampling_time(te)
and
first_unsafe_time_without_action(qe, pe, se, ve) > TIME`Reaction_time

end  REACTION
\end{vdm_al}

In order to prove that this operation is actually a refinement of the previous
module, it should be proved that  boiler evolutions are compatible. Actually,
the boiler evolution of the abstract operation is refined as a sequence of
three evolutions. For this sequence to be a valid refinement, it
may easily be
proved that if $dt = dt_1 + dt_2$, every possible evolution over $dt_1$
followed by an evolution over $dt_2$ remains in the envelope of the evolution
over $dt$.
