\section { Global specification of a boiler under control }

The $CONTROLLED-BOILER$ module groups the variables of the boiler, the captors,
and the actuators into a single state. It refines the $SAFE-BOILER$ module.
The module imports most modules presented up to now. It instantiates the
physical laws by the functions defined in $NO-CHANGE$, which provides an
evolution function in the case where no action is performed, like in
$SAFE-ACTIONS$. This function is
subsequently used to instantiate the $SAFE-TIME$ module.


\vspace{0.5cm}

\begin{vdm_al}
module CONTROLLED_BOILER

imports from BOILER_TYPES all ,
	from CAPTORS_TYPES all ,
	from ACTUATORS_TYPES all ,
	from TIME all,
	from SAFER_BOILER all,
-- Invariants :
	from BOILER_CAPTORS all,
	from BOILER_ACTUATORS all,
-- Operations :
	from SAFE_ACTIONS all,
	from NO_CHANGE functions
reachable_pump_states renamed nc_reachable_pump_states;
reachable_valve_states renamed nc_reachable_valve_states

instantiations

CONTROLLED as PHYSICAL_LAWS
   (reachable_pump_states -> nc_reachable_pump_states,
    reachable_valve_states -> nc_reachable_valve_states) 
functions evolution renamed evolution_without_action,

SAFE_TIME as SAFE_TIME
   (evolution -> evolution_without_action) 
functions first_unsafe_time renamed first_unsafe_time_without_action


exports all

definitions
\end{vdm_al}

\vspace{0.5cm}

%The instantiations are the same as for $SAFE-ACTIONS$.
% because  the modular
%extensions of the IFAD toolbox do not provide exportation of internal functions
%of instantiated modules.

Type $modifiable-values$ is introduced in order to shorten the expression of some functions and operations.

\vspace{0.5cm}

\begin{vdm_al}
types

modifiable_values =   BOILER_TYPES`pump_to_state_map
        *  BOILER_TYPES`boiler_mode
        * BOILER_TYPES`valve_state

\end{vdm_al}
\subsection{State variables}
The state variables of the controlled boiler group:

\begin{itemize}
\item the environment variables which model the boiler
($qe$,$se$,$pe$,$ve$,$he$,$te$,$mode$); these variables may not be accessed
directly by the program of the controller;
\item the captors variables ($qc$,$sc$,$p-mode$,$p-flow$) which may only be
read by the controller;
\item the actuators variables ($pa$,$ea$,$va$) which may be modified by the
controller.
\end{itemize}

The invariant associated with these variables expresses that:

\begin{itemize}
\item Modes $Init$ and $Running$ are incompatible with a water level located
outside the bounds $M1$ and $M2$; in other words, when the water level is in
any of these extreme situations, it does no longer correspond to a normal
operation mode.
\item In modes $Init$ and $Running$:
\begin{itemize}
\item if $te$ is a sampling instant, then the captors correspond to the state,
\item at any time, the current value of the actuators and the current state
must correspond (e.g.\ a pump may not be in state $Stopped$ if the
corresponding actuator is $Open$); the specification states thus that there
must exist some previous state such that the application of the  actuators on
that state has led to the current state.
\end{itemize}
\end{itemize}


Finally, the initial state should be defined. The specification still leaves a
lot of implementation freedom on the choice of this state. It merely expresses
that, if the initial mode is  $Init$ or $Running$:  

\begin{itemize}
\item The initial instant is a sampling instant.
\item The state of the boiler allows some reaction to take place.
\end{itemize}

\begin{vdm_al}


state CONTROLLED_BOILER of
-- The physical boiler state
        qe : BOILER_TYPES`water_level
        se : BOILER_TYPES`steam_outcome
        pe :  BOILER_TYPES`pump_to_state_map
        ve : BOILER_TYPES`valve_state
        he : BOILER_TYPES`watts
        te : BOILER_TYPES`seconds
        mode :  BOILER_TYPES`boiler_mode
-- Captors state
	qc :   BOILER_TYPES`water_level
        sc :   BOILER_TYPES`steam_outcome
        p_mode : CAPTORS_TYPES`pump_to_mode_map
        p_flow :  CAPTORS_TYPES`pump_to_flow_map
-- Actuators state
     	pa : ACTUATORS_TYPES`pump_to_action_map
        ea : ACTUATORS_TYPES`emergency_action
        va : ACTUATORS_TYPES`open_close_action
inv mk_CONTROLLED_BOILER(qe, se, pe, ve, he, te, mode, qc,  sc,  p_mode,
p_flow, pa, ea, va) == 

(mode=<Running> or mode=<Init> 
=> (qe>BOILER_TYPES`M1 and qe<BOILER_TYPES`M2))
and

(TIME`Is_a_sampling_time(te) 
=>BOILER_CAPTORS`boiler_captors(qe,qc,se,sc,pe,p_mode, p_flow)) 
and
(exists pi :  BOILER_TYPES`pump_to_state_map,
vi : BOILER_TYPES`valve_state,
mi : BOILER_TYPES`boiler_mode
&
BOILER_ACTUATORS`boiler_actuators(pi, vi, mi,pa, va, ea, pe, ve, mode))



init 
mk_CONTROLLED_BOILER(qe, se, pe, ve, he, te, mode, qc,  sc,  p_mode,  p_flow, pa, ea, va) 

==

mode=<Running> or mode=<Init> 
=>
 (TIME`Is_a_sampling_time(te) and 
first_unsafe_time_without_action(qe, pe,se,ve) > TIME`Reaction_time)

end

\end{vdm_al}
\subsection{Functions}

To shorten the expression of the post-condition, $boiler-evolution-without-action$ is introduced. It states the allowed evolution of the boiler:

\begin{itemize}
\item the state must evolve as stated in $reachable-modes$;
\item if the resulting state is $Init$ or $Running$, the evolution of the boiler must follow the rules of $evolution-without-action$.
\end{itemize}
\begin{vdm_al}
functions

boiler_evolution_without_action   :
          BOILER_TYPES`water_level*
         BOILER_TYPES`steam_outcome*
         BOILER_TYPES`pump_to_state_map*
         BOILER_TYPES`valve_state*
	BOILER_TYPES`boiler_mode*
         BOILER_TYPES`duration*
         BOILER_TYPES`water_level *
         BOILER_TYPES`steam_outcome *
        BOILER_TYPES`pump_to_state_map *
        BOILER_TYPES`valve_state*
        BOILER_TYPES`boiler_mode  +> bool

boiler_evolution_without_action (qe , se,  pe,  ve,  mode, dt,  qn,  sn,  pn,  vn, mn) ==
 mn in set SAFER_BOILER`reachable_modes(mode, dt, qe, se, pe, ve)
        and ((mn = <Init> or mn = <Running>)
        => evolution_without_action(qe, se, pe , ve,dt, qn, sn, pn, vn))

\end{vdm_al}

It must be noted that $evolution-without-action$ has a misleading name: the
actions involved are actions on pumps and on the valve. But the emergency stop
action is not concerned with this function. This allows the external operator to
perform an emergency stop at any time since this is compatible with
$reachable-modes$ and with the antecedent of the implication.

\subsection{Operations}

The $Advance-time$ operation is now structured into two sub-operations, like in $SAFE-BOILER$:

\begin{itemize}
\item a $Safe-advance-time$  corresponds to the $Init$ and $Running$
modes. It is decomposed into two operations:
\begin{itemize}
\item $React$ that takes place every sampling instant;
\item $Wait$ which lets the boiler evolve until the next sampling instant, if
$React$ did not switch to emergency stop mode.
\end{itemize}

$Safe-advance-time$ takes place every sampling instant. 
Therefore, it is not a refinement of $Advance-time-Init-Running$ which did not
rely on this pre-condition. Moreover, $Safe-advance-time$ needs a safe time of
$Reaction-time$ before it is started.
\item $Unsafe-advance-time$  corresponds to the $Stopped$ and $Explosion$
modes. It is the same operation as $Advance-time-other-modes$.
\end{itemize}

\subsubsection{Safe operations}

$React$ takes place in modes $Init$ and $Running$ at the sampling instants, as expressed in
its pre-condition. The pre-condition also requires the boiler to remain safe
for at least the reaction time.
Since it is a global operation on both the boiler and the
controller, it will affect the boiler variables through modifications of the
actuators. The captors variables may only be accessed in read-only mode, which
expresses that their values do not change during the reaction. Indeed, the
reaction time is assumed to be smaller than the sampling time so the reaction can happen
before the next sampling instant comes. 

\begin{vdm_al}
operations

React  () 
ext
wr qe : BOILER_TYPES`water_level
wr        se : BOILER_TYPES`steam_outcome
wr        pe :  BOILER_TYPES`pump_to_state_map
wr        ve : BOILER_TYPES`valve_state
wr        he : BOILER_TYPES`watts
wr        te : BOILER_TYPES`seconds
wr        mode :  BOILER_TYPES`boiler_mode
-- Captors state
rd        qc :   BOILER_TYPES`water_level
rd        sc :   BOILER_TYPES`steam_outcome
rd        p_mode : CAPTORS_TYPES`pump_to_mode_map
rd        p_flow :  CAPTORS_TYPES`pump_to_flow_map
-- Actuators state
wr        pa :  ACTUATORS_TYPES`pump_to_action_map
wr        ea : ACTUATORS_TYPES`emergency_action
wr        va : ACTUATORS_TYPES`open_close_action


pre
(mode=<Running> or mode=<Init>) and TIME`Is_a_sampling_time(te)
and first_unsafe_time_without_action(qe, pe, se, ve) > TIME`Reaction_time

post 
let dt : BOILER_TYPES`duration be st 
dt <= TIME`Reaction_time and dt > 0

in

SAFE_ACTIONS`safe_actions(qe~, se~, pe~, ve~, mode~, pa, ea, va) and 
te =te~+dt and 

let mk_(pi, mi, vi) : modifiable_values
be st
 boiler_evolution_without_action(qe~, se~, pe~ , ve~, mode, dt, qe, se
, pi, vi, mi)
in
BOILER_ACTUATORS`boiler_actuators(pi, vi, mi, pa, va, ea, pe, ve, mode
)

;


\end{vdm_al}
The post-condition constrains the time of the operation to be less than the
reaction time. It is also greater than 0, so that the pre-condition of $Wait$ is valid at the end of $React$. The post-condition also
constraints the new values of the actuators to be safe with respect to the
initial values of the boiler variables. As a result, if the controller does not
switch to emergency stop mode, it is guaranteed that the boiler is safe for the
next sampling period and the next reaction. 

The $React$ action only involves two instants in time: the initial and final instants of the operation. The last part of the
post-condition states that the new values of the boiler variables correspond to
an evolution without action during the time of the operation. The underlying
idea is that actions take place precisely at the final instant of the
operation. The last part of the post-condition describes the action of
actuators on the final state of the boiler.

\vspace{0.5cm}


The $Wait$ action allows the time to flow until the next sampling instant.
The operation modifies the boiler variables (which evolve as time flows), but
also the captors variables which are constrained by the invariant to be
consistent with the boiler variables at each sampling instant. The actuators
variables are not modified by this operation, since no control operation is
performed.

The pre-condition states that the operation may only take place in modes $Init$
and $Running$ at instants that are not sampling instants. It also requires the
boiler to be safe  during the operation, and even to remain safe for an
additional reaction time.
\begin{vdm_al}

Wait  () 
ext
wr qe : BOILER_TYPES`water_level
wr        se : BOILER_TYPES`steam_outcome
wr        pe :  BOILER_TYPES`pump_to_state_map
wr        ve : BOILER_TYPES`valve_state
wr        he : BOILER_TYPES`watts
wr        te : BOILER_TYPES`seconds
wr        mode :  BOILER_TYPES`boiler_mode
-- Captors state
wr        qc :   BOILER_TYPES`water_level
wr        sc :   BOILER_TYPES`steam_outcome
wr        p_mode : CAPTORS_TYPES`pump_to_mode_map
wr        p_flow :  CAPTORS_TYPES`pump_to_flow_map
-- Actuators state
rd        pa :  ACTUATORS_TYPES`pump_to_action_map
rd        ea : ACTUATORS_TYPES`emergency_action
rd        va : ACTUATORS_TYPES`open_close_action

pre
(mode=<Running> or mode=<Init>)
and not TIME`Is_a_sampling_time(te)
and
first_unsafe_time_without_action(qe, pe, se, ve) > TIME`Next_sampling_time(te) -te + TIME`Reaction_time

post
let dt = TIME`Next_sampling_time(te~) - te~ in
te= te~ + dt and boiler_evolution_without_action(qe~, se~, pe~ , ve~, mode~, dt, qe, se, pe, ve, mode)
;
\end{vdm_al}
The post-condition expresses that the final time of the operation is the next
sampling instant, and that the variables did evolve according to the physical
laws when no action takes place.

\vspace{0.5cm}

It must be noted that both safe actions allow the operator to switch to emergency
stop mode. Actually, the evolution of the mode is only constrained by the fact
that it must be compatible with both $reachable-modes$ and the last action
performed. If the operator switches to emergency stop, he does not violate
either of these rules!

\paragraph{Safe character of these operations}

These operations may then be grouped into $Safe-advance-time$ which performs a
reaction and, if no emergency stop has been issued, waits until the next
sampling instant.

\begin{vdm_al}
Safe_advance_time : () ==> ()

Safe_advance_time() == (React(); if (mode=<Init> or mode=<Running>) then Wait())

pre (mode=<Running> or mode=<Init>)
and TIME`Is_a_sampling_time(te)
and first_unsafe_time_without_action(qe, pe, se, ve) > TIME`Reaction_time
;
\end{vdm_al}

The safe character of this operation is guaranteed by the following
properties:
\begin{itemize}
\item the pre-condition guarantees that $React$ may always take place
safely; 
\item $React$ may always compute a safe reaction (at least $Stop$); 
\item if $React$ ends up in  mode $Init$ or $Running$, it guarantees that
the boiler is safe until the next
reaction has taken place; so each time $Wait$ performed, it
is guaranteed to terminate in a safe state;
\end{itemize}

Thus, both operations always end up in a safe state. Moreover, while  the
boiler is in $Init$ or $Running$, it may perform its next reaction. 


\subsubsection{Unsafe operation}

The unsafe operation corresponds to the previous specification of
$Advance-time-other-modes$. 
\begin{vdm_al}

Unsafe_advance_time ()
ext wr  qe : BOILER_TYPES`water_level
   wr  se : BOILER_TYPES`steam_outcome
   wr  pe : BOILER_TYPES`pump_to_state_map
   wr  ve : BOILER_TYPES`valve_state
   wr  he : BOILER_TYPES`watts
   wr  te : BOILER_TYPES`seconds
   wr  mode : BOILER_TYPES`boiler_mode

pre  mode <> <Init> and  mode <> <Running>
post    let dt : BOILER_TYPES`duration in
        te=te~+dt and 
SAFER_BOILER`boiler_evolution(qe~, se~, pe~ , ve~, mode~, dt, qe, se, pe, ve, mode)
;
\end{vdm_al}

\subsubsection{Grouping these operations}

Finally, $Advance-time$ groups these operations into a single operation that
chooses the adequate evolution of the system depending on $mode$.

\begin{vdm_al}
Advance_time : () ==> ()

Advance_time() ==
cases mode :
   <Running>, <Init> -> Safe_advance_time(),
   <Explosion>, <Stopped> -> Unsafe_advance_time()
end

pre   mode=<Running> or mode=<Init> =>
TIME`Is_a_sampling_time(te)
and first_unsafe_time_without_action(qe, pe, se, ve) > TIME`Reaction_time


end  CONTROLLED_BOILER

\end{vdm_al}

\subsection{Correspondence with $SAFE-BOILER$}

The $CONTROLLED-BOILER$ corresponds to a variant of $SAFE-BOILER$:

\begin{itemize}
\item its state includes the variables of $SAFE-BOILER$; as far as the
variables of the boiler are concerned, its invariant is the same.
\item $Safe-advance-time$ corresponds to $Advance-time-Init-Running$; 
\item $Unsafe-advance-time$ corresponds to $Advance-time-other-modes$.
\end{itemize}

Actually, it is not a refinement of $SAFE-BOILER$:
\begin{itemize}
\item 
No constraint was defined on the
initial state of $SAFE-BOILER$. Here, it is required that the initial state
corresponds to a sampling instant and provides a sufficient reaction time.
Since the concepts of sampling and reaction had not been defined in
$SAFE-BOILER$, it would have been difficult to speak about these. So, this
means that the state variables of $CONTROLLED-BOILER$ are a  refinement of
$SAFE-BOILER$ under the 
assumption that the initial state of $SAFE-BOILER$ meets this condition.
\item As discussed earlier, $Safe-advance-time$ is not a refinement of
$Advance-time-Init-Running$:
\begin{itemize}
\item its pre-condition is stronger than the one of
$Advance-time-Init-Running$; it requires the operation to take place only at
sampling instants where the safe time exceeds the reaction time;
\item $Advance-time-Init-Running$ refers to the general notion of safe time
where actions may take place at any time, while $Safe-advance-time$ refers to
the safe time without actions; therefore, $Safe-advance-time$, which relies on
the absence of actions,  may advance the
time further than the general safe time.
\end{itemize}
\end{itemize}

Nevertheless, it is closer to a refinement of $SAFER-BOILER$ which exhibits a
safe behaviour.  The refinement is performed under the assumption that the
initial instant is safe and that while the mode is $Running$ or $Init$,
$Advance-time$ is executed at each sampling instant.
