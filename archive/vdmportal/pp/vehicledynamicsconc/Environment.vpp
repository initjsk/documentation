-----------------------------------------------
-- Class:			Environment
-- Description: 	Environment class in the VDM project
-----------------------------------------------

--
-- class definition
--
class Environment

--
-- instance variables
--
instance variables

public vdm : VDM := new VDM();
private io : IO := new IO();
private simtime : Types`Time; 
private inlines : seq of inline := [];
private outlines : seq of char := [];
private busy : bool := true;

--
-- Types definition section
--
types   
inline  = Types`Event;
InputTP   = (Types`Time * seq of inline);
--
-- Operations definition section
--
operations

public Environment: seq of char ==> Environment
Environment(filename) ==
(
 	Printer`Out("Environment created:  Some aren't used to an environment where excellence is expected");

	def mk_(-,mk_(timeval,input))= io.freadval[InputTP](filename) in
	(
	inlines := input;
	simtime := timeval;
	);	 
);

  
public Run: () ==> ()
Run() ==
(

   if inlines <> []
   then 
   (  
    dcl done : bool := false, 
    eventOccurred : bool := false,
    curtime : Types`Time := World`timerRef.GetTime();

    while not done do
    (
     def event = hd inlines in      
		cases event:
			mk_Types`VechicleData(-,-,-,-,-,-) ->
			(
				if event.t <= curtime
				then
				(
				Printer`OutWithTS("Environment: New Vehicle event"); 
				 let pos = new Position(event.posX, event.posY) in
				   let vehicle = new Vehicle(event.ID, pos, event.speed, event.direction) in
				    let ctrl = new Controller(vehicle) in
				    (
			          vdm.vdmCtrl.addController(ctrl);
					  start(ctrl);
					 );
			    eventOccurred := true;
				)
		    ),
		    mk_Types`TrafficLightData(-,-,-,-,-) ->
		    (
			    if event.t <= curtime
				then
				(
			    Printer`OutWithTS("Environment: New TrafficLight event");
			     let pos = new Position(event.posX, event.posY) in 
			      let light = new TrafficLight(event.ID, pos, event.greenTime) in
			      	(
			      	vdm.vdmCtrl.addTrafficLight(light); 
			      	start(light);
			      	);
			      	
			     eventOccurred := true;
			     )
		    ),
		    mk_Types`VehicleUpdateSpeed(-,-,-) ->
		    (
		    	if event.t <= curtime
				then
				(
					 Printer`OutWithTS("Environment: SpeedUpdate event: For vehicle: " ^ Printer`natToString(event.ID) ^ " New Speed: " ^ Printer`natToString(event.speed)); 
					 let c = vdm.vdmCtrl.getController(event.ID) in 
					     c.getVehicle().SetSpeed(event.speed);
				
				eventOccurred := true;
				) 
		    ),
		    mk_Types`VehicleUpdatePosition(-,-,-,-) ->
		    (
			 	if event.t <= curtime
				then
				(
			 	 let pos = new Position(event.posX, event.posY) in
			 	  let c = vdm.vdmCtrl.getController(event.ID) in 
			       (
			       c.getVehicle().SetPosition(pos); 
			       Printer`OutWithTS("Environment: PositionUpdate event: For vehicle: " ^ Printer`natToString(event.ID) ^ " New position:" ^ pos.toString());
			       );
			     
			     eventOccurred := true;
			     )
		    ),
		    mk_Types`VehicleLowGrip (-,-,-) ->
		    (
		    	if event.t <= curtime
				then
				(
				 Printer`OutWithTS("Environment: LowGrip event: For vehicle: " ^ Printer`natToString(event.ID)); 
				 let c = vdm.vdmCtrl.getController(event.ID) in 
			     c.getVehicle().setLowGrip(event.lowGrip); 
			    
			    eventOccurred := true;
			    )
		    ),
		    mk_Types`VehicleTurnIndication(-,-,-) ->
		    (
		    	if event.t <= curtime
				then
				(
				 Printer`OutWithTS("Environment: TurnIndication event: For vehicle: " ^ Printer`natToString(event.ID) ^ " New indicator: " ^ Vehicle`IndicatorToString(event.turn));  
				 let c = vdm.vdmCtrl.getController(event.ID) in 
			     c.getVehicle().setTurnIndicator(event.turn); 
			     
			     eventOccurred := true;
			     )
		    ),
		    mk_Types`VehicleUpdateDirection(-,-,-) ->
		    (
		    	if event.t <= curtime
				then
				(
				 Printer`OutWithTS("Environment: DirectionUpdate event: For vehicle: " ^ Printer`natToString(event.ID) ^ " New Direction: " ^ Types`DirectionToString(event.direction)); 
			 	 let c = vdm.vdmCtrl.getController(event.ID) in 
			     c.getVehicle().SetDirection(event.direction); 
			    
			     eventOccurred := true;
			     )
		    ),
		    mk_Types`WasteTime(-) ->
		    (
		    	if event.t <= curtime
				then
				(		
				 Printer`OutWithTS("Environment: Wasting time");	    
			     eventOccurred := true;
			    )
		    ),
		    others -> Printer`OutWithTS("Environment: No match found!")
		end;

		if eventOccurred 
	 	then
	  	(
	  	inlines := tl inlines;
	  	done := len inlines = 0;  
	  	) 
	  	else done := true;
		  
		eventOccurred := false;
    	);
	  )
      else busy := false;
   
);
   
   public handleEvent : TrafficData ==> ()
   handleEvent(d) ==
   (
   Printer`OutWithTS("#Environment Handled System Event: " ^ d.ToString());
   outlines := Printer`natToString(Timer`GetTime()) ^ ": " ^ outlines ^ d.ToString() ^ "\n"; 
   );
   
   public handleEvent : seq of char ==> ()
   handleEvent(s) ==
   (
   skip;
   Printer`OutWithTS("#Environment Handled System Event: " ^ s);
   outlines := Printer`natToString(Timer`GetTime()) ^ ": " ^  outlines ^ s ^ "\n"; 
   );
   
   
   public report : () ==> ()
   report() ==
   (
   Printer`OutAlways("\n\nHowever beautiful the strategy, you should occasionally look at the results.");
   Printer`OutAlways("****************************************RESULT****************************************");
   Printer`OutAlways("*******************************************************************************************");
   Printer`OutAlways(outlines);
   Printer`OutAlways("\n*******************************************************************************************");
   Printer`OutAlways("*******************************************************************************************");
   );
   
   public isFinished : () ==> () 
   isFinished() == skip;

--
--
-- Functions definition section
--
functions

--
-- Values definition section
--
values


--
-- Threads definition section
--
thread
 (
	start(new ClockTick(threadid));
  
	while World`timerRef.GetTime() < simtime do
	(
		Run();
		World`timerRef.NotifyAndIncTime();
	    World`timerRef.WaitRelative(0) 	
	);
	busy := false; 	 	 
	
   Printer`OutAlways("Simulation completed:  Models are to be used, not believed.");
)
 
--
-- sync definition section
--
sync
 per isFinished => not busy;
 mutex(handleEvent)

end Environment