-----------------------------------------------
-- Class:			Controller
-- Description: 	Controller is main class in every independent VDM element
-----------------------------------------------

--
-- class definition
--
class Controller

--
-- instance variables
--
instance variables
private internalTrafficData : seq of TrafficData := []; 	    -- traffic data issued by this controller, that will be passed on other controllers.
inv len internalTrafficData <= Config`TrafficDataKeeptNumber;
private externalTrafficData : seq of TrafficData := [];  		-- traffic data from other controllers moving in the opposite direction,  
inv len externalTrafficData <= Config`TrafficDataKeeptNumber;   -- this will not be passes on as it makes no sense with the current warning types. 

private communicatedWith : seq of nat := [];
inv len communicatedWith <= Config`TrafficDataKeeptNumber; 		--keep track of whom we have communicated with. 

private traffic : Traffic;
private vdmVehicle : Vehicle; -- the vehicle the VDM system Controller is placed in.
--
-- Types definition section
--
types   

--
-- Operations definition section
--
operations

public Controller : Vehicle ==> Controller
Controller (vehicle) ==
(
vdmVehicle := vehicle;
traffic := new Traffic();
Printer`Out("Controller created: Everything seems under control");
);


public AddOncomingVehicle: Vehicle ==> ()
AddOncomingVehicle(v) ==
(
if not traffic.ExistVehicle(v)
then
traffic.AddVehicle(v);
);

public AddTrafficData:  nat * seq of TrafficData ==> ()
AddTrafficData(vdmUnitID, data) ==
 (
 --we cant use empty data
 if data = [] 
 then 
 return;
 
 --did we already exchange information?
 if vdmUnitID in set elems communicatedWith 
 then 
 return;

 -- add traffic 
 if(len externalTrafficData < Config`TrafficDataKeeptNumber)
 then 
 externalTrafficData := externalTrafficData ^ data
 else
 externalTrafficData :=  tl externalTrafficData ^ data;
 
 for d in data do 
 ( 
  World`env.handleEvent("Vehicle: " ^ Printer`natToString(GetVehicleID()) ^ " received " ^  d.ToString());
 );
 --keep track of who we have communicated with
 if len communicatedWith < Config`TrafficDataKeeptNumber
 then
 communicatedWith := communicatedWith ^ [vdmUnitID]
 else
 communicatedWith := tl communicatedWith ^ [vdmUnitID];
 );
 

private AddInternalTrafficData: TrafficData ==> ()
AddInternalTrafficData(data) ==
(
 if(len internalTrafficData < Config`TrafficDataKeeptNumber)
 then 
 internalTrafficData := internalTrafficData ^ [data]
 else
 internalTrafficData :=  tl internalTrafficData ^ [data];
 
)
post len internalTrafficData <= Config`TrafficDataKeeptNumber;  --TODO already covered by inv?


public GetTrafficData: () ==> seq of TrafficData 
GetTrafficData() ==
-- deep copy
return [ new TrafficData(internalTrafficData(i).GetMessage(), internalTrafficData(i).GetPosition(), internalTrafficData(i).GetDirection(), internalTrafficData(i).GetTimeTolive()) 
| i in set inds internalTrafficData ];


public GetVehicleID : () ==> nat
GetVehicleID()== return vdmVehicle.GetID();


public GetPosition : () ==> Position
GetPosition() ==
return vdmVehicle.GetPosition();


public GetDirection: () ==> Types`Direction 
GetDirection() ==
return vdmVehicle.GetDirection();


public getVehicle : () ==> Vehicle
getVehicle() == return vdmVehicle; 


public getTrafficReport : () ==> seq of char
getTrafficReport() ==
(
 dcl s : seq of char := ""; 
 s := "# Traffic Report for unit: " ^ Printer`natToString(GetVehicleID()) ^ "##########################\n";
 if len externalTrafficData > 0 
 then
 (
  for all d in set elems externalTrafficData do
  (
  s := s ^d.ToString() ^ "\n";
  );
  )
  else
  s := s ^ "Nothing to report";
  s := s ^ "\n############################################";
  return s;
);

public Step: () ==> ()
Step() ==
(
  vdmVehicle.Move();
  
 --check expired internal data
 for all td in set elems internalTrafficData do
 (
  if td.Expired()
  then 
  (
  --remove td
  internalTrafficData := [internalTrafficData(i) | i in set inds internalTrafficData & internalTrafficData(i) <> td];
  )
 );
 
 --check for lowgrip, and check if already set at position.  
 if vdmVehicle.getLowGrip() = true 
 then 
 (
 --The position check will only be relevant if the car has speed 0
 if vdmVehicle.GetSpeed() = 0 => 
 not exists data in set elems internalTrafficData & Position`Compare(data.GetPosition(), GetPosition()) and  data.GetMessage() = <LowGrip> 
 then 
 let lowGripMsg = new TrafficData(<LowGrip>, GetPosition().deepCopy(), GetDirection()) 
 in  
 AddInternalTrafficData(lowGripMsg);
 );
 
 --check for turnindicator, and check if already set at position.  
 if vdmVehicle.TurnIndicator() = <LEFT> 
 then 
 (
 --The position check will only be relevant if the car has speed 0
 if vdmVehicle.GetSpeed() = 0 =>
 not exists data in set elems internalTrafficData & Position`Compare(data.GetPosition(), GetPosition()) and  data.GetMessage() = <LeftTurn> 
 then 
 let turnMsg = new TrafficData(<LeftTurn>, GetPosition().deepCopy(), GetDirection()) 
 in  
 AddInternalTrafficData(turnMsg);
 );
 
  --check for congestion, and check if already set at position.  
 if traffic.Congestion() = true
 then 
 (
 --The position check will only be relevant if the car has speed 0
 if vdmVehicle.GetSpeed() = 0 =>
 not exists data in set elems internalTrafficData & Position`Compare(data.GetPosition(), GetPosition()) and  data.GetMessage() = <Congestion> 
 then
  ( 
  let congMsg = new TrafficData(<Congestion>, GetPosition().deepCopy(), GetDirection()) 
   in  
   (
    AddInternalTrafficData(congMsg);
   )
  )
 );
 
);

--
-- Functions definition section
--
functions

--
-- Values definition section
--
values


--
-- Thread definition section
--
thread
(

 while true do
 (
  	World`timerRef.WaitRelative(100); 
    Step(); 
 );
)

--
-- sync definition section
--
sync
mutex(AddInternalTrafficData,GetTrafficData);
mutex(AddInternalTrafficData)


end Controller