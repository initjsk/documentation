-----------------------------------------------
-- Author:	Kim Christensen
-- Created:	26/02-2009
-- Updated: 17/03-2009
-- Description: AccessController class for ORAMS
-----------------------------------------------

class AccessController is subclass of GLOBAL


instance variables
	eventQueue : seq of event := [];
	busy : bool := true;

types


operations
	public AccessController : () ==> AccessController
		AccessController() == return;


	public addEvent : event ==> ()
		addEvent(evt) ==
			eventQueue := eventQueue ^ [evt];
	
	
	public isFinished : () ==> ()
		isFinished() == 
			skip;
			
	--public done : () ==> ()
	--	done() == 
	--		busy := false;


	public step : () ==> ()
		step() ==
			(
			if len eventQueue > 0
			then  
			while len eventQueue > 0 do
				(
					def mk_(type, id1, id2, intend, -) = hd eventQueue
          			in 
          			(
          				cases type :
          					<removeBoat> -> AttemptRemoveLifeboat(id1),
          					<movePerson> -> movePerson(id1, id2, intend)
          				end;
          				eventQueue := tl eventQueue; 
          				
          			);
				)
			);
			
			
	public movePerson : Pid * Aid * Intend ==> ()
		movePerson(person, area, intend) ==
			(
			let success = ORAMS`areas(area).enterPerson(person, intend)
			in 
				World`env.addOutline(mk_(World`timer.GetTime(),
									 "Person move ", 
									 person, 
									 area, 
									 intend, 
									 success, 
									 '\n'));
			)
	pre person in set dom ORAMS`persons;
	
	
	public AttemptRemoveLifeboat : Bid ==> () 
		AttemptRemoveLifeboat(boat) ==
			(
				if isRemovable(boat)
           			then (
           				removeLifeboat(boat);
            				World`env.addOutline(mk_(World`timer.GetTime(), 
            										"Lifeboat disable ", 
            										boat, 
            										true, 
            										'\n'));
            				)
            			else 
            				World`env.addOutline(mk_(World`timer.GetTime(), 
            										"Lifeboat disable ", 
            										boat, 
            										false, 
            										'\n'));
			);
	
	
	public removeLifeboat : Bid ==> ()
		removeLifeboat(boat) ==
			(
			ORAMS`Lifeboats(boat).disable();
			redistribute(boat);
			for all a in set ORAMS`Lifeboats(boat).getAreas() do 
					  ORAMS`areas(a).removeBoat(boat);
			)
	pre isRemovable(boat) and boat in set dom ORAMS`Lifeboats;
	
	
	public isRemovable : Bid ==> bool
		isRemovable(boat) ==
		( let crew = ORAMS`Lifeboats(boat).getCrew(), 
					areas = ORAMS`Lifeboats(boat).getAreas()
		in (
			if exists p in set crew & ORAMS`persons(p).getArea() not in set areas
			then return false 
			else (
			 	 for all a in set areas do
			 	 if not ORAMS`areas(a).canRemoveBoat(boat) 
			 	 then return false
			 	 );
			 return true
			 )
		)
		pre boat in set dom ORAMS`Lifeboats;
		
		
	private redistribute : Bid ==> ()
		redistribute(boat) == 
			(
			let crew = (ORAMS`Lifeboats(boat)).getCrew()
			in for all p in set crew do 
				ORAMS`areas(ORAMS`persons(p).getArea()).changeBoat(p);
			)			
            pre boat in set dom ORAMS`Lifeboats;


functions


values

sync
per isFinished => len eventQueue = 0;

thread 
	(
		while true do 
			step();
	)
end AccessController
