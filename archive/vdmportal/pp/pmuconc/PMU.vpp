\begin{vdm_al}
class PMU is subclass of GLOBAL

instance variables
    batMonitor : [BatteryMonitor] := nil;
    public PMUId: nat;
    mdCollectedData : seq of (Data) := [];
    public mdDataPrio1 : seq of (Data) := [];
    public mdDataPrio2 : seq of (Data) := [];
    public mdDataPrio3 : seq of (Data) := [];
    mdDataElement : seq of (Data) := [];
    
    --the transmitter this PMU is using.
    private transmitter: Transmitter;    
    --the Analyzer this PMU is analysing data from MD with.
    public analyzer: map nat to Analyzer := {|->};

operations

public PMU: int ==> PMU
  PMU(cprnr) ==
    PMUId := cprnr
  pre cprnr > 0;
  
public setBatteryMonitor : BatteryMonitor ==> ()
  setBatteryMonitor ( monitor ) ==
  (
    batMonitor := monitor;
  );

public rechargeBattery: () ==> ()
  rechargeBattery () ==
  ( 
    batMonitor.recharge();
  );
  
public GetPMUId: () ==> nat
  GetPMUId() ==
    return PMUId;
    
-------------------------------------------------
--addAnalyzer and addTransmitter
--Adds Analyzer and Transmitter to the PMU 
--and starts their threads.
-------------------------------------------------

public addAnalyzer: Analyzer ==> ()
addAnalyzer(mAnalyzer) ==
    ( 
       dcl m_AnalyzerId : nat := mAnalyzer.getDataType();
       analyzer := analyzer munion {m_AnalyzerId |-> mAnalyzer };
       mAnalyzer.setBatteryMonitor(batMonitor);
       start (mAnalyzer);
    );
    
public addTransmitter: Transmitter ==> ()
addTransmitter(tx) ==
    ( 
        transmitter:=tx;
        transmitter.attachBattery(batMonitor);
        start(tx)
    );


-----------------------------------------------------------
--collectDeviceData
--The incoming Dataelements are sorted i priority sequences 
--as they are collected from the medical devices.
-----------------------------------------------------------
public collectDeviceData : Data ==> ()
  collectDeviceData(data) ==
    ( Printer`Out("PMU: Collectdevice data called");
      cases data.datatype: --HEARTRATE, TAKEMEDICIN, WEIGHT can't be used with cases
        3 -> (mdDataPrio3 := mdDataPrio3 ^ [data];),
        2 -> (mdDataPrio2 := mdDataPrio2 ^ [data];),
        1 -> (mdDataPrio1 := mdDataPrio1 ^ [data];),
        others -> Printer`Out("PMU: MD data not recognized")
      end
     );
   
------------------------------------------------------------------
--getData
--This function is used for getting the first element in a priority sequence.
------------------------------------------------------------------
public getData : (seq of (Data)) ==> Data
  getData(priorityData) ==
    ( dcl element : Data := hd priorityData;
        cases element.datatype:
          3 -> (mdDataPrio3 := tl priorityData), 
          2 -> (mdDataPrio2 := tl priorityData),
          1 -> (mdDataPrio1 := tl priorityData),
          others -> Printer`Out("PMU: MD data not recognized")
          end;
      return element )

pre priorityData <> [];

public addDatToAna : nat * seq of (Data) ==> ()
  addDatToAna(analyzerId, mdDataPrio)  ==
    analyzer(analyzerId).addData(getData(mdDataPrio));
    
    
--------------------------------------------------------
--processData
--This function is called by the thread.
--------------------------------------------------------
public processData: () ==> ()
  processData() ==
  (  Printer`Out("PMU: ProcessData");
     ( for all analyzerId in set dom analyzer do
         cases analyzerId:
         3 -> ( Printer`Out("PMU: Heart Rate analyzer found... sending data");
                 if (len mdDataPrio3 > 0)
                    then (addDatToAna(HEARTRATE, mdDataPrio3))
                ),
         2 -> ( Printer`Out("PMU: Take Medicine analyzer found... sending data");
                 if (len mdDataPrio3 = 0 and len mdDataPrio2 > 0)
                    then (addDatToAna(TAKEMEDICINE, mdDataPrio2))
               ),
         1 -> ( Printer`Out("PMU: Weight analyzer found... sending data");
                 if (len mdDataPrio3 = 0 and len mdDataPrio2 = 0 and len mdDataPrio1 > 0)
                    then (addDatToAna(WEIGHT, mdDataPrio1))
               ),
         others -> Printer`Out("PMU: No analyzers attached.")
         end;
     )
  );


public isFinished : () ==> ()
  isFinished () == (
    for all analyzerId in set dom analyzer do
    (   
        analyzer(analyzerId).isFinished();
        transmitter.isFinished()
    )
  );
  

sync

mutex(collectDeviceData, getData);

per isFinished => len mdDataPrio3 = 0 and len mdDataPrio2 = 0 and len mdDataPrio1 = 0;
--permission predicate for collectDeviceData and getData
per collectDeviceData => #fin(collectDeviceData) - #fin(getData) < 3000;
per getData => #fin(getData) < #fin(collectDeviceData);
per processData => len mdDataPrio3 > 0 or len mdDataPrio2 > 0 or len mdDataPrio1 > 0;

thread
    while true do processData();

end PMU


\end{vdm_al}


