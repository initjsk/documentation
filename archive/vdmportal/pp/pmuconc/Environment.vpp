\begin{vdm_al}
class Environment is subclass of GLOBAL

types

public inline  = EventData;
public outline = ResultData;

instance variables

io : IO := new IO();

inlines : seq of inline := [];
outlines : seq of outline := [];
devices: seq of MedicalDevice := [];
pmus : seq of PMU := [];
busy : bool := true;

operations

public Environment: seq of char ==> Environment
Environment(filename) ==
    def mk_(-,input)= io.freadval[seq of inline](filename) in
        inlines := input;

public createEvent: () ==> ()
createEvent () ==
  ( 
  
   if inlines <> []
   then 
   (        --duration(x) in RT model
            dcl curtime : nat := NewWorld`timerRef.GetTime(), -- getTime() = time in RT
                done : bool := false;
                
            Printer`Out("Input file has data. Processing");
            while not done do
            def mk_(timestamp, theEvent) = hd inlines in           
            if timestamp <= curtime
            then 
            (
            
                cases theEvent:
                    mk_Data(-,-,-,-) ->
                    (
                        for all device in set elems devices do
                            if (device.getCprNr() = theEvent.cprnr and device.getDeviceType() = theEvent.datatype) then
                            (
                                Printer`Out("Env: Calling poll");                  
                                device.poll(theEvent)
                            )
                    ),
                    mk_Environment`RechargeEvent(-,-) ->
                    (
                        -- call recharge event handler thingy
                       for all pmu in set elems pmus do
                      if (pmu.PMUId = theEvent.cprnr) then
                      (
                                Printer`Out("Env: rechargeeeee");                  
                                pmu.rechargeBattery();
                       ) 
                    ),
                    others -> Printer`Out("Env: No match found!")
                  end;
                 
                
                  inlines := tl inlines;
                  done := len inlines = 0;
             )
             else 
                done := true    
     )
    else busy := false
);    
    
public addMedicalDevice: MedicalDevice ==> ()
addMedicalDevice(device) ==
(
    Printer`Out("Env: Medical device added");
    devices := devices ^ [device];    
);
    
public addPMU: PMU ==> ()
addPMU(pmu) ==
(
    Printer`Out("Env: PMU added");
    pmus := pmus ^ [pmu];    
);    
    
public handleEvent: TimeStamp * Message  ==> ()
handleEvent (time, msg) ==
  (
  Printer`Out("Env: HandleEvent called"); 
  outlines := outlines ^ [mk_(time, msg)] 
  );

public isFinished : () ==> ()
isFinished () == skip;

done: () ==> ()
    done() == skip;
    

public showResult: () ==> ()
showResult () ==
  def - = io.writeval[seq of outline](outlines) in skip;

thread

while true do
   (
        --periodic(1000, 10,900,0)(createEvent)
        done();
        
        if busy then
        ( 
            createEvent()
        );
        
        NewWorld`timerRef.NotifyAndIncTime();
    )

sync

mutex (handleEvent);
per isFinished => not busy;
per done => busy = true;
    
end Environment

\end{vdm_al}

